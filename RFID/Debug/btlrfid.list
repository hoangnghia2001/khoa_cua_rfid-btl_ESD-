
btlrfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000652c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080069d4  080069d4  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069d4  080069d4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080069dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000090  08006a68  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08006a68  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd5f  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002379  00000000  00000000  0002ce14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0002f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  0002fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188ed  00000000  00000000  00030d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f564  00000000  00000000  00049625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b622  00000000  00000000  00058b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e41ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f50  00000000  00000000  000e41fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08006620 	.word	0x08006620

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08006620 	.word	0x08006620

0800014c <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000154:	f003 ffae 	bl	80040b4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000158:	2301      	movs	r3, #1
 800015a:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 800015c:	2301      	movs	r3, #1
 800015e:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000164:	2300      	movs	r3, #0
 8000166:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000168:	f107 020c 	add.w	r2, r7, #12
 800016c:	f107 0310 	add.w	r3, r7, #16
 8000170:	4611      	mov	r1, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f004 f886 	bl	8004284 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000178:	f003 ffc2 	bl	8004100 <HAL_FLASH_Lock>
}
 800017c:	bf00      	nop
 800017e:	3720      	adds	r7, #32
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000184:	b5b0      	push	{r4, r5, r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000190:	f003 ff90 	bl	80040b4 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000194:	887b      	ldrh	r3, [r7, #2]
 8000196:	2200      	movs	r2, #0
 8000198:	461c      	mov	r4, r3
 800019a:	4615      	mov	r5, r2
 800019c:	4622      	mov	r2, r4
 800019e:	462b      	mov	r3, r5
 80001a0:	6879      	ldr	r1, [r7, #4]
 80001a2:	2001      	movs	r0, #1
 80001a4:	f003 ff16 	bl	8003fd4 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80001a8:	f003 ffaa 	bl	8004100 <HAL_FLASH_Lock>
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bdb0      	pop	{r4, r5, r7, pc}

080001b4 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4613      	mov	r3, r2
 80001c0:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80001c2:	f003 ff77 	bl	80040b4 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001c6:	2300      	movs	r3, #0
 80001c8:	82fb      	strh	r3, [r7, #22]
 80001ca:	e00c      	b.n	80001e6 <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 80001cc:	8afa      	ldrh	r2, [r7, #22]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	18d0      	adds	r0, r2, r3
 80001d2:	8afb      	ldrh	r3, [r7, #22]
 80001d4:	68ba      	ldr	r2, [r7, #8]
 80001d6:	4413      	add	r3, r2
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	f7ff ffd2 	bl	8000184 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001e0:	8afb      	ldrh	r3, [r7, #22]
 80001e2:	3302      	adds	r3, #2
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	8afa      	ldrh	r2, [r7, #22]
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d3ee      	bcc.n	80001cc <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 80001ee:	f003 ff87 	bl	8004100 <HAL_FLASH_Lock>
}
 80001f2:	bf00      	nop
 80001f4:	3718      	adds	r7, #24
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
}
 8000220:	4618      	mov	r0, r3
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000238:	4610      	mov	r0, r2
 800023a:	4619      	mov	r1, r3
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000244:	b480      	push	{r7}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	4613      	mov	r3, r2
 8000250:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000252:	2300      	movs	r3, #0
 8000254:	82fb      	strh	r3, [r7, #22]
 8000256:	e00c      	b.n	8000272 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000258:	8afa      	ldrh	r2, [r7, #22]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	4413      	add	r3, r2
 800025e:	4619      	mov	r1, r3
 8000260:	8afb      	ldrh	r3, [r7, #22]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	4413      	add	r3, r2
 8000266:	780a      	ldrb	r2, [r1, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	3301      	adds	r3, #1
 8000270:	82fb      	strh	r3, [r7, #22]
 8000272:	8afa      	ldrh	r2, [r7, #22]
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3ee      	bcc.n	8000258 <Flash_Read_Array+0x14>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	371c      	adds	r7, #28
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr

08000286 <CLCD_Delay>:
#include "lcd.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	4603      	mov	r3, r0
 800028e:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fd6c 	bl	8003d70 <HAL_Delay>

}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
 80002ac:	4613      	mov	r3, r2
 80002ae:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 80002b0:	78bb      	ldrb	r3, [r7, #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d108      	bne.n	80002c8 <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6858      	ldr	r0, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	891b      	ldrh	r3, [r3, #8]
 80002be:	2200      	movs	r2, #0
 80002c0:	4619      	mov	r1, r3
 80002c2:	f004 fa22 	bl	800470a <HAL_GPIO_WritePin>
 80002c6:	e00a      	b.n	80002de <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 80002c8:	78bb      	ldrb	r3, [r7, #2]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d107      	bne.n	80002de <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6858      	ldr	r0, [r3, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	891b      	ldrh	r3, [r3, #8]
 80002d6:	2201      	movs	r2, #1
 80002d8:	4619      	mov	r1, r3
 80002da:	f004 fa16 	bl	800470a <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6958      	ldr	r0, [r3, #20]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	8b19      	ldrh	r1, [r3, #24]
 80002e6:	78fb      	ldrb	r3, [r7, #3]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	f004 fa0b 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	69d8      	ldr	r0, [r3, #28]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	8c19      	ldrh	r1, [r3, #32]
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	085b      	lsrs	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	f004 f9fe 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000316:	78fb      	ldrb	r3, [r7, #3]
 8000318:	089b      	lsrs	r3, r3, #2
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	f004 f9f1 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	08db      	lsrs	r3, r3, #3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	461a      	mov	r2, r3
 800033e:	f004 f9e4 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	091b      	lsrs	r3, r3, #4
 800034e:	b2db      	uxtb	r3, r3
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	f004 f9d7 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	095b      	lsrs	r3, r3, #5
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f004 f9c9 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	099b      	lsrs	r3, r3, #6
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	b2db      	uxtb	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	f004 f9bb 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	09db      	lsrs	r3, r3, #7
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	f004 f9b0 	bl	800470a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68d8      	ldr	r0, [r3, #12]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	8a1b      	ldrh	r3, [r3, #16]
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	f004 f9a8 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ff63 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	68d8      	ldr	r0, [r3, #12]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8a1b      	ldrh	r3, [r3, #16]
 80003c8:	2201      	movs	r2, #1
 80003ca:	4619      	mov	r1, r3
 80003cc:	f004 f99d 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff58 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68d8      	ldr	r0, [r3, #12]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	8a1b      	ldrh	r3, [r3, #16]
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	f004 f992 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff ff4d 	bl	8000286 <CLCD_Delay>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
 8000400:	4613      	mov	r3, r2
 8000402:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	091b      	lsrs	r3, r3, #4
 8000408:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 800040e:	78bb      	ldrb	r3, [r7, #2]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d108      	bne.n	8000426 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6858      	ldr	r0, [r3, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	891b      	ldrh	r3, [r3, #8]
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f004 f973 	bl	800470a <HAL_GPIO_WritePin>
 8000424:	e00a      	b.n	800043c <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8000426:	78bb      	ldrb	r3, [r7, #2]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d107      	bne.n	800043c <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6858      	ldr	r0, [r3, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	891b      	ldrh	r3, [r3, #8]
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	f004 f967 	bl	800470a <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	f004 f95c 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	085b      	lsrs	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	b2db      	uxtb	r3, r3
 8000468:	461a      	mov	r2, r3
 800046a:	f004 f94e 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	089b      	lsrs	r3, r3, #2
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	f004 f940 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	f004 f932 	bl	800470a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68d8      	ldr	r0, [r3, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	8a1b      	ldrh	r3, [r3, #16]
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	f004 f92a 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff fee5 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68d8      	ldr	r0, [r3, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	8a1b      	ldrh	r3, [r3, #16]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	f004 f91f 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff feda 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	68d8      	ldr	r0, [r3, #12]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8a1b      	ldrh	r3, [r3, #16]
 80004da:	2200      	movs	r2, #0
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 f914 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f7ff fecf 	bl	8000286 <CLCD_Delay>

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	f004 f906 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000508:	7bbb      	ldrb	r3, [r7, #14]
 800050a:	085b      	lsrs	r3, r3, #1
 800050c:	b2db      	uxtb	r3, r3
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	f004 f8f8 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	f004 f8ea 	bl	800470a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	f004 f8dc 	bl	800470a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	68d8      	ldr	r0, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	8a1b      	ldrh	r3, [r3, #16]
 800055a:	2200      	movs	r2, #0
 800055c:	4619      	mov	r1, r3
 800055e:	f004 f8d4 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff fe8f 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68d8      	ldr	r0, [r3, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	8a1b      	ldrh	r3, [r3, #16]
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	f004 f8c9 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fe84 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68d8      	ldr	r0, [r3, #12]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	8a1b      	ldrh	r3, [r3, #16]
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f004 f8be 	bl	800470a <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff fe79 	bl	8000286 <CLCD_Delay>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	72fb      	strb	r3, [r7, #11]
 80005aa:	4613      	mov	r3, r2
 80005ac:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	7afa      	ldrb	r2, [r7, #11]
 80005b8:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	7aba      	ldrb	r2, [r7, #10]
 80005be:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	8b3a      	ldrh	r2, [r7, #24]
 80005ca:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	8c3a      	ldrh	r2, [r7, #32]
 80005d6:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005e2:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005e8:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80005ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005f6:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80005fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000604:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800060c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2206      	movs	r2, #6
 800061c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	220c      	movs	r2, #12
 8000624:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2214      	movs	r2, #20
 800062c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	CLCD_Delay(50);
 8000630:	2032      	movs	r0, #50	; 0x32
 8000632:	f7ff fe28 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000636:	2200      	movs	r2, #0
 8000638:	2133      	movs	r1, #51	; 0x33
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f7ff feda 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000640:	2005      	movs	r0, #5
 8000642:	f7ff fe20 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000646:	2200      	movs	r2, #0
 8000648:	2133      	movs	r1, #51	; 0x33
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f7ff fed2 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000650:	2005      	movs	r0, #5
 8000652:	f7ff fe18 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8000656:	2200      	movs	r2, #0
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff feca 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff fe10 	bl	8000286 <CLCD_Delay>

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff febf 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff feb7 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff feaf 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff fea7 	bl	80003f4 <CLCD_Write4>

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff fea2 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fe9d 	bl	80003f4 <CLCD_Write4>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
 80006d0:	4613      	mov	r3, r2
 80006d2:	70bb      	strb	r3, [r7, #2]

	uint8_t DRAM_ADDRESS = 0x00;
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <CLCD_SetCursor+0x8c>)
 80006da:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	78fa      	ldrb	r2, [r7, #3]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d303      	bcc.n	80006ee <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	78ba      	ldrb	r2, [r7, #2]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d303      	bcc.n	8000700 <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	3310      	adds	r3, #16
 8000704:	443b      	add	r3, r7
 8000706:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	4413      	add	r3, r2
 800070e:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d109      	bne.n	800072c <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fdbb 	bl	80002a0 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 800072a:	e00c      	b.n	8000746 <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d108      	bne.n	8000746 <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fe57 	bl	80003f4 <CLCD_Write4>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	54144000 	.word	0x54144000

08000754 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b10      	cmp	r3, #16
 8000766:	d106      	bne.n	8000776 <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fd96 	bl	80002a0 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8000774:	e009      	b.n	800078a <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d105      	bne.n	800078a <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fe35 	bl	80003f4 <CLCD_Write4>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	6039      	str	r1, [r7, #0]
	while(*String){
 800079c:	e007      	b.n	80007ae <CLCD_WriteString+0x1c>
		CLCD_WriteChar(LCD, *String++);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	603a      	str	r2, [r7, #0]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ffd3 	bl	8000754 <CLCD_WriteChar>
	while(*String){
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f3      	bne.n	800079e <CLCD_WriteString+0xc>
//		HAL_Delay(100);
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <CLCD_Clear>:
void CLCD_Clear(CLCD_Name* LCD)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if(LCD->MODE == LCD_8BITMODE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b10      	cmp	r3, #16
 80007ce:	d105      	bne.n	80007dc <CLCD_Clear+0x1c>
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fd63 	bl	80002a0 <CLCD_Write8>
 80007da:	e008      	b.n	80007ee <CLCD_Clear+0x2e>
	}
	else if(LCD->MODE == LCD_4BITMODE)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d104      	bne.n	80007ee <CLCD_Clear+0x2e>
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe03 	bl	80003f4 <CLCD_Write4>
	}
	CLCD_Delay(5);
 80007ee:	2005      	movs	r0, #5
 80007f0:	f7ff fd49 	bl	8000286 <CLCD_Delay>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_TIM_PeriodElapsedCallback>:
uint8_t CheckUID(uint8_t *data, uint32_t address);
uint8_t CheckListUID(uint8_t *data);
uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800080a:	f003 ff96 	bl	800473a <HAL_GPIO_TogglePin>
	if(exitmenu > 0)
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x28>
		exitmenu --;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3b01      	subs	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000820:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000822:	e002      	b.n	800082a <HAL_TIM_PeriodElapsedCallback+0x2e>
	else exitmenu = 0;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40011000 	.word	0x40011000
 8000838:	20000000 	.word	0x20000000

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b08f      	sub	sp, #60	; 0x3c
 8000840:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f003 fa33 	bl	8003cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f96f 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fa37 	bl	8000cbc <MX_GPIO_Init>
  MX_SPI1_Init();
 800084e:	f000 f9b1 	bl	8000bb4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000852:	f000 f9e5 	bl	8000c20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	TM_MFRC522_Init();
 8000856:	f002 fe7f 	bl	8003558 <TM_MFRC522_Init>

	CLCD_4BIT_Init(&LCD1, 16, 2, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin,
 800085a:	2308      	movs	r3, #8
 800085c:	930a      	str	r3, [sp, #40]	; 0x28
 800085e:	4ba3      	ldr	r3, [pc, #652]	; (8000aec <main+0x2b0>)
 8000860:	9309      	str	r3, [sp, #36]	; 0x24
 8000862:	2310      	movs	r3, #16
 8000864:	9308      	str	r3, [sp, #32]
 8000866:	4ba1      	ldr	r3, [pc, #644]	; (8000aec <main+0x2b0>)
 8000868:	9307      	str	r3, [sp, #28]
 800086a:	2320      	movs	r3, #32
 800086c:	9306      	str	r3, [sp, #24]
 800086e:	4b9f      	ldr	r3, [pc, #636]	; (8000aec <main+0x2b0>)
 8000870:	9305      	str	r3, [sp, #20]
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	9304      	str	r3, [sp, #16]
 8000876:	4b9d      	ldr	r3, [pc, #628]	; (8000aec <main+0x2b0>)
 8000878:	9303      	str	r3, [sp, #12]
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	4b9b      	ldr	r3, [pc, #620]	; (8000aec <main+0x2b0>)
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	4b98      	ldr	r3, [pc, #608]	; (8000aec <main+0x2b0>)
 800088a:	2202      	movs	r2, #2
 800088c:	2110      	movs	r1, #16
 800088e:	4898      	ldr	r0, [pc, #608]	; (8000af0 <main+0x2b4>)
 8000890:	f7ff fe84 	bl	800059c <CLCD_4BIT_Init>
				   D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 8000894:	4897      	ldr	r0, [pc, #604]	; (8000af4 <main+0x2b8>)
 8000896:	f004 fe6d 	bl	8005574 <HAL_TIM_Base_Start_IT>
	if (checkcountUID() == 0)
 800089a:	f002 fa6b 	bl	8002d74 <checkcountUID>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <main+0x6c>
	{
		startadd();
 80008a4:	f002 fc98 	bl	80031d8 <startadd>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		CLCD_SetCursor(&LCD1, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4890      	ldr	r0, [pc, #576]	; (8000af0 <main+0x2b4>)
 80008ae:	f7ff ff09 	bl	80006c4 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, " MOI QUET THE ");
 80008b2:	4991      	ldr	r1, [pc, #580]	; (8000af8 <main+0x2bc>)
 80008b4:	488e      	ldr	r0, [pc, #568]	; (8000af0 <main+0x2b4>)
 80008b6:	f7ff ff6c 	bl	8000792 <CLCD_WriteString>
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80008ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008be:	488f      	ldr	r0, [pc, #572]	; (8000afc <main+0x2c0>)
 80008c0:	f000 fa9c 	bl	8000dfc <checkbuton>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d07f      	beq.n	80009ca <main+0x18e>
		{
			exitmenu = 15;
 80008ca:	4b8d      	ldr	r3, [pc, #564]	; (8000b00 <main+0x2c4>)
 80008cc:	220f      	movs	r2, #15
 80008ce:	701a      	strb	r2, [r3, #0]
			CLCD_SetCursor(&LCD1, 0, 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2100      	movs	r1, #0
 80008d4:	4886      	ldr	r0, [pc, #536]	; (8000af0 <main+0x2b4>)
 80008d6:	f7ff fef5 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, "THE NGUOI LON");
 80008da:	498a      	ldr	r1, [pc, #552]	; (8000b04 <main+0x2c8>)
 80008dc:	4884      	ldr	r0, [pc, #528]	; (8000af0 <main+0x2b4>)
 80008de:	f7ff ff58 	bl	8000792 <CLCD_WriteString>
			uint8_t key = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	71fb      	strb	r3, [r7, #7]
			uint8_t stat ;
			while (exitmenu )
 80008e6:	e046      	b.n	8000976 <main+0x13a>
			{
				if (TM_MFRC522_Check(CardID) == MI_OK)
 80008e8:	4887      	ldr	r0, [pc, #540]	; (8000b08 <main+0x2cc>)
 80008ea:	f002 fe59 	bl	80035a0 <TM_MFRC522_Check>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d125      	bne.n	8000940 <main+0x104>
				{
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fa:	487c      	ldr	r0, [pc, #496]	; (8000aec <main+0x2b0>)
 80008fc:	f003 ff05 	bl	800470a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	4879      	ldr	r0, [pc, #484]	; (8000aec <main+0x2b0>)
 8000908:	f003 feff 	bl	800470a <HAL_GPIO_WritePin>
					HAL_Delay(delayloa);
 800090c:	4b7f      	ldr	r3, [pc, #508]	; (8000b0c <main+0x2d0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fa2d 	bl	8003d70 <HAL_Delay>
					HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091c:	4873      	ldr	r0, [pc, #460]	; (8000aec <main+0x2b0>)
 800091e:	f003 fef4 	bl	800470a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4870      	ldr	r0, [pc, #448]	; (8000aec <main+0x2b0>)
 800092a:	f003 feee 	bl	800470a <HAL_GPIO_WritePin>
					key = CheckListUID(CardID);
 800092e:	4876      	ldr	r0, [pc, #472]	; (8000b08 <main+0x2cc>)
 8000930:	f002 f9f0 	bl	8002d14 <CheckListUID>
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
					key = key >> 4;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	091b      	lsrs	r3, r3, #4
 800093c:	71fb      	strb	r3, [r7, #7]
					break;
 800093e:	e01e      	b.n	800097e <main+0x142>
				}
				stat = checkbuton(MENU_GPIO_Port, MENU_Pin);
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	486d      	ldr	r0, [pc, #436]	; (8000afc <main+0x2c0>)
 8000946:	f000 fa59 	bl	8000dfc <checkbuton>
 800094a:	4603      	mov	r3, r0
 800094c:	71bb      	strb	r3, [r7, #6]
				switch(stat){
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d010      	beq.n	8000976 <main+0x13a>
 8000954:	2b03      	cmp	r3, #3
 8000956:	d000      	beq.n	800095a <main+0x11e>
 8000958:	e007      	b.n	800096a <main+0x12e>
				case 0:
					break;
				case 3:
					password();
 800095a:	f002 fd01 	bl	8003360 <password>
					key = 99;
 800095e:	2363      	movs	r3, #99	; 0x63
 8000960:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 8000962:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <main+0x2c4>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
					break;
 8000968:	e005      	b.n	8000976 <main+0x13a>
				default :
					key = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 800096e:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <main+0x2c4>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
					break;
 8000974:	bf00      	nop
			while (exitmenu )
 8000976:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <main+0x2c4>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1b4      	bne.n	80008e8 <main+0xac>
				}
			}
			switch (key){
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d002      	beq.n	800098a <main+0x14e>
 8000984:	2b63      	cmp	r3, #99	; 0x63
 8000986:	d022      	beq.n	80009ce <main+0x192>
 8000988:	e002      	b.n	8000990 <main+0x154>
			case 1:
				seclectmenu();
 800098a:	f000 fa85 	bl	8000e98 <seclectmenu>
				break;
 800098e:	e01f      	b.n	80009d0 <main+0x194>
			case 99:
				break;
			default:
				CLCD_Clear(&LCD1);
 8000990:	4857      	ldr	r0, [pc, #348]	; (8000af0 <main+0x2b4>)
 8000992:	f7ff ff15 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	4855      	ldr	r0, [pc, #340]	; (8000af0 <main+0x2b4>)
 800099c:	f7ff fe92 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "      SAI ");
 80009a0:	495b      	ldr	r1, [pc, #364]	; (8000b10 <main+0x2d4>)
 80009a2:	4853      	ldr	r0, [pc, #332]	; (8000af0 <main+0x2b4>)
 80009a4:	f7ff fef5 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2100      	movs	r1, #0
 80009ac:	4850      	ldr	r0, [pc, #320]	; (8000af0 <main+0x2b4>)
 80009ae:	f7ff fe89 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "KHONG CO QUYEN");
 80009b2:	4958      	ldr	r1, [pc, #352]	; (8000b14 <main+0x2d8>)
 80009b4:	484e      	ldr	r0, [pc, #312]	; (8000af0 <main+0x2b4>)
 80009b6:	f7ff feec 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 80009ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009be:	f003 f9d7 	bl	8003d70 <HAL_Delay>
				CLCD_Clear(&LCD1);
 80009c2:	484b      	ldr	r0, [pc, #300]	; (8000af0 <main+0x2b4>)
 80009c4:	f7ff fefc 	bl	80007c0 <CLCD_Clear>
				break;
 80009c8:	e002      	b.n	80009d0 <main+0x194>
			}
		}
 80009ca:	bf00      	nop
 80009cc:	e000      	b.n	80009d0 <main+0x194>
				break;
 80009ce:	bf00      	nop
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80009d0:	484d      	ldr	r0, [pc, #308]	; (8000b08 <main+0x2cc>)
 80009d2:	f002 fde5 	bl	80035a0 <TM_MFRC522_Check>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f47f af65 	bne.w	80008a8 <main+0x6c>
		{
			sprintf(str, "ID: 0x%02X%02X%02X%02X%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 80009de:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <main+0x2cc>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <main+0x2cc>)
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	461c      	mov	r4, r3
 80009ea:	4b47      	ldr	r3, [pc, #284]	; (8000b08 <main+0x2cc>)
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <main+0x2cc>)
 80009f2:	78db      	ldrb	r3, [r3, #3]
 80009f4:	4619      	mov	r1, r3
 80009f6:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <main+0x2cc>)
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	9101      	str	r1, [sp, #4]
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	4623      	mov	r3, r4
 8000a02:	4602      	mov	r2, r0
 8000a04:	4944      	ldr	r1, [pc, #272]	; (8000b18 <main+0x2dc>)
 8000a06:	4845      	ldr	r0, [pc, #276]	; (8000b1c <main+0x2e0>)
 8000a08:	f005 f990 	bl	8005d2c <siprintf>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	4836      	ldr	r0, [pc, #216]	; (8000aec <main+0x2b0>)
 8000a14:	f003 fe79 	bl	800470a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1e:	4833      	ldr	r0, [pc, #204]	; (8000aec <main+0x2b0>)
 8000a20:	f003 fe73 	bl	800470a <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 8000a24:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <main+0x2d0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f9a1 	bl	8003d70 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <main+0x2b0>)
 8000a36:	f003 fe68 	bl	800470a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <main+0x2b0>)
 8000a42:	f003 fe62 	bl	800470a <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) != 0)
 8000a46:	4830      	ldr	r0, [pc, #192]	; (8000b08 <main+0x2cc>)
 8000a48:	f002 f964 	bl	8002d14 <CheckListUID>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d025      	beq.n	8000a9e <main+0x262>
			{
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a58:	4824      	ldr	r0, [pc, #144]	; (8000aec <main+0x2b0>)
 8000a5a:	f003 fe56 	bl	800470a <HAL_GPIO_WritePin>
				CLCD_Clear(&LCD1);
 8000a5e:	4824      	ldr	r0, [pc, #144]	; (8000af0 <main+0x2b4>)
 8000a60:	f7ff feae 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	4821      	ldr	r0, [pc, #132]	; (8000af0 <main+0x2b4>)
 8000a6a:	f7ff fe2b 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    WELCOME");
 8000a6e:	492c      	ldr	r1, [pc, #176]	; (8000b20 <main+0x2e4>)
 8000a70:	481f      	ldr	r0, [pc, #124]	; (8000af0 <main+0x2b4>)
 8000a72:	f7ff fe8e 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2100      	movs	r1, #0
 8000a7a:	481d      	ldr	r0, [pc, #116]	; (8000af0 <main+0x2b4>)
 8000a7c:	f7ff fe22 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1,str);
 8000a80:	4926      	ldr	r1, [pc, #152]	; (8000b1c <main+0x2e0>)
 8000a82:	481b      	ldr	r0, [pc, #108]	; (8000af0 <main+0x2b4>)
 8000a84:	f7ff fe85 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(5000);
 8000a88:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a8c:	f003 f970 	bl	8003d70 <HAL_Delay>
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a96:	4815      	ldr	r0, [pc, #84]	; (8000aec <main+0x2b0>)
 8000a98:	f003 fe37 	bl	800470a <HAL_GPIO_WritePin>
 8000a9c:	e018      	b.n	8000ad0 <main+0x294>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <main+0x2b4>)
 8000aa0:	f7ff fe8e 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <main+0x2b4>)
 8000aaa:	f7ff fe0b 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   THE SAI");
 8000aae:	491d      	ldr	r1, [pc, #116]	; (8000b24 <main+0x2e8>)
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <main+0x2b4>)
 8000ab2:	f7ff fe6e 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <main+0x2b4>)
 8000abc:	f7ff fe02 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, str);
 8000ac0:	4916      	ldr	r1, [pc, #88]	; (8000b1c <main+0x2e0>)
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <main+0x2b4>)
 8000ac4:	f7ff fe65 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(5000);
 8000ac8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000acc:	f003 f950 	bl	8003d70 <HAL_Delay>
			}

			CLCD_Clear(&LCD1);
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <main+0x2b4>)
 8000ad2:	f7ff fe75 	bl	80007c0 <CLCD_Clear>
			CLCD_SetCursor(&LCD1, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <main+0x2b4>)
 8000adc:	f7ff fdf2 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, " MOI QUET THE ");
 8000ae0:	4905      	ldr	r1, [pc, #20]	; (8000af8 <main+0x2bc>)
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <main+0x2b4>)
 8000ae4:	f7ff fe55 	bl	8000792 <CLCD_WriteString>
		CLCD_SetCursor(&LCD1, 0, 0);
 8000ae8:	e6de      	b.n	80008a8 <main+0x6c>
 8000aea:	bf00      	nop
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	2000015c 	.word	0x2000015c
 8000af4:	20000104 	.word	0x20000104
 8000af8:	08006638 	.word	0x08006638
 8000afc:	40010800 	.word	0x40010800
 8000b00:	20000000 	.word	0x20000000
 8000b04:	08006648 	.word	0x08006648
 8000b08:	2000014c 	.word	0x2000014c
 8000b0c:	20000018 	.word	0x20000018
 8000b10:	08006658 	.word	0x08006658
 8000b14:	08006664 	.word	0x08006664
 8000b18:	08006674 	.word	0x08006674
 8000b1c:	200001b4 	.word	0x200001b4
 8000b20:	08006690 	.word	0x08006690
 8000b24:	0800669c 	.word	0x0800669c

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b090      	sub	sp, #64	; 0x40
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2228      	movs	r2, #40	; 0x28
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f005 f8f0 	bl	8005d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fdfb 	bl	800476c <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b7c:	f002 fcbe 	bl	80034fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2302      	movs	r3, #2
 8000b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f004 f868 	bl	8004c70 <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ba6:	f002 fca9 	bl	80034fc <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3740      	adds	r7, #64	; 0x40
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2230      	movs	r2, #48	; 0x30
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f004 f999 	bl	8004f3c <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f002 fc74 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000ac 	.word	0x200000ac
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c46:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000c4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c54:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c68:	f004 fc34 	bl	80054d4 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c72:	f002 fc43 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4619      	mov	r1, r3
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c84:	f004 fdd0 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c8e:	f002 fc35 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000ca0:	f004 ffa2 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000caa:	f002 fc27 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000104 	.word	0x20000104

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b46      	ldr	r3, [pc, #280]	; (8000dec <MX_GPIO_Init+0x130>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a45      	ldr	r2, [pc, #276]	; (8000dec <MX_GPIO_Init+0x130>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_GPIO_Init+0x130>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b40      	ldr	r3, [pc, #256]	; (8000dec <MX_GPIO_Init+0x130>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a3f      	ldr	r2, [pc, #252]	; (8000dec <MX_GPIO_Init+0x130>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_GPIO_Init+0x130>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a39      	ldr	r2, [pc, #228]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a33      	ldr	r2, [pc, #204]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <MX_GPIO_Init+0x130>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d36:	482e      	ldr	r0, [pc, #184]	; (8000df0 <MX_GPIO_Init+0x134>)
 8000d38:	f003 fce7 	bl	800470a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f248 0110 	movw	r1, #32784	; 0x8010
 8000d42:	482c      	ldr	r0, [pc, #176]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d44:	f003 fce1 	bl	800470a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f247 31f8 	movw	r1, #29688	; 0x73f8
 8000d4e:	482a      	ldr	r0, [pc, #168]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d50:	f003 fcdb 	bl	800470a <HAL_GPIO_WritePin>
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4820      	ldr	r0, [pc, #128]	; (8000df0 <MX_GPIO_Init+0x134>)
 8000d6e:	f003 fb31 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8000d72:	f248 0310 	movw	r3, #32784	; 0x8010
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481a      	ldr	r0, [pc, #104]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d8c:	f003 fb22 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOA_Pin KHOA_Pin LED_Pin D7_Pin
                           D6_Pin D5_Pin D4_Pin EN_Pin
                           RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 8000d90:	f247 33f8 	movw	r3, #29688	; 0x73f8
 8000d94:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000daa:	f003 fb13 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECCT_Pin */
  GPIO_InitStruct.Pin = SELECCT_Pin;
 8000dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SELECCT_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000dc4:	f003 fb06 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_Pin */
  GPIO_InitStruct.Pin = MENU_Pin;
 8000dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000dde:	f003 faf9 	bl	80043d4 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40011000 	.word	0x40011000
 8000df4:	40010800 	.word	0x40010800
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <checkbuton>:

/* USER CODE BEGIN 4 */
uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f003 fc65 	bl	80046dc <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <checkbuton+0x20>
		return 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e039      	b.n	8000e90 <checkbuton+0x94>
	else
	{
		HAL_Delay(50);
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f002 ffa7 	bl	8003d70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)	return 0;
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	4619      	mov	r1, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f003 fc58 	bl	80046dc <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <checkbuton+0x3a>
 8000e32:	2300      	movs	r3, #0
 8000e34:	e02c      	b.n	8000e90 <checkbuton+0x94>
		uint8_t i = 50;
 8000e36:	2332      	movs	r3, #50	; 0x32
 8000e38:	73fb      	strb	r3, [r7, #15]
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e3a:	e020      	b.n	8000e7e <checkbuton+0x82>
		{
			HAL_Delay(10);
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f002 ff97 	bl	8003d70 <HAL_Delay>
			i--;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
			if (i == 0)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d117      	bne.n	8000e7e <checkbuton+0x82>
			{
				i = 250;
 8000e4e:	23fa      	movs	r3, #250	; 0xfa
 8000e50:	73fb      	strb	r3, [r7, #15]
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e52:	e00a      	b.n	8000e6a <checkbuton+0x6e>
				{
					HAL_Delay(10);
 8000e54:	200a      	movs	r0, #10
 8000e56:	f002 ff8b 	bl	8003d70 <HAL_Delay>
					i--;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
					if(i == 0)	return 3;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <checkbuton+0x6e>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e012      	b.n	8000e90 <checkbuton+0x94>
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f003 fc34 	bl	80046dc <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0ec      	beq.n	8000e54 <checkbuton+0x58>
				}
				return 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e008      	b.n	8000e90 <checkbuton+0x94>
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f003 fc2a 	bl	80046dc <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0d6      	beq.n	8000e3c <checkbuton+0x40>
			}
		}
		return 1;
 8000e8e:	2301      	movs	r3, #1
	}
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <seclectmenu>:

void seclectmenu(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
	exitmenu = 15;
 8000e9e:	4bb7      	ldr	r3, [pc, #732]	; (800117c <seclectmenu+0x2e4>)
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8000ea4:	23ff      	movs	r3, #255	; 0xff
 8000ea6:	75fb      	strb	r3, [r7, #23]
	CLCD_Clear(&LCD1);
 8000ea8:	48b5      	ldr	r0, [pc, #724]	; (8001180 <seclectmenu+0x2e8>)
 8000eaa:	f7ff fc89 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	48b3      	ldr	r0, [pc, #716]	; (8001180 <seclectmenu+0x2e8>)
 8000eb4:	f7ff fc06 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "  SELECT MENU");
 8000eb8:	49b2      	ldr	r1, [pc, #712]	; (8001184 <seclectmenu+0x2ec>)
 8000eba:	48b1      	ldr	r0, [pc, #708]	; (8001180 <seclectmenu+0x2e8>)
 8000ebc:	f7ff fc69 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	48ae      	ldr	r0, [pc, #696]	; (8001180 <seclectmenu+0x2e8>)
 8000ec6:	f7ff fbfd 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "    THEM THE");
 8000eca:	49af      	ldr	r1, [pc, #700]	; (8001188 <seclectmenu+0x2f0>)
 8000ecc:	48ac      	ldr	r0, [pc, #688]	; (8001180 <seclectmenu+0x2e8>)
 8000ece:	f7ff fc60 	bl	8000792 <CLCD_WriteString>
	while (exitmenu )
 8000ed2:	f001 bec7 	b.w	8002c64 <seclectmenu+0x1dcc>
	{
		if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	48ac      	ldr	r0, [pc, #688]	; (800118c <seclectmenu+0x2f4>)
 8000edc:	f7ff ff8e 	bl	8000dfc <checkbuton>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d06e      	beq.n	8000fc4 <seclectmenu+0x12c>
		{
			exitmenu = 15;
 8000ee6:	4ba5      	ldr	r3, [pc, #660]	; (800117c <seclectmenu+0x2e4>)
 8000ee8:	220f      	movs	r2, #15
 8000eea:	701a      	strb	r2, [r3, #0]
			status++;
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d801      	bhi.n	8000efc <seclectmenu+0x64>
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	e000      	b.n	8000efe <seclectmenu+0x66>
 8000efc:	2300      	movs	r3, #0
 8000efe:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d032      	beq.n	8000f6c <seclectmenu+0xd4>
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	dc46      	bgt.n	8000f98 <seclectmenu+0x100>
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <seclectmenu+0x7c>
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d016      	beq.n	8000f40 <seclectmenu+0xa8>
 8000f12:	e041      	b.n	8000f98 <seclectmenu+0x100>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000f14:	489a      	ldr	r0, [pc, #616]	; (8001180 <seclectmenu+0x2e8>)
 8000f16:	f7ff fc53 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4898      	ldr	r0, [pc, #608]	; (8001180 <seclectmenu+0x2e8>)
 8000f20:	f7ff fbd0 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THEM THE");
 8000f24:	499a      	ldr	r1, [pc, #616]	; (8001190 <seclectmenu+0x2f8>)
 8000f26:	4896      	ldr	r0, [pc, #600]	; (8001180 <seclectmenu+0x2e8>)
 8000f28:	f7ff fc33 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4893      	ldr	r0, [pc, #588]	; (8001180 <seclectmenu+0x2e8>)
 8000f32:	f7ff fbc7 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8000f36:	4997      	ldr	r1, [pc, #604]	; (8001194 <seclectmenu+0x2fc>)
 8000f38:	4891      	ldr	r0, [pc, #580]	; (8001180 <seclectmenu+0x2e8>)
 8000f3a:	f7ff fc2a 	bl	8000792 <CLCD_WriteString>
				break;
 8000f3e:	e042      	b.n	8000fc6 <seclectmenu+0x12e>
			case 1:
				CLCD_Clear(&LCD1);
 8000f40:	488f      	ldr	r0, [pc, #572]	; (8001180 <seclectmenu+0x2e8>)
 8000f42:	f7ff fc3d 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	488d      	ldr	r0, [pc, #564]	; (8001180 <seclectmenu+0x2e8>)
 8000f4c:	f7ff fbba 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    THEM THE");
 8000f50:	498d      	ldr	r1, [pc, #564]	; (8001188 <seclectmenu+0x2f0>)
 8000f52:	488b      	ldr	r0, [pc, #556]	; (8001180 <seclectmenu+0x2e8>)
 8000f54:	f7ff fc1d 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4888      	ldr	r0, [pc, #544]	; (8001180 <seclectmenu+0x2e8>)
 8000f5e:	f7ff fbb1 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  XOA THE");
 8000f62:	498d      	ldr	r1, [pc, #564]	; (8001198 <seclectmenu+0x300>)
 8000f64:	4886      	ldr	r0, [pc, #536]	; (8001180 <seclectmenu+0x2e8>)
 8000f66:	f7ff fc14 	bl	8000792 <CLCD_WriteString>
				break;
 8000f6a:	e02c      	b.n	8000fc6 <seclectmenu+0x12e>
			case 2:
				CLCD_Clear(&LCD1);
 8000f6c:	4884      	ldr	r0, [pc, #528]	; (8001180 <seclectmenu+0x2e8>)
 8000f6e:	f7ff fc27 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	4882      	ldr	r0, [pc, #520]	; (8001180 <seclectmenu+0x2e8>)
 8000f78:	f7ff fba4 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8000f7c:	4985      	ldr	r1, [pc, #532]	; (8001194 <seclectmenu+0x2fc>)
 8000f7e:	4880      	ldr	r0, [pc, #512]	; (8001180 <seclectmenu+0x2e8>)
 8000f80:	f7ff fc07 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2100      	movs	r1, #0
 8000f88:	487d      	ldr	r0, [pc, #500]	; (8001180 <seclectmenu+0x2e8>)
 8000f8a:	f7ff fb9b 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  TRA THE");
 8000f8e:	4983      	ldr	r1, [pc, #524]	; (800119c <seclectmenu+0x304>)
 8000f90:	487b      	ldr	r0, [pc, #492]	; (8001180 <seclectmenu+0x2e8>)
 8000f92:	f7ff fbfe 	bl	8000792 <CLCD_WriteString>
				break;
 8000f96:	e016      	b.n	8000fc6 <seclectmenu+0x12e>
			default:
				CLCD_Clear(&LCD1);
 8000f98:	4879      	ldr	r0, [pc, #484]	; (8001180 <seclectmenu+0x2e8>)
 8000f9a:	f7ff fc11 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4877      	ldr	r0, [pc, #476]	; (8001180 <seclectmenu+0x2e8>)
 8000fa4:	f7ff fb8e 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    TRA THE");
 8000fa8:	497d      	ldr	r1, [pc, #500]	; (80011a0 <seclectmenu+0x308>)
 8000faa:	4875      	ldr	r0, [pc, #468]	; (8001180 <seclectmenu+0x2e8>)
 8000fac:	f7ff fbf1 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4872      	ldr	r0, [pc, #456]	; (8001180 <seclectmenu+0x2e8>)
 8000fb6:	f7ff fb85 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THOAT");
 8000fba:	497a      	ldr	r1, [pc, #488]	; (80011a4 <seclectmenu+0x30c>)
 8000fbc:	4870      	ldr	r0, [pc, #448]	; (8001180 <seclectmenu+0x2e8>)
 8000fbe:	f7ff fbe8 	bl	8000792 <CLCD_WriteString>
				break;
 8000fc2:	e000      	b.n	8000fc6 <seclectmenu+0x12e>
			}
		}
 8000fc4:	bf00      	nop
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fca:	4877      	ldr	r0, [pc, #476]	; (80011a8 <seclectmenu+0x310>)
 8000fcc:	f7ff ff16 	bl	8000dfc <checkbuton>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f001 8645 	beq.w	8002c62 <seclectmenu+0x1dca>
		{
			exitmenu = 15;
 8000fd8:	4b68      	ldr	r3, [pc, #416]	; (800117c <seclectmenu+0x2e4>)
 8000fda:	220f      	movs	r2, #15
 8000fdc:	701a      	strb	r2, [r3, #0]
			switch (status)
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	f001 8622 	beq.w	8002c2a <seclectmenu+0x1d92>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f301 8637 	bgt.w	8002c5a <seclectmenu+0x1dc2>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <seclectmenu+0x162>
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f000 8556 	beq.w	8001aa2 <seclectmenu+0xc0a>
 8000ff6:	f001 be30 	b.w	8002c5a <seclectmenu+0x1dc2>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000ffa:	4861      	ldr	r0, [pc, #388]	; (8001180 <seclectmenu+0x2e8>)
 8000ffc:	f7ff fbe0 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	485e      	ldr	r0, [pc, #376]	; (8001180 <seclectmenu+0x2e8>)
 8001006:	f7ff fb5d 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    SELECT ");
 800100a:	4968      	ldr	r1, [pc, #416]	; (80011ac <seclectmenu+0x314>)
 800100c:	485c      	ldr	r0, [pc, #368]	; (8001180 <seclectmenu+0x2e8>)
 800100e:	f7ff fbc0 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	2100      	movs	r1, #0
 8001016:	485a      	ldr	r0, [pc, #360]	; (8001180 <seclectmenu+0x2e8>)
 8001018:	f7ff fb54 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 800101c:	4964      	ldr	r1, [pc, #400]	; (80011b0 <seclectmenu+0x318>)
 800101e:	4858      	ldr	r0, [pc, #352]	; (8001180 <seclectmenu+0x2e8>)
 8001020:	f7ff fbb7 	bl	8000792 <CLCD_WriteString>
				uint8_t statusadd = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 800102c:	f000 bd1e 	b.w	8001a6c <seclectmenu+0xbd4>
				{
					if (exitmenu == 0)
 8001030:	4b52      	ldr	r3, [pc, #328]	; (800117c <seclectmenu+0x2e4>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d108      	bne.n	800104a <seclectmenu+0x1b2>
					{
						CLCD_Clear(&LCD1);
 8001038:	4851      	ldr	r0, [pc, #324]	; (8001180 <seclectmenu+0x2e8>)
 800103a:	f7ff fbc1 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001042:	f002 fe95 	bl	8003d70 <HAL_Delay>
						return;
 8001046:	f001 be19 	b.w	8002c7c <seclectmenu+0x1de4>
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 800104a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104e:	484f      	ldr	r0, [pc, #316]	; (800118c <seclectmenu+0x2f4>)
 8001050:	f7ff fed4 	bl	8000dfc <checkbuton>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d054      	beq.n	8001104 <seclectmenu+0x26c>
					{
						exitmenu = 15;
 800105a:	4b48      	ldr	r3, [pc, #288]	; (800117c <seclectmenu+0x2e4>)
 800105c:	220f      	movs	r2, #15
 800105e:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001060:	7dbb      	ldrb	r3, [r7, #22]
 8001062:	3301      	adds	r3, #1
 8001064:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d801      	bhi.n	8001070 <seclectmenu+0x1d8>
 800106c:	7dbb      	ldrb	r3, [r7, #22]
 800106e:	e000      	b.n	8001072 <seclectmenu+0x1da>
 8001070:	2300      	movs	r3, #0
 8001072:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001074:	7dbb      	ldrb	r3, [r7, #22]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d002      	beq.n	8001080 <seclectmenu+0x1e8>
 800107a:	2b02      	cmp	r3, #2
 800107c:	d016      	beq.n	80010ac <seclectmenu+0x214>
 800107e:	e02b      	b.n	80010d8 <seclectmenu+0x240>
						{
						case 1:
							CLCD_Clear(&LCD1);
 8001080:	483f      	ldr	r0, [pc, #252]	; (8001180 <seclectmenu+0x2e8>)
 8001082:	f7ff fb9d 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	483d      	ldr	r0, [pc, #244]	; (8001180 <seclectmenu+0x2e8>)
 800108c:	f7ff fb1a 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001090:	4948      	ldr	r1, [pc, #288]	; (80011b4 <seclectmenu+0x31c>)
 8001092:	483b      	ldr	r0, [pc, #236]	; (8001180 <seclectmenu+0x2e8>)
 8001094:	f7ff fb7d 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	2100      	movs	r1, #0
 800109c:	4838      	ldr	r0, [pc, #224]	; (8001180 <seclectmenu+0x2e8>)
 800109e:	f7ff fb11 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 80010a2:	4945      	ldr	r1, [pc, #276]	; (80011b8 <seclectmenu+0x320>)
 80010a4:	4836      	ldr	r0, [pc, #216]	; (8001180 <seclectmenu+0x2e8>)
 80010a6:	f7ff fb74 	bl	8000792 <CLCD_WriteString>
							break;
 80010aa:	e02c      	b.n	8001106 <seclectmenu+0x26e>
						case 2:
							CLCD_Clear(&LCD1);
 80010ac:	4834      	ldr	r0, [pc, #208]	; (8001180 <seclectmenu+0x2e8>)
 80010ae:	f7ff fb87 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	4832      	ldr	r0, [pc, #200]	; (8001180 <seclectmenu+0x2e8>)
 80010b8:	f7ff fb04 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 80010bc:	493c      	ldr	r1, [pc, #240]	; (80011b0 <seclectmenu+0x318>)
 80010be:	4830      	ldr	r0, [pc, #192]	; (8001180 <seclectmenu+0x2e8>)
 80010c0:	f7ff fb67 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2100      	movs	r1, #0
 80010c8:	482d      	ldr	r0, [pc, #180]	; (8001180 <seclectmenu+0x2e8>)
 80010ca:	f7ff fafb 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE TRE EM");
 80010ce:	493b      	ldr	r1, [pc, #236]	; (80011bc <seclectmenu+0x324>)
 80010d0:	482b      	ldr	r0, [pc, #172]	; (8001180 <seclectmenu+0x2e8>)
 80010d2:	f7ff fb5e 	bl	8000792 <CLCD_WriteString>
							break;
 80010d6:	e016      	b.n	8001106 <seclectmenu+0x26e>
						default:
							CLCD_Clear(&LCD1);
 80010d8:	4829      	ldr	r0, [pc, #164]	; (8001180 <seclectmenu+0x2e8>)
 80010da:	f7ff fb71 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	4827      	ldr	r0, [pc, #156]	; (8001180 <seclectmenu+0x2e8>)
 80010e4:	f7ff faee 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 80010e8:	4933      	ldr	r1, [pc, #204]	; (80011b8 <seclectmenu+0x320>)
 80010ea:	4825      	ldr	r0, [pc, #148]	; (8001180 <seclectmenu+0x2e8>)
 80010ec:	f7ff fb51 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	4822      	ldr	r0, [pc, #136]	; (8001180 <seclectmenu+0x2e8>)
 80010f6:	f7ff fae5 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 80010fa:	4931      	ldr	r1, [pc, #196]	; (80011c0 <seclectmenu+0x328>)
 80010fc:	4820      	ldr	r0, [pc, #128]	; (8001180 <seclectmenu+0x2e8>)
 80010fe:	f7ff fb48 	bl	8000792 <CLCD_WriteString>
							break;
 8001102:	e000      	b.n	8001106 <seclectmenu+0x26e>
						}
					}
 8001104:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	4827      	ldr	r0, [pc, #156]	; (80011a8 <seclectmenu+0x310>)
 800110c:	f7ff fe76 	bl	8000dfc <checkbuton>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 84a9 	beq.w	8001a6a <seclectmenu+0xbd2>
					{
						exitmenu = 15;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <seclectmenu+0x2e4>)
 800111a:	220f      	movs	r2, #15
 800111c:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 800111e:	7dbb      	ldrb	r3, [r7, #22]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d004      	beq.n	800112e <seclectmenu+0x296>
 8001124:	2b02      	cmp	r3, #2
 8001126:	f000 8264 	beq.w	80015f2 <seclectmenu+0x75a>
 800112a:	f000 bc9b 	b.w	8001a64 <seclectmenu+0xbcc>
						{
						case 1:
							CLCD_Clear(&LCD1);
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <seclectmenu+0x2e8>)
 8001130:	f7ff fb46 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <seclectmenu+0x2e8>)
 800113a:	f7ff fac3 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800113e:	4921      	ldr	r1, [pc, #132]	; (80011c4 <seclectmenu+0x32c>)
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <seclectmenu+0x2e8>)
 8001142:	f7ff fb26 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	2100      	movs	r1, #0
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <seclectmenu+0x2e8>)
 800114c:	f7ff faba 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    THE 2 ");
 8001150:	491d      	ldr	r1, [pc, #116]	; (80011c8 <seclectmenu+0x330>)
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <seclectmenu+0x2e8>)
 8001154:	f7ff fb1d 	bl	8000792 <CLCD_WriteString>
							uint8_t statusadd1 = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8001160:	e22d      	b.n	80015be <seclectmenu+0x726>
							{
								if (exitmenu == 0)
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <seclectmenu+0x2e4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d130      	bne.n	80011cc <seclectmenu+0x334>
								{
									CLCD_Clear(&LCD1);
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <seclectmenu+0x2e8>)
 800116c:	f7ff fb28 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001174:	f002 fdfc 	bl	8003d70 <HAL_Delay>
									return;
 8001178:	f001 bd80 	b.w	8002c7c <seclectmenu+0x1de4>
 800117c:	20000000 	.word	0x20000000
 8001180:	2000015c 	.word	0x2000015c
 8001184:	080066a8 	.word	0x080066a8
 8001188:	080066b8 	.word	0x080066b8
 800118c:	40010c00 	.word	0x40010c00
 8001190:	080066c8 	.word	0x080066c8
 8001194:	080066d8 	.word	0x080066d8
 8001198:	080066e4 	.word	0x080066e4
 800119c:	080066f0 	.word	0x080066f0
 80011a0:	080066fc 	.word	0x080066fc
 80011a4:	08006708 	.word	0x08006708
 80011a8:	40010800 	.word	0x40010800
 80011ac:	08006714 	.word	0x08006714
 80011b0:	08006720 	.word	0x08006720
 80011b4:	08006734 	.word	0x08006734
 80011b8:	08006748 	.word	0x08006748
 80011bc:	08006758 	.word	0x08006758
 80011c0:	08006768 	.word	0x08006768
 80011c4:	08006770 	.word	0x08006770
 80011c8:	0800677c 	.word	0x0800677c
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80011cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d0:	48b8      	ldr	r0, [pc, #736]	; (80014b4 <seclectmenu+0x61c>)
 80011d2:	f7ff fe13 	bl	8000dfc <checkbuton>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 808b 	beq.w	80012f4 <seclectmenu+0x45c>
								{
									exitmenu = 15;
 80011de:	4bb6      	ldr	r3, [pc, #728]	; (80014b8 <seclectmenu+0x620>)
 80011e0:	220f      	movs	r2, #15
 80011e2:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 80011e4:	7d3b      	ldrb	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 80011ea:	7d3b      	ldrb	r3, [r7, #20]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d801      	bhi.n	80011f4 <seclectmenu+0x35c>
 80011f0:	7d3b      	ldrb	r3, [r7, #20]
 80011f2:	e000      	b.n	80011f6 <seclectmenu+0x35e>
 80011f4:	2300      	movs	r3, #0
 80011f6:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 80011f8:	7d3b      	ldrb	r3, [r7, #20]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d863      	bhi.n	80012c8 <seclectmenu+0x430>
 8001200:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <seclectmenu+0x370>)
 8001202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001206:	bf00      	nop
 8001208:	08001219 	.word	0x08001219
 800120c:	08001245 	.word	0x08001245
 8001210:	08001271 	.word	0x08001271
 8001214:	0800129d 	.word	0x0800129d
									{
									case 1:
										CLCD_Clear(&LCD1);
 8001218:	48a8      	ldr	r0, [pc, #672]	; (80014bc <seclectmenu+0x624>)
 800121a:	f7ff fad1 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	48a6      	ldr	r0, [pc, #664]	; (80014bc <seclectmenu+0x624>)
 8001224:	f7ff fa4e 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001228:	49a5      	ldr	r1, [pc, #660]	; (80014c0 <seclectmenu+0x628>)
 800122a:	48a4      	ldr	r0, [pc, #656]	; (80014bc <seclectmenu+0x624>)
 800122c:	f7ff fab1 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	2100      	movs	r1, #0
 8001234:	48a1      	ldr	r0, [pc, #644]	; (80014bc <seclectmenu+0x624>)
 8001236:	f7ff fa45 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 2 ");
 800123a:	49a2      	ldr	r1, [pc, #648]	; (80014c4 <seclectmenu+0x62c>)
 800123c:	489f      	ldr	r0, [pc, #636]	; (80014bc <seclectmenu+0x624>)
 800123e:	f7ff faa8 	bl	8000792 <CLCD_WriteString>
										break;
 8001242:	e058      	b.n	80012f6 <seclectmenu+0x45e>
									case 2:
										CLCD_Clear(&LCD1);
 8001244:	489d      	ldr	r0, [pc, #628]	; (80014bc <seclectmenu+0x624>)
 8001246:	f7ff fabb 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	489b      	ldr	r0, [pc, #620]	; (80014bc <seclectmenu+0x624>)
 8001250:	f7ff fa38 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001254:	499c      	ldr	r1, [pc, #624]	; (80014c8 <seclectmenu+0x630>)
 8001256:	4899      	ldr	r0, [pc, #612]	; (80014bc <seclectmenu+0x624>)
 8001258:	f7ff fa9b 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	2100      	movs	r1, #0
 8001260:	4896      	ldr	r0, [pc, #600]	; (80014bc <seclectmenu+0x624>)
 8001262:	f7ff fa2f 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 3 ");
 8001266:	4999      	ldr	r1, [pc, #612]	; (80014cc <seclectmenu+0x634>)
 8001268:	4894      	ldr	r0, [pc, #592]	; (80014bc <seclectmenu+0x624>)
 800126a:	f7ff fa92 	bl	8000792 <CLCD_WriteString>
										break;
 800126e:	e042      	b.n	80012f6 <seclectmenu+0x45e>
									case 3:
										CLCD_Clear(&LCD1);
 8001270:	4892      	ldr	r0, [pc, #584]	; (80014bc <seclectmenu+0x624>)
 8001272:	f7ff faa5 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	4890      	ldr	r0, [pc, #576]	; (80014bc <seclectmenu+0x624>)
 800127c:	f7ff fa22 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001280:	4993      	ldr	r1, [pc, #588]	; (80014d0 <seclectmenu+0x638>)
 8001282:	488e      	ldr	r0, [pc, #568]	; (80014bc <seclectmenu+0x624>)
 8001284:	f7ff fa85 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2100      	movs	r1, #0
 800128c:	488b      	ldr	r0, [pc, #556]	; (80014bc <seclectmenu+0x624>)
 800128e:	f7ff fa19 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 8001292:	4990      	ldr	r1, [pc, #576]	; (80014d4 <seclectmenu+0x63c>)
 8001294:	4889      	ldr	r0, [pc, #548]	; (80014bc <seclectmenu+0x624>)
 8001296:	f7ff fa7c 	bl	8000792 <CLCD_WriteString>
										break;
 800129a:	e02c      	b.n	80012f6 <seclectmenu+0x45e>
									case 4:
										CLCD_Clear(&LCD1);
 800129c:	4887      	ldr	r0, [pc, #540]	; (80014bc <seclectmenu+0x624>)
 800129e:	f7ff fa8f 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	4885      	ldr	r0, [pc, #532]	; (80014bc <seclectmenu+0x624>)
 80012a8:	f7ff fa0c 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80012ac:	498a      	ldr	r1, [pc, #552]	; (80014d8 <seclectmenu+0x640>)
 80012ae:	4883      	ldr	r0, [pc, #524]	; (80014bc <seclectmenu+0x624>)
 80012b0:	f7ff fa6f 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2100      	movs	r1, #0
 80012b8:	4880      	ldr	r0, [pc, #512]	; (80014bc <seclectmenu+0x624>)
 80012ba:	f7ff fa03 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 80012be:	4987      	ldr	r1, [pc, #540]	; (80014dc <seclectmenu+0x644>)
 80012c0:	487e      	ldr	r0, [pc, #504]	; (80014bc <seclectmenu+0x624>)
 80012c2:	f7ff fa66 	bl	8000792 <CLCD_WriteString>
										break;
 80012c6:	e016      	b.n	80012f6 <seclectmenu+0x45e>
									default:
										CLCD_Clear(&LCD1);
 80012c8:	487c      	ldr	r0, [pc, #496]	; (80014bc <seclectmenu+0x624>)
 80012ca:	f7ff fa79 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	487a      	ldr	r0, [pc, #488]	; (80014bc <seclectmenu+0x624>)
 80012d4:	f7ff f9f6 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 80012d8:	497e      	ldr	r1, [pc, #504]	; (80014d4 <seclectmenu+0x63c>)
 80012da:	4878      	ldr	r0, [pc, #480]	; (80014bc <seclectmenu+0x624>)
 80012dc:	f7ff fa59 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2100      	movs	r1, #0
 80012e4:	4875      	ldr	r0, [pc, #468]	; (80014bc <seclectmenu+0x624>)
 80012e6:	f7ff f9ed 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 80012ea:	497d      	ldr	r1, [pc, #500]	; (80014e0 <seclectmenu+0x648>)
 80012ec:	4873      	ldr	r0, [pc, #460]	; (80014bc <seclectmenu+0x624>)
 80012ee:	f7ff fa50 	bl	8000792 <CLCD_WriteString>
										break;
 80012f2:	e000      	b.n	80012f6 <seclectmenu+0x45e>
									}
								}
 80012f4:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	487a      	ldr	r0, [pc, #488]	; (80014e4 <seclectmenu+0x64c>)
 80012fc:	f7ff fd7e 	bl	8000dfc <checkbuton>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 815a 	beq.w	80015bc <seclectmenu+0x724>
								{
									exitmenu = 15;
 8001308:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <seclectmenu+0x620>)
 800130a:	220f      	movs	r2, #15
 800130c:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800130e:	7dbb      	ldrb	r3, [r7, #22]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	b2da      	uxtb	r2, r3
 8001314:	7d3b      	ldrb	r3, [r7, #20]
 8001316:	4413      	add	r3, r2
 8001318:	70bb      	strb	r3, [r7, #2]
									switch (statusadd1)
 800131a:	7d3b      	ldrb	r3, [r7, #20]
 800131c:	3b01      	subs	r3, #1
 800131e:	2b03      	cmp	r3, #3
 8001320:	f200 8149 	bhi.w	80015b6 <seclectmenu+0x71e>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <seclectmenu+0x494>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	0800133d 	.word	0x0800133d
 8001330:	080013cb 	.word	0x080013cb
 8001334:	08001459 	.word	0x08001459
 8001338:	08001529 	.word	0x08001529
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 800133c:	78bb      	ldrb	r3, [r7, #2]
 800133e:	4618      	mov	r0, r3
 8001340:	f001 ff0e 	bl	8003160 <CheckKey>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d025      	beq.n	8001396 <seclectmenu+0x4fe>
										{
											CLCD_Clear(&LCD1);
 800134a:	485c      	ldr	r0, [pc, #368]	; (80014bc <seclectmenu+0x624>)
 800134c:	f7ff fa38 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	4859      	ldr	r0, [pc, #356]	; (80014bc <seclectmenu+0x624>)
 8001356:	f7ff f9b5 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 1 ");
 800135a:	4963      	ldr	r1, [pc, #396]	; (80014e8 <seclectmenu+0x650>)
 800135c:	4857      	ldr	r0, [pc, #348]	; (80014bc <seclectmenu+0x624>)
 800135e:	f7ff fa18 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 8001362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001366:	f002 fd03 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800136a:	4854      	ldr	r0, [pc, #336]	; (80014bc <seclectmenu+0x624>)
 800136c:	f7ff fa28 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	4851      	ldr	r0, [pc, #324]	; (80014bc <seclectmenu+0x624>)
 8001376:	f7ff f9a5 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800137a:	4951      	ldr	r1, [pc, #324]	; (80014c0 <seclectmenu+0x628>)
 800137c:	484f      	ldr	r0, [pc, #316]	; (80014bc <seclectmenu+0x624>)
 800137e:	f7ff fa08 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001382:	2201      	movs	r2, #1
 8001384:	2100      	movs	r1, #0
 8001386:	484d      	ldr	r0, [pc, #308]	; (80014bc <seclectmenu+0x624>)
 8001388:	f7ff f99c 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 800138c:	494d      	ldr	r1, [pc, #308]	; (80014c4 <seclectmenu+0x62c>)
 800138e:	484b      	ldr	r0, [pc, #300]	; (80014bc <seclectmenu+0x624>)
 8001390:	f7ff f9ff 	bl	8000792 <CLCD_WriteString>
 8001394:	e113      	b.n	80015be <seclectmenu+0x726>
										}
										else
										{
											adduid(keyadd1);
 8001396:	78bb      	ldrb	r3, [r7, #2]
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fd1d 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 800139e:	4847      	ldr	r0, [pc, #284]	; (80014bc <seclectmenu+0x624>)
 80013a0:	f7ff fa0e 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	4844      	ldr	r0, [pc, #272]	; (80014bc <seclectmenu+0x624>)
 80013aa:	f7ff f98b 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80013ae:	4944      	ldr	r1, [pc, #272]	; (80014c0 <seclectmenu+0x628>)
 80013b0:	4842      	ldr	r0, [pc, #264]	; (80014bc <seclectmenu+0x624>)
 80013b2:	f7ff f9ee 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2100      	movs	r1, #0
 80013ba:	4840      	ldr	r0, [pc, #256]	; (80014bc <seclectmenu+0x624>)
 80013bc:	f7ff f982 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 80013c0:	4940      	ldr	r1, [pc, #256]	; (80014c4 <seclectmenu+0x62c>)
 80013c2:	483e      	ldr	r0, [pc, #248]	; (80014bc <seclectmenu+0x624>)
 80013c4:	f7ff f9e5 	bl	8000792 <CLCD_WriteString>
										}
										break;
 80013c8:	e0f9      	b.n	80015be <seclectmenu+0x726>
									case 2:
										if (CheckKey(keyadd1) != 0)
 80013ca:	78bb      	ldrb	r3, [r7, #2]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fec7 	bl	8003160 <CheckKey>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d025      	beq.n	8001424 <seclectmenu+0x58c>
										{
											CLCD_Clear(&LCD1);
 80013d8:	4838      	ldr	r0, [pc, #224]	; (80014bc <seclectmenu+0x624>)
 80013da:	f7ff f9f1 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	4836      	ldr	r0, [pc, #216]	; (80014bc <seclectmenu+0x624>)
 80013e4:	f7ff f96e 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 2 ");
 80013e8:	4940      	ldr	r1, [pc, #256]	; (80014ec <seclectmenu+0x654>)
 80013ea:	4834      	ldr	r0, [pc, #208]	; (80014bc <seclectmenu+0x624>)
 80013ec:	f7ff f9d1 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 80013f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f4:	f002 fcbc 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80013f8:	4830      	ldr	r0, [pc, #192]	; (80014bc <seclectmenu+0x624>)
 80013fa:	f7ff f9e1 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	482e      	ldr	r0, [pc, #184]	; (80014bc <seclectmenu+0x624>)
 8001404:	f7ff f95e 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001408:	492f      	ldr	r1, [pc, #188]	; (80014c8 <seclectmenu+0x630>)
 800140a:	482c      	ldr	r0, [pc, #176]	; (80014bc <seclectmenu+0x624>)
 800140c:	f7ff f9c1 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001410:	2201      	movs	r2, #1
 8001412:	2100      	movs	r1, #0
 8001414:	4829      	ldr	r0, [pc, #164]	; (80014bc <seclectmenu+0x624>)
 8001416:	f7ff f955 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 800141a:	492c      	ldr	r1, [pc, #176]	; (80014cc <seclectmenu+0x634>)
 800141c:	4827      	ldr	r0, [pc, #156]	; (80014bc <seclectmenu+0x624>)
 800141e:	f7ff f9b8 	bl	8000792 <CLCD_WriteString>
 8001422:	e0cc      	b.n	80015be <seclectmenu+0x726>
										}
										else
										{
											adduid(keyadd1);
 8001424:	78bb      	ldrb	r3, [r7, #2]
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fcd6 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 800142c:	4823      	ldr	r0, [pc, #140]	; (80014bc <seclectmenu+0x624>)
 800142e:	f7ff f9c7 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	4821      	ldr	r0, [pc, #132]	; (80014bc <seclectmenu+0x624>)
 8001438:	f7ff f944 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 800143c:	4922      	ldr	r1, [pc, #136]	; (80014c8 <seclectmenu+0x630>)
 800143e:	481f      	ldr	r0, [pc, #124]	; (80014bc <seclectmenu+0x624>)
 8001440:	f7ff f9a7 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	2100      	movs	r1, #0
 8001448:	481c      	ldr	r0, [pc, #112]	; (80014bc <seclectmenu+0x624>)
 800144a:	f7ff f93b 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 800144e:	491f      	ldr	r1, [pc, #124]	; (80014cc <seclectmenu+0x634>)
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <seclectmenu+0x624>)
 8001452:	f7ff f99e 	bl	8000792 <CLCD_WriteString>
										}
										break;
 8001456:	e0b2      	b.n	80015be <seclectmenu+0x726>
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001458:	78bb      	ldrb	r3, [r7, #2]
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fe80 	bl	8003160 <CheckKey>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d046      	beq.n	80014f4 <seclectmenu+0x65c>
										{
											CLCD_Clear(&LCD1);
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <seclectmenu+0x624>)
 8001468:	f7ff f9aa 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <seclectmenu+0x624>)
 8001472:	f7ff f927 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 3 ");
 8001476:	491e      	ldr	r1, [pc, #120]	; (80014f0 <seclectmenu+0x658>)
 8001478:	4810      	ldr	r0, [pc, #64]	; (80014bc <seclectmenu+0x624>)
 800147a:	f7ff f98a 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 800147e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001482:	f002 fc75 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <seclectmenu+0x624>)
 8001488:	f7ff f99a 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <seclectmenu+0x624>)
 8001492:	f7ff f917 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <seclectmenu+0x638>)
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <seclectmenu+0x624>)
 800149a:	f7ff f97a 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800149e:	2201      	movs	r2, #1
 80014a0:	2100      	movs	r1, #0
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <seclectmenu+0x624>)
 80014a4:	f7ff f90e 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 80014a8:	490a      	ldr	r1, [pc, #40]	; (80014d4 <seclectmenu+0x63c>)
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <seclectmenu+0x624>)
 80014ac:	f7ff f971 	bl	8000792 <CLCD_WriteString>
 80014b0:	e085      	b.n	80015be <seclectmenu+0x726>
 80014b2:	bf00      	nop
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	20000000 	.word	0x20000000
 80014bc:	2000015c 	.word	0x2000015c
 80014c0:	08006770 	.word	0x08006770
 80014c4:	0800677c 	.word	0x0800677c
 80014c8:	08006788 	.word	0x08006788
 80014cc:	08006794 	.word	0x08006794
 80014d0:	080067a0 	.word	0x080067a0
 80014d4:	080067ac 	.word	0x080067ac
 80014d8:	080067b8 	.word	0x080067b8
 80014dc:	080067c4 	.word	0x080067c4
 80014e0:	080067d0 	.word	0x080067d0
 80014e4:	40010800 	.word	0x40010800
 80014e8:	080067dc 	.word	0x080067dc
 80014ec:	080067ec 	.word	0x080067ec
 80014f0:	080067fc 	.word	0x080067fc
										}
										else
										{
											adduid(keyadd1);
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fc6e 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 80014fc:	48ac      	ldr	r0, [pc, #688]	; (80017b0 <seclectmenu+0x918>)
 80014fe:	f7ff f95f 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	48aa      	ldr	r0, [pc, #680]	; (80017b0 <seclectmenu+0x918>)
 8001508:	f7ff f8dc 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800150c:	49a9      	ldr	r1, [pc, #676]	; (80017b4 <seclectmenu+0x91c>)
 800150e:	48a8      	ldr	r0, [pc, #672]	; (80017b0 <seclectmenu+0x918>)
 8001510:	f7ff f93f 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2100      	movs	r1, #0
 8001518:	48a5      	ldr	r0, [pc, #660]	; (80017b0 <seclectmenu+0x918>)
 800151a:	f7ff f8d3 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 800151e:	49a6      	ldr	r1, [pc, #664]	; (80017b8 <seclectmenu+0x920>)
 8001520:	48a3      	ldr	r0, [pc, #652]	; (80017b0 <seclectmenu+0x918>)
 8001522:	f7ff f936 	bl	8000792 <CLCD_WriteString>
										}
										break;
 8001526:	e04a      	b.n	80015be <seclectmenu+0x726>
									case 4:
										if (CheckKey(keyadd1) != 0)
 8001528:	78bb      	ldrb	r3, [r7, #2]
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fe18 	bl	8003160 <CheckKey>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d025      	beq.n	8001582 <seclectmenu+0x6ea>
										{
											CLCD_Clear(&LCD1);
 8001536:	489e      	ldr	r0, [pc, #632]	; (80017b0 <seclectmenu+0x918>)
 8001538:	f7ff f942 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	489b      	ldr	r0, [pc, #620]	; (80017b0 <seclectmenu+0x918>)
 8001542:	f7ff f8bf 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 4 ");
 8001546:	499d      	ldr	r1, [pc, #628]	; (80017bc <seclectmenu+0x924>)
 8001548:	4899      	ldr	r0, [pc, #612]	; (80017b0 <seclectmenu+0x918>)
 800154a:	f7ff f922 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001552:	f002 fc0d 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001556:	4896      	ldr	r0, [pc, #600]	; (80017b0 <seclectmenu+0x918>)
 8001558:	f7ff f932 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	4893      	ldr	r0, [pc, #588]	; (80017b0 <seclectmenu+0x918>)
 8001562:	f7ff f8af 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001566:	4996      	ldr	r1, [pc, #600]	; (80017c0 <seclectmenu+0x928>)
 8001568:	4891      	ldr	r0, [pc, #580]	; (80017b0 <seclectmenu+0x918>)
 800156a:	f7ff f912 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	2100      	movs	r1, #0
 8001572:	488f      	ldr	r0, [pc, #572]	; (80017b0 <seclectmenu+0x918>)
 8001574:	f7ff f8a6 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 8001578:	4992      	ldr	r1, [pc, #584]	; (80017c4 <seclectmenu+0x92c>)
 800157a:	488d      	ldr	r0, [pc, #564]	; (80017b0 <seclectmenu+0x918>)
 800157c:	f7ff f909 	bl	8000792 <CLCD_WriteString>
 8001580:	e01d      	b.n	80015be <seclectmenu+0x726>
										}
										else
										{
											adduid(keyadd1);
 8001582:	78bb      	ldrb	r3, [r7, #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fc27 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 800158a:	4889      	ldr	r0, [pc, #548]	; (80017b0 <seclectmenu+0x918>)
 800158c:	f7ff f918 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	4886      	ldr	r0, [pc, #536]	; (80017b0 <seclectmenu+0x918>)
 8001596:	f7ff f895 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800159a:	4989      	ldr	r1, [pc, #548]	; (80017c0 <seclectmenu+0x928>)
 800159c:	4884      	ldr	r0, [pc, #528]	; (80017b0 <seclectmenu+0x918>)
 800159e:	f7ff f8f8 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2100      	movs	r1, #0
 80015a6:	4882      	ldr	r0, [pc, #520]	; (80017b0 <seclectmenu+0x918>)
 80015a8:	f7ff f88c 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80015ac:	4985      	ldr	r1, [pc, #532]	; (80017c4 <seclectmenu+0x92c>)
 80015ae:	4880      	ldr	r0, [pc, #512]	; (80017b0 <seclectmenu+0x918>)
 80015b0:	f7ff f8ef 	bl	8000792 <CLCD_WriteString>
										}
										break;
 80015b4:	e003      	b.n	80015be <seclectmenu+0x726>
									default:
										back11 = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	74fb      	strb	r3, [r7, #19]
										break;
 80015ba:	e000      	b.n	80015be <seclectmenu+0x726>
									}
								}
 80015bc:	bf00      	nop
							while (back11 == 1)
 80015be:	7cfb      	ldrb	r3, [r7, #19]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f43f adce 	beq.w	8001162 <seclectmenu+0x2ca>
							}
							CLCD_Clear(&LCD1);
 80015c6:	487a      	ldr	r0, [pc, #488]	; (80017b0 <seclectmenu+0x918>)
 80015c8:	f7ff f8fa 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	4877      	ldr	r0, [pc, #476]	; (80017b0 <seclectmenu+0x918>)
 80015d2:	f7ff f877 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 80015d6:	497c      	ldr	r1, [pc, #496]	; (80017c8 <seclectmenu+0x930>)
 80015d8:	4875      	ldr	r0, [pc, #468]	; (80017b0 <seclectmenu+0x918>)
 80015da:	f7ff f8da 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	2100      	movs	r1, #0
 80015e2:	4873      	ldr	r0, [pc, #460]	; (80017b0 <seclectmenu+0x918>)
 80015e4:	f7ff f86e 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 80015e8:	4978      	ldr	r1, [pc, #480]	; (80017cc <seclectmenu+0x934>)
 80015ea:	4871      	ldr	r0, [pc, #452]	; (80017b0 <seclectmenu+0x918>)
 80015ec:	f7ff f8d1 	bl	8000792 <CLCD_WriteString>
							break;
 80015f0:	e23c      	b.n	8001a6c <seclectmenu+0xbd4>
						case 2:
							CLCD_Clear(&LCD1);
 80015f2:	486f      	ldr	r0, [pc, #444]	; (80017b0 <seclectmenu+0x918>)
 80015f4:	f7ff f8e4 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	486c      	ldr	r0, [pc, #432]	; (80017b0 <seclectmenu+0x918>)
 80015fe:	f7ff f861 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001602:	4973      	ldr	r1, [pc, #460]	; (80017d0 <seclectmenu+0x938>)
 8001604:	486a      	ldr	r0, [pc, #424]	; (80017b0 <seclectmenu+0x918>)
 8001606:	f7ff f8c4 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	2100      	movs	r1, #0
 800160e:	4868      	ldr	r0, [pc, #416]	; (80017b0 <seclectmenu+0x918>)
 8001610:	f7ff f858 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    THE 2 ");
 8001614:	496f      	ldr	r1, [pc, #444]	; (80017d4 <seclectmenu+0x93c>)
 8001616:	4866      	ldr	r0, [pc, #408]	; (80017b0 <seclectmenu+0x918>)
 8001618:	f7ff f8bb 	bl	8000792 <CLCD_WriteString>
							uint8_t statusadd2 = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8001624:	e204      	b.n	8001a30 <seclectmenu+0xb98>
							{
								if (exitmenu == 0)
 8001626:	4b6c      	ldr	r3, [pc, #432]	; (80017d8 <seclectmenu+0x940>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <seclectmenu+0x7a8>
								{
									CLCD_Clear(&LCD1);
 800162e:	4860      	ldr	r0, [pc, #384]	; (80017b0 <seclectmenu+0x918>)
 8001630:	f7ff f8c6 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001638:	f002 fb9a 	bl	8003d70 <HAL_Delay>
									return;
 800163c:	f001 bb1e 	b.w	8002c7c <seclectmenu+0x1de4>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001644:	4865      	ldr	r0, [pc, #404]	; (80017dc <seclectmenu+0x944>)
 8001646:	f7ff fbd9 	bl	8000dfc <checkbuton>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 808b 	beq.w	8001768 <seclectmenu+0x8d0>
								{
									exitmenu = 15;
 8001652:	4b61      	ldr	r3, [pc, #388]	; (80017d8 <seclectmenu+0x940>)
 8001654:	220f      	movs	r2, #15
 8001656:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 8001658:	7cbb      	ldrb	r3, [r7, #18]
 800165a:	3301      	adds	r3, #1
 800165c:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 800165e:	7cbb      	ldrb	r3, [r7, #18]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d801      	bhi.n	8001668 <seclectmenu+0x7d0>
 8001664:	7cbb      	ldrb	r3, [r7, #18]
 8001666:	e000      	b.n	800166a <seclectmenu+0x7d2>
 8001668:	2300      	movs	r3, #0
 800166a:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 800166c:	7cbb      	ldrb	r3, [r7, #18]
 800166e:	3b01      	subs	r3, #1
 8001670:	2b03      	cmp	r3, #3
 8001672:	d863      	bhi.n	800173c <seclectmenu+0x8a4>
 8001674:	a201      	add	r2, pc, #4	; (adr r2, 800167c <seclectmenu+0x7e4>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	0800168d 	.word	0x0800168d
 8001680:	080016b9 	.word	0x080016b9
 8001684:	080016e5 	.word	0x080016e5
 8001688:	08001711 	.word	0x08001711
									{
									case 1:
										CLCD_Clear(&LCD1);
 800168c:	4848      	ldr	r0, [pc, #288]	; (80017b0 <seclectmenu+0x918>)
 800168e:	f7ff f897 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	4846      	ldr	r0, [pc, #280]	; (80017b0 <seclectmenu+0x918>)
 8001698:	f7ff f814 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800169c:	494c      	ldr	r1, [pc, #304]	; (80017d0 <seclectmenu+0x938>)
 800169e:	4844      	ldr	r0, [pc, #272]	; (80017b0 <seclectmenu+0x918>)
 80016a0:	f7ff f877 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2100      	movs	r1, #0
 80016a8:	4841      	ldr	r0, [pc, #260]	; (80017b0 <seclectmenu+0x918>)
 80016aa:	f7ff f80b 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 2 ");
 80016ae:	4949      	ldr	r1, [pc, #292]	; (80017d4 <seclectmenu+0x93c>)
 80016b0:	483f      	ldr	r0, [pc, #252]	; (80017b0 <seclectmenu+0x918>)
 80016b2:	f7ff f86e 	bl	8000792 <CLCD_WriteString>
										break;
 80016b6:	e058      	b.n	800176a <seclectmenu+0x8d2>
									case 2:
										CLCD_Clear(&LCD1);
 80016b8:	483d      	ldr	r0, [pc, #244]	; (80017b0 <seclectmenu+0x918>)
 80016ba:	f7ff f881 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	483b      	ldr	r0, [pc, #236]	; (80017b0 <seclectmenu+0x918>)
 80016c4:	f7fe fffe 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80016c8:	4945      	ldr	r1, [pc, #276]	; (80017e0 <seclectmenu+0x948>)
 80016ca:	4839      	ldr	r0, [pc, #228]	; (80017b0 <seclectmenu+0x918>)
 80016cc:	f7ff f861 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2100      	movs	r1, #0
 80016d4:	4836      	ldr	r0, [pc, #216]	; (80017b0 <seclectmenu+0x918>)
 80016d6:	f7fe fff5 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 3 ");
 80016da:	4942      	ldr	r1, [pc, #264]	; (80017e4 <seclectmenu+0x94c>)
 80016dc:	4834      	ldr	r0, [pc, #208]	; (80017b0 <seclectmenu+0x918>)
 80016de:	f7ff f858 	bl	8000792 <CLCD_WriteString>
										break;
 80016e2:	e042      	b.n	800176a <seclectmenu+0x8d2>
									case 3:
										CLCD_Clear(&LCD1);
 80016e4:	4832      	ldr	r0, [pc, #200]	; (80017b0 <seclectmenu+0x918>)
 80016e6:	f7ff f86b 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	4830      	ldr	r0, [pc, #192]	; (80017b0 <seclectmenu+0x918>)
 80016f0:	f7fe ffe8 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80016f4:	492f      	ldr	r1, [pc, #188]	; (80017b4 <seclectmenu+0x91c>)
 80016f6:	482e      	ldr	r0, [pc, #184]	; (80017b0 <seclectmenu+0x918>)
 80016f8:	f7ff f84b 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2100      	movs	r1, #0
 8001700:	482b      	ldr	r0, [pc, #172]	; (80017b0 <seclectmenu+0x918>)
 8001702:	f7fe ffdf 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 8001706:	492c      	ldr	r1, [pc, #176]	; (80017b8 <seclectmenu+0x920>)
 8001708:	4829      	ldr	r0, [pc, #164]	; (80017b0 <seclectmenu+0x918>)
 800170a:	f7ff f842 	bl	8000792 <CLCD_WriteString>
										break;
 800170e:	e02c      	b.n	800176a <seclectmenu+0x8d2>
									case 4:
										CLCD_Clear(&LCD1);
 8001710:	4827      	ldr	r0, [pc, #156]	; (80017b0 <seclectmenu+0x918>)
 8001712:	f7ff f855 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	4825      	ldr	r0, [pc, #148]	; (80017b0 <seclectmenu+0x918>)
 800171c:	f7fe ffd2 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001720:	4927      	ldr	r1, [pc, #156]	; (80017c0 <seclectmenu+0x928>)
 8001722:	4823      	ldr	r0, [pc, #140]	; (80017b0 <seclectmenu+0x918>)
 8001724:	f7ff f835 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	2100      	movs	r1, #0
 800172c:	4820      	ldr	r0, [pc, #128]	; (80017b0 <seclectmenu+0x918>)
 800172e:	f7fe ffc9 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 8001732:	4924      	ldr	r1, [pc, #144]	; (80017c4 <seclectmenu+0x92c>)
 8001734:	481e      	ldr	r0, [pc, #120]	; (80017b0 <seclectmenu+0x918>)
 8001736:	f7ff f82c 	bl	8000792 <CLCD_WriteString>
										break;
 800173a:	e016      	b.n	800176a <seclectmenu+0x8d2>
									default:
										CLCD_Clear(&LCD1);
 800173c:	481c      	ldr	r0, [pc, #112]	; (80017b0 <seclectmenu+0x918>)
 800173e:	f7ff f83f 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	481a      	ldr	r0, [pc, #104]	; (80017b0 <seclectmenu+0x918>)
 8001748:	f7fe ffbc 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 800174c:	491a      	ldr	r1, [pc, #104]	; (80017b8 <seclectmenu+0x920>)
 800174e:	4818      	ldr	r0, [pc, #96]	; (80017b0 <seclectmenu+0x918>)
 8001750:	f7ff f81f 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	2100      	movs	r1, #0
 8001758:	4815      	ldr	r0, [pc, #84]	; (80017b0 <seclectmenu+0x918>)
 800175a:	f7fe ffb3 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800175e:	4922      	ldr	r1, [pc, #136]	; (80017e8 <seclectmenu+0x950>)
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <seclectmenu+0x918>)
 8001762:	f7ff f816 	bl	8000792 <CLCD_WriteString>
										break;
 8001766:	e000      	b.n	800176a <seclectmenu+0x8d2>
									}
								}
 8001768:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	481f      	ldr	r0, [pc, #124]	; (80017ec <seclectmenu+0x954>)
 8001770:	f7ff fb44 	bl	8000dfc <checkbuton>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8159 	beq.w	8001a2e <seclectmenu+0xb96>
								{
									exitmenu = 15;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <seclectmenu+0x940>)
 800177e:	220f      	movs	r2, #15
 8001780:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001782:	7dbb      	ldrb	r3, [r7, #22]
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	b2da      	uxtb	r2, r3
 8001788:	7cbb      	ldrb	r3, [r7, #18]
 800178a:	4413      	add	r3, r2
 800178c:	70fb      	strb	r3, [r7, #3]
									switch (statusadd2)
 800178e:	7cbb      	ldrb	r3, [r7, #18]
 8001790:	3b01      	subs	r3, #1
 8001792:	2b03      	cmp	r3, #3
 8001794:	f200 8148 	bhi.w	8001a28 <seclectmenu+0xb90>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <seclectmenu+0x908>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017f1 	.word	0x080017f1
 80017a4:	0800187f 	.word	0x0800187f
 80017a8:	0800190d 	.word	0x0800190d
 80017ac:	0800199b 	.word	0x0800199b
 80017b0:	2000015c 	.word	0x2000015c
 80017b4:	080067a0 	.word	0x080067a0
 80017b8:	080067ac 	.word	0x080067ac
 80017bc:	0800680c 	.word	0x0800680c
 80017c0:	080067b8 	.word	0x080067b8
 80017c4:	080067c4 	.word	0x080067c4
 80017c8:	08006734 	.word	0x08006734
 80017cc:	08006748 	.word	0x08006748
 80017d0:	08006770 	.word	0x08006770
 80017d4:	0800677c 	.word	0x0800677c
 80017d8:	20000000 	.word	0x20000000
 80017dc:	40010c00 	.word	0x40010c00
 80017e0:	08006788 	.word	0x08006788
 80017e4:	08006794 	.word	0x08006794
 80017e8:	080067d0 	.word	0x080067d0
 80017ec:	40010800 	.word	0x40010800
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fcb4 	bl	8003160 <CheckKey>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d025      	beq.n	800184a <seclectmenu+0x9b2>
										{
											CLCD_Clear(&LCD1);
 80017fe:	48bd      	ldr	r0, [pc, #756]	; (8001af4 <seclectmenu+0xc5c>)
 8001800:	f7fe ffde 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	48ba      	ldr	r0, [pc, #744]	; (8001af4 <seclectmenu+0xc5c>)
 800180a:	f7fe ff5b 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 1 ");
 800180e:	49ba      	ldr	r1, [pc, #744]	; (8001af8 <seclectmenu+0xc60>)
 8001810:	48b8      	ldr	r0, [pc, #736]	; (8001af4 <seclectmenu+0xc5c>)
 8001812:	f7fe ffbe 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 8001816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181a:	f002 faa9 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800181e:	48b5      	ldr	r0, [pc, #724]	; (8001af4 <seclectmenu+0xc5c>)
 8001820:	f7fe ffce 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	48b2      	ldr	r0, [pc, #712]	; (8001af4 <seclectmenu+0xc5c>)
 800182a:	f7fe ff4b 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800182e:	49b3      	ldr	r1, [pc, #716]	; (8001afc <seclectmenu+0xc64>)
 8001830:	48b0      	ldr	r0, [pc, #704]	; (8001af4 <seclectmenu+0xc5c>)
 8001832:	f7fe ffae 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	2100      	movs	r1, #0
 800183a:	48ae      	ldr	r0, [pc, #696]	; (8001af4 <seclectmenu+0xc5c>)
 800183c:	f7fe ff42 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 8001840:	49af      	ldr	r1, [pc, #700]	; (8001b00 <seclectmenu+0xc68>)
 8001842:	48ac      	ldr	r0, [pc, #688]	; (8001af4 <seclectmenu+0xc5c>)
 8001844:	f7fe ffa5 	bl	8000792 <CLCD_WriteString>
 8001848:	e0f2      	b.n	8001a30 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fac3 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 8001852:	48a8      	ldr	r0, [pc, #672]	; (8001af4 <seclectmenu+0xc5c>)
 8001854:	f7fe ffb4 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	48a5      	ldr	r0, [pc, #660]	; (8001af4 <seclectmenu+0xc5c>)
 800185e:	f7fe ff31 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001862:	49a6      	ldr	r1, [pc, #664]	; (8001afc <seclectmenu+0xc64>)
 8001864:	48a3      	ldr	r0, [pc, #652]	; (8001af4 <seclectmenu+0xc5c>)
 8001866:	f7fe ff94 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800186a:	2201      	movs	r2, #1
 800186c:	2100      	movs	r1, #0
 800186e:	48a1      	ldr	r0, [pc, #644]	; (8001af4 <seclectmenu+0xc5c>)
 8001870:	f7fe ff28 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 8001874:	49a2      	ldr	r1, [pc, #648]	; (8001b00 <seclectmenu+0xc68>)
 8001876:	489f      	ldr	r0, [pc, #636]	; (8001af4 <seclectmenu+0xc5c>)
 8001878:	f7fe ff8b 	bl	8000792 <CLCD_WriteString>
										}
										break;
 800187c:	e0d8      	b.n	8001a30 <seclectmenu+0xb98>
									case 2:
										if (CheckKey(keyadd2) != 0)
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fc6d 	bl	8003160 <CheckKey>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d025      	beq.n	80018d8 <seclectmenu+0xa40>
										{
											CLCD_Clear(&LCD1);
 800188c:	4899      	ldr	r0, [pc, #612]	; (8001af4 <seclectmenu+0xc5c>)
 800188e:	f7fe ff97 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	4897      	ldr	r0, [pc, #604]	; (8001af4 <seclectmenu+0xc5c>)
 8001898:	f7fe ff14 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 2 ");
 800189c:	4999      	ldr	r1, [pc, #612]	; (8001b04 <seclectmenu+0xc6c>)
 800189e:	4895      	ldr	r0, [pc, #596]	; (8001af4 <seclectmenu+0xc5c>)
 80018a0:	f7fe ff77 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 80018a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a8:	f002 fa62 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80018ac:	4891      	ldr	r0, [pc, #580]	; (8001af4 <seclectmenu+0xc5c>)
 80018ae:	f7fe ff87 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	488f      	ldr	r0, [pc, #572]	; (8001af4 <seclectmenu+0xc5c>)
 80018b8:	f7fe ff04 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80018bc:	4992      	ldr	r1, [pc, #584]	; (8001b08 <seclectmenu+0xc70>)
 80018be:	488d      	ldr	r0, [pc, #564]	; (8001af4 <seclectmenu+0xc5c>)
 80018c0:	f7fe ff67 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80018c4:	2201      	movs	r2, #1
 80018c6:	2100      	movs	r1, #0
 80018c8:	488a      	ldr	r0, [pc, #552]	; (8001af4 <seclectmenu+0xc5c>)
 80018ca:	f7fe fefb 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 80018ce:	498f      	ldr	r1, [pc, #572]	; (8001b0c <seclectmenu+0xc74>)
 80018d0:	4888      	ldr	r0, [pc, #544]	; (8001af4 <seclectmenu+0xc5c>)
 80018d2:	f7fe ff5e 	bl	8000792 <CLCD_WriteString>
 80018d6:	e0ab      	b.n	8001a30 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 fa7c 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 80018e0:	4884      	ldr	r0, [pc, #528]	; (8001af4 <seclectmenu+0xc5c>)
 80018e2:	f7fe ff6d 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	4882      	ldr	r0, [pc, #520]	; (8001af4 <seclectmenu+0xc5c>)
 80018ec:	f7fe feea 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80018f0:	4985      	ldr	r1, [pc, #532]	; (8001b08 <seclectmenu+0xc70>)
 80018f2:	4880      	ldr	r0, [pc, #512]	; (8001af4 <seclectmenu+0xc5c>)
 80018f4:	f7fe ff4d 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2100      	movs	r1, #0
 80018fc:	487d      	ldr	r0, [pc, #500]	; (8001af4 <seclectmenu+0xc5c>)
 80018fe:	f7fe fee1 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 8001902:	4982      	ldr	r1, [pc, #520]	; (8001b0c <seclectmenu+0xc74>)
 8001904:	487b      	ldr	r0, [pc, #492]	; (8001af4 <seclectmenu+0xc5c>)
 8001906:	f7fe ff44 	bl	8000792 <CLCD_WriteString>
										}
										break;
 800190a:	e091      	b.n	8001a30 <seclectmenu+0xb98>
									case 3:
										if (CheckKey(keyadd2) != 0)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fc26 	bl	8003160 <CheckKey>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d025      	beq.n	8001966 <seclectmenu+0xace>
										{
											CLCD_Clear(&LCD1);
 800191a:	4876      	ldr	r0, [pc, #472]	; (8001af4 <seclectmenu+0xc5c>)
 800191c:	f7fe ff50 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	4873      	ldr	r0, [pc, #460]	; (8001af4 <seclectmenu+0xc5c>)
 8001926:	f7fe fecd 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 3 ");
 800192a:	4979      	ldr	r1, [pc, #484]	; (8001b10 <seclectmenu+0xc78>)
 800192c:	4871      	ldr	r0, [pc, #452]	; (8001af4 <seclectmenu+0xc5c>)
 800192e:	f7fe ff30 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 8001932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001936:	f002 fa1b 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800193a:	486e      	ldr	r0, [pc, #440]	; (8001af4 <seclectmenu+0xc5c>)
 800193c:	f7fe ff40 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	486b      	ldr	r0, [pc, #428]	; (8001af4 <seclectmenu+0xc5c>)
 8001946:	f7fe febd 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800194a:	4972      	ldr	r1, [pc, #456]	; (8001b14 <seclectmenu+0xc7c>)
 800194c:	4869      	ldr	r0, [pc, #420]	; (8001af4 <seclectmenu+0xc5c>)
 800194e:	f7fe ff20 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001952:	2201      	movs	r2, #1
 8001954:	2100      	movs	r1, #0
 8001956:	4867      	ldr	r0, [pc, #412]	; (8001af4 <seclectmenu+0xc5c>)
 8001958:	f7fe feb4 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 800195c:	496e      	ldr	r1, [pc, #440]	; (8001b18 <seclectmenu+0xc80>)
 800195e:	4865      	ldr	r0, [pc, #404]	; (8001af4 <seclectmenu+0xc5c>)
 8001960:	f7fe ff17 	bl	8000792 <CLCD_WriteString>
 8001964:	e064      	b.n	8001a30 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fa35 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 800196e:	4861      	ldr	r0, [pc, #388]	; (8001af4 <seclectmenu+0xc5c>)
 8001970:	f7fe ff26 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	485e      	ldr	r0, [pc, #376]	; (8001af4 <seclectmenu+0xc5c>)
 800197a:	f7fe fea3 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800197e:	4965      	ldr	r1, [pc, #404]	; (8001b14 <seclectmenu+0xc7c>)
 8001980:	485c      	ldr	r0, [pc, #368]	; (8001af4 <seclectmenu+0xc5c>)
 8001982:	f7fe ff06 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	2100      	movs	r1, #0
 800198a:	485a      	ldr	r0, [pc, #360]	; (8001af4 <seclectmenu+0xc5c>)
 800198c:	f7fe fe9a 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 8001990:	4961      	ldr	r1, [pc, #388]	; (8001b18 <seclectmenu+0xc80>)
 8001992:	4858      	ldr	r0, [pc, #352]	; (8001af4 <seclectmenu+0xc5c>)
 8001994:	f7fe fefd 	bl	8000792 <CLCD_WriteString>
										}
										break;
 8001998:	e04a      	b.n	8001a30 <seclectmenu+0xb98>
									case 4:
										if (CheckKey(keyadd2) != 0)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fbdf 	bl	8003160 <CheckKey>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d025      	beq.n	80019f4 <seclectmenu+0xb5c>
										{
											CLCD_Clear(&LCD1);
 80019a8:	4852      	ldr	r0, [pc, #328]	; (8001af4 <seclectmenu+0xc5c>)
 80019aa:	f7fe ff09 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	4850      	ldr	r0, [pc, #320]	; (8001af4 <seclectmenu+0xc5c>)
 80019b4:	f7fe fe86 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 4 ");
 80019b8:	4958      	ldr	r1, [pc, #352]	; (8001b1c <seclectmenu+0xc84>)
 80019ba:	484e      	ldr	r0, [pc, #312]	; (8001af4 <seclectmenu+0xc5c>)
 80019bc:	f7fe fee9 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 80019c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c4:	f002 f9d4 	bl	8003d70 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80019c8:	484a      	ldr	r0, [pc, #296]	; (8001af4 <seclectmenu+0xc5c>)
 80019ca:	f7fe fef9 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	4848      	ldr	r0, [pc, #288]	; (8001af4 <seclectmenu+0xc5c>)
 80019d4:	f7fe fe76 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80019d8:	4951      	ldr	r1, [pc, #324]	; (8001b20 <seclectmenu+0xc88>)
 80019da:	4846      	ldr	r0, [pc, #280]	; (8001af4 <seclectmenu+0xc5c>)
 80019dc:	f7fe fed9 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2100      	movs	r1, #0
 80019e4:	4843      	ldr	r0, [pc, #268]	; (8001af4 <seclectmenu+0xc5c>)
 80019e6:	f7fe fe6d 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80019ea:	494e      	ldr	r1, [pc, #312]	; (8001b24 <seclectmenu+0xc8c>)
 80019ec:	4841      	ldr	r0, [pc, #260]	; (8001af4 <seclectmenu+0xc5c>)
 80019ee:	f7fe fed0 	bl	8000792 <CLCD_WriteString>
 80019f2:	e01d      	b.n	8001a30 <seclectmenu+0xb98>
										}
										else
										{
											adduid(keyadd2);
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f9ee 	bl	8002dd8 <adduid>
											CLCD_Clear(&LCD1);
 80019fc:	483d      	ldr	r0, [pc, #244]	; (8001af4 <seclectmenu+0xc5c>)
 80019fe:	f7fe fedf 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	483b      	ldr	r0, [pc, #236]	; (8001af4 <seclectmenu+0xc5c>)
 8001a08:	f7fe fe5c 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001a0c:	4944      	ldr	r1, [pc, #272]	; (8001b20 <seclectmenu+0xc88>)
 8001a0e:	4839      	ldr	r0, [pc, #228]	; (8001af4 <seclectmenu+0xc5c>)
 8001a10:	f7fe febf 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2100      	movs	r1, #0
 8001a18:	4836      	ldr	r0, [pc, #216]	; (8001af4 <seclectmenu+0xc5c>)
 8001a1a:	f7fe fe53 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 8001a1e:	4941      	ldr	r1, [pc, #260]	; (8001b24 <seclectmenu+0xc8c>)
 8001a20:	4834      	ldr	r0, [pc, #208]	; (8001af4 <seclectmenu+0xc5c>)
 8001a22:	f7fe feb6 	bl	8000792 <CLCD_WriteString>
										}
										break;
 8001a26:	e003      	b.n	8001a30 <seclectmenu+0xb98>
									default:
										back12 = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	747b      	strb	r3, [r7, #17]
										break;
 8001a2c:	e000      	b.n	8001a30 <seclectmenu+0xb98>
									}
								}
 8001a2e:	bf00      	nop
							while (back12 == 1)
 8001a30:	7c7b      	ldrb	r3, [r7, #17]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	f43f adf7 	beq.w	8001626 <seclectmenu+0x78e>
							}
							CLCD_Clear(&LCD1);
 8001a38:	482e      	ldr	r0, [pc, #184]	; (8001af4 <seclectmenu+0xc5c>)
 8001a3a:	f7fe fec1 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	482c      	ldr	r0, [pc, #176]	; (8001af4 <seclectmenu+0xc5c>)
 8001a44:	f7fe fe3e 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8001a48:	4937      	ldr	r1, [pc, #220]	; (8001b28 <seclectmenu+0xc90>)
 8001a4a:	482a      	ldr	r0, [pc, #168]	; (8001af4 <seclectmenu+0xc5c>)
 8001a4c:	f7fe fea1 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2100      	movs	r1, #0
 8001a54:	4827      	ldr	r0, [pc, #156]	; (8001af4 <seclectmenu+0xc5c>)
 8001a56:	f7fe fe35 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8001a5a:	4934      	ldr	r1, [pc, #208]	; (8001b2c <seclectmenu+0xc94>)
 8001a5c:	4825      	ldr	r0, [pc, #148]	; (8001af4 <seclectmenu+0xc5c>)
 8001a5e:	f7fe fe98 	bl	8000792 <CLCD_WriteString>
							break;
 8001a62:	e003      	b.n	8001a6c <seclectmenu+0xbd4>
						default:
							back = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	757b      	strb	r3, [r7, #21]
							break;
 8001a68:	e000      	b.n	8001a6c <seclectmenu+0xbd4>
						}
					}
 8001a6a:	bf00      	nop
				while (back == 1)
 8001a6c:	7d7b      	ldrb	r3, [r7, #21]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f43f aade 	beq.w	8001030 <seclectmenu+0x198>
				}
				CLCD_Clear(&LCD1);
 8001a74:	481f      	ldr	r0, [pc, #124]	; (8001af4 <seclectmenu+0xc5c>)
 8001a76:	f7fe fea3 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	481d      	ldr	r0, [pc, #116]	; (8001af4 <seclectmenu+0xc5c>)
 8001a80:	f7fe fe20 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THEM THE");
 8001a84:	492a      	ldr	r1, [pc, #168]	; (8001b30 <seclectmenu+0xc98>)
 8001a86:	481b      	ldr	r0, [pc, #108]	; (8001af4 <seclectmenu+0xc5c>)
 8001a88:	f7fe fe83 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4818      	ldr	r0, [pc, #96]	; (8001af4 <seclectmenu+0xc5c>)
 8001a92:	f7fe fe17 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8001a96:	4927      	ldr	r1, [pc, #156]	; (8001b34 <seclectmenu+0xc9c>)
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <seclectmenu+0xc5c>)
 8001a9a:	f7fe fe7a 	bl	8000792 <CLCD_WriteString>
				break;
 8001a9e:	f001 b8e1 	b.w	8002c64 <seclectmenu+0x1dcc>
			case 1:
				CLCD_Clear(&LCD1);
 8001aa2:	4814      	ldr	r0, [pc, #80]	; (8001af4 <seclectmenu+0xc5c>)
 8001aa4:	f7fe fe8c 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4811      	ldr	r0, [pc, #68]	; (8001af4 <seclectmenu+0xc5c>)
 8001aae:	f7fe fe09 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "     SELECT ");
 8001ab2:	4921      	ldr	r1, [pc, #132]	; (8001b38 <seclectmenu+0xca0>)
 8001ab4:	480f      	ldr	r0, [pc, #60]	; (8001af4 <seclectmenu+0xc5c>)
 8001ab6:	f7fe fe6c 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8001aba:	2201      	movs	r2, #1
 8001abc:	2100      	movs	r1, #0
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <seclectmenu+0xc5c>)
 8001ac0:	f7fe fe00 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   XOA 1 THE");
 8001ac4:	491d      	ldr	r1, [pc, #116]	; (8001b3c <seclectmenu+0xca4>)
 8001ac6:	480b      	ldr	r0, [pc, #44]	; (8001af4 <seclectmenu+0xc5c>)
 8001ac8:	f7fe fe63 	bl	8000792 <CLCD_WriteString>
				uint8_t statusremove = -1;
 8001acc:	23ff      	movs	r3, #255	; 0xff
 8001ace:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001ad4:	f001 b88f 	b.w	8002bf6 <seclectmenu+0x1d5e>
				{
					if (exitmenu == 0)
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <seclectmenu+0xca8>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d131      	bne.n	8001b44 <seclectmenu+0xcac>
					{
						CLCD_Clear(&LCD1);
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <seclectmenu+0xc5c>)
 8001ae2:	f7fe fe6d 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 8001ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aea:	f002 f941 	bl	8003d70 <HAL_Delay>
						return;
 8001aee:	f001 b8c5 	b.w	8002c7c <seclectmenu+0x1de4>
 8001af2:	bf00      	nop
 8001af4:	2000015c 	.word	0x2000015c
 8001af8:	080067dc 	.word	0x080067dc
 8001afc:	08006770 	.word	0x08006770
 8001b00:	0800677c 	.word	0x0800677c
 8001b04:	080067ec 	.word	0x080067ec
 8001b08:	08006788 	.word	0x08006788
 8001b0c:	08006794 	.word	0x08006794
 8001b10:	080067fc 	.word	0x080067fc
 8001b14:	080067a0 	.word	0x080067a0
 8001b18:	080067ac 	.word	0x080067ac
 8001b1c:	0800680c 	.word	0x0800680c
 8001b20:	080067b8 	.word	0x080067b8
 8001b24:	080067c4 	.word	0x080067c4
 8001b28:	08006720 	.word	0x08006720
 8001b2c:	08006758 	.word	0x08006758
 8001b30:	080066c8 	.word	0x080066c8
 8001b34:	080066d8 	.word	0x080066d8
 8001b38:	0800681c 	.word	0x0800681c
 8001b3c:	0800682c 	.word	0x0800682c
 8001b40:	20000000 	.word	0x20000000
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b48:	48af      	ldr	r0, [pc, #700]	; (8001e08 <seclectmenu+0xf70>)
 8001b4a:	f7ff f957 	bl	8000dfc <checkbuton>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d054      	beq.n	8001bfe <seclectmenu+0xd66>
					{
						exitmenu = 15;
 8001b54:	4bad      	ldr	r3, [pc, #692]	; (8001e0c <seclectmenu+0xf74>)
 8001b56:	220f      	movs	r2, #15
 8001b58:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001b5a:	7c3b      	ldrb	r3, [r7, #16]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001b60:	7c3b      	ldrb	r3, [r7, #16]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d801      	bhi.n	8001b6a <seclectmenu+0xcd2>
 8001b66:	7c3b      	ldrb	r3, [r7, #16]
 8001b68:	e000      	b.n	8001b6c <seclectmenu+0xcd4>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001b6e:	7c3b      	ldrb	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <seclectmenu+0xce2>
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d016      	beq.n	8001ba6 <seclectmenu+0xd0e>
 8001b78:	e02b      	b.n	8001bd2 <seclectmenu+0xd3a>
						{
						case 0:
							CLCD_Clear(&LCD1);
 8001b7a:	48a5      	ldr	r0, [pc, #660]	; (8001e10 <seclectmenu+0xf78>)
 8001b7c:	f7fe fe20 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	48a2      	ldr	r0, [pc, #648]	; (8001e10 <seclectmenu+0xf78>)
 8001b86:	f7fe fd9d 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA 1 THE");
 8001b8a:	49a2      	ldr	r1, [pc, #648]	; (8001e14 <seclectmenu+0xf7c>)
 8001b8c:	48a0      	ldr	r0, [pc, #640]	; (8001e10 <seclectmenu+0xf78>)
 8001b8e:	f7fe fe00 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2100      	movs	r1, #0
 8001b96:	489e      	ldr	r0, [pc, #632]	; (8001e10 <seclectmenu+0xf78>)
 8001b98:	f7fe fd94 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8001b9c:	499e      	ldr	r1, [pc, #632]	; (8001e18 <seclectmenu+0xf80>)
 8001b9e:	489c      	ldr	r0, [pc, #624]	; (8001e10 <seclectmenu+0xf78>)
 8001ba0:	f7fe fdf7 	bl	8000792 <CLCD_WriteString>
							break;
 8001ba4:	e02c      	b.n	8001c00 <seclectmenu+0xd68>
						case 1:
							CLCD_Clear(&LCD1);
 8001ba6:	489a      	ldr	r0, [pc, #616]	; (8001e10 <seclectmenu+0xf78>)
 8001ba8:	f7fe fe0a 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4897      	ldr	r0, [pc, #604]	; (8001e10 <seclectmenu+0xf78>)
 8001bb2:	f7fe fd87 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA 1 THE");
 8001bb6:	4999      	ldr	r1, [pc, #612]	; (8001e1c <seclectmenu+0xf84>)
 8001bb8:	4895      	ldr	r0, [pc, #596]	; (8001e10 <seclectmenu+0xf78>)
 8001bba:	f7fe fdea 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4893      	ldr	r0, [pc, #588]	; (8001e10 <seclectmenu+0xf78>)
 8001bc4:	f7fe fd7e 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA TAT CA");
 8001bc8:	4995      	ldr	r1, [pc, #596]	; (8001e20 <seclectmenu+0xf88>)
 8001bca:	4891      	ldr	r0, [pc, #580]	; (8001e10 <seclectmenu+0xf78>)
 8001bcc:	f7fe fde1 	bl	8000792 <CLCD_WriteString>
							break;
 8001bd0:	e016      	b.n	8001c00 <seclectmenu+0xd68>
						default:
							CLCD_Clear(&LCD1);
 8001bd2:	488f      	ldr	r0, [pc, #572]	; (8001e10 <seclectmenu+0xf78>)
 8001bd4:	f7fe fdf4 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	488c      	ldr	r0, [pc, #560]	; (8001e10 <seclectmenu+0xf78>)
 8001bde:	f7fe fd71 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8001be2:	498d      	ldr	r1, [pc, #564]	; (8001e18 <seclectmenu+0xf80>)
 8001be4:	488a      	ldr	r0, [pc, #552]	; (8001e10 <seclectmenu+0xf78>)
 8001be6:	f7fe fdd4 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2100      	movs	r1, #0
 8001bee:	4888      	ldr	r0, [pc, #544]	; (8001e10 <seclectmenu+0xf78>)
 8001bf0:	f7fe fd68 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 8001bf4:	498b      	ldr	r1, [pc, #556]	; (8001e24 <seclectmenu+0xf8c>)
 8001bf6:	4886      	ldr	r0, [pc, #536]	; (8001e10 <seclectmenu+0xf78>)
 8001bf8:	f7fe fdcb 	bl	8000792 <CLCD_WriteString>
							break;
 8001bfc:	e000      	b.n	8001c00 <seclectmenu+0xd68>
						}
					}
 8001bfe:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001c00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c04:	4888      	ldr	r0, [pc, #544]	; (8001e28 <seclectmenu+0xf90>)
 8001c06:	f7ff f8f9 	bl	8000dfc <checkbuton>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 87f1 	beq.w	8002bf4 <seclectmenu+0x1d5c>
					{
						exitmenu = 15;
 8001c12:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <seclectmenu+0xf74>)
 8001c14:	220f      	movs	r2, #15
 8001c16:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001c18:	7c3b      	ldrb	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <seclectmenu+0xd90>
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f000 87dd 	beq.w	8002bde <seclectmenu+0x1d46>
 8001c24:	f000 bfe3 	b.w	8002bee <seclectmenu+0x1d56>
						{
						case 0:
							CLCD_Clear(&LCD1);
 8001c28:	4879      	ldr	r0, [pc, #484]	; (8001e10 <seclectmenu+0xf78>)
 8001c2a:	f7fe fdc9 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	4877      	ldr	r0, [pc, #476]	; (8001e10 <seclectmenu+0xf78>)
 8001c34:	f7fe fd46 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> CHON THE");
 8001c38:	497c      	ldr	r1, [pc, #496]	; (8001e2c <seclectmenu+0xf94>)
 8001c3a:	4875      	ldr	r0, [pc, #468]	; (8001e10 <seclectmenu+0xf78>)
 8001c3c:	f7fe fda9 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2100      	movs	r1, #0
 8001c44:	4872      	ldr	r0, [pc, #456]	; (8001e10 <seclectmenu+0xf78>)
 8001c46:	f7fe fd3d 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   QUET THE");
 8001c4a:	4979      	ldr	r1, [pc, #484]	; (8001e30 <seclectmenu+0xf98>)
 8001c4c:	4870      	ldr	r0, [pc, #448]	; (8001e10 <seclectmenu+0xf78>)
 8001c4e:	f7fe fda0 	bl	8000792 <CLCD_WriteString>
							uint8_t statusrm1 = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001c5a:	f000 bfa6 	b.w	8002baa <seclectmenu+0x1d12>
							{
								if (exitmenu == 0)
 8001c5e:	4b6b      	ldr	r3, [pc, #428]	; (8001e0c <seclectmenu+0xf74>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <seclectmenu+0xde0>
								{
									CLCD_Clear(&LCD1);
 8001c66:	486a      	ldr	r0, [pc, #424]	; (8001e10 <seclectmenu+0xf78>)
 8001c68:	f7fe fdaa 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c70:	f002 f87e 	bl	8003d70 <HAL_Delay>
									return;
 8001c74:	f001 b802 	b.w	8002c7c <seclectmenu+0x1de4>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c7c:	4862      	ldr	r0, [pc, #392]	; (8001e08 <seclectmenu+0xf70>)
 8001c7e:	f7ff f8bd 	bl	8000dfc <checkbuton>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d051      	beq.n	8001d2c <seclectmenu+0xe94>
								{
									statusrm1++;
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d801      	bhi.n	8001c98 <seclectmenu+0xe00>
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	e000      	b.n	8001c9a <seclectmenu+0xe02>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001c9c:	7bbb      	ldrb	r3, [r7, #14]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <seclectmenu+0xe10>
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d016      	beq.n	8001cd4 <seclectmenu+0xe3c>
 8001ca6:	e02b      	b.n	8001d00 <seclectmenu+0xe68>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001ca8:	4859      	ldr	r0, [pc, #356]	; (8001e10 <seclectmenu+0xf78>)
 8001caa:	f7fe fd89 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4857      	ldr	r0, [pc, #348]	; (8001e10 <seclectmenu+0xf78>)
 8001cb4:	f7fe fd06 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> CHON THE");
 8001cb8:	495c      	ldr	r1, [pc, #368]	; (8001e2c <seclectmenu+0xf94>)
 8001cba:	4855      	ldr	r0, [pc, #340]	; (8001e10 <seclectmenu+0xf78>)
 8001cbc:	f7fe fd69 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4852      	ldr	r0, [pc, #328]	; (8001e10 <seclectmenu+0xf78>)
 8001cc6:	f7fe fcfd 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8001cca:	4959      	ldr	r1, [pc, #356]	; (8001e30 <seclectmenu+0xf98>)
 8001ccc:	4850      	ldr	r0, [pc, #320]	; (8001e10 <seclectmenu+0xf78>)
 8001cce:	f7fe fd60 	bl	8000792 <CLCD_WriteString>
										break;
 8001cd2:	e02c      	b.n	8001d2e <seclectmenu+0xe96>
									case 1:
										CLCD_Clear(&LCD1);
 8001cd4:	484e      	ldr	r0, [pc, #312]	; (8001e10 <seclectmenu+0xf78>)
 8001cd6:	f7fe fd73 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	484c      	ldr	r0, [pc, #304]	; (8001e10 <seclectmenu+0xf78>)
 8001ce0:	f7fe fcf0 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   CHON THE");
 8001ce4:	4953      	ldr	r1, [pc, #332]	; (8001e34 <seclectmenu+0xf9c>)
 8001ce6:	484a      	ldr	r0, [pc, #296]	; (8001e10 <seclectmenu+0xf78>)
 8001ce8:	f7fe fd53 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4847      	ldr	r0, [pc, #284]	; (8001e10 <seclectmenu+0xf78>)
 8001cf2:	f7fe fce7 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> QUET THE");
 8001cf6:	4950      	ldr	r1, [pc, #320]	; (8001e38 <seclectmenu+0xfa0>)
 8001cf8:	4845      	ldr	r0, [pc, #276]	; (8001e10 <seclectmenu+0xf78>)
 8001cfa:	f7fe fd4a 	bl	8000792 <CLCD_WriteString>
										;
										break;
 8001cfe:	e016      	b.n	8001d2e <seclectmenu+0xe96>
									default:
										CLCD_Clear(&LCD1);
 8001d00:	4843      	ldr	r0, [pc, #268]	; (8001e10 <seclectmenu+0xf78>)
 8001d02:	f7fe fd5d 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4841      	ldr	r0, [pc, #260]	; (8001e10 <seclectmenu+0xf78>)
 8001d0c:	f7fe fcda 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8001d10:	4947      	ldr	r1, [pc, #284]	; (8001e30 <seclectmenu+0xf98>)
 8001d12:	483f      	ldr	r0, [pc, #252]	; (8001e10 <seclectmenu+0xf78>)
 8001d14:	f7fe fd3d 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	483c      	ldr	r0, [pc, #240]	; (8001e10 <seclectmenu+0xf78>)
 8001d1e:	f7fe fcd1 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> BACK");
 8001d22:	4940      	ldr	r1, [pc, #256]	; (8001e24 <seclectmenu+0xf8c>)
 8001d24:	483a      	ldr	r0, [pc, #232]	; (8001e10 <seclectmenu+0xf78>)
 8001d26:	f7fe fd34 	bl	8000792 <CLCD_WriteString>
										break;
 8001d2a:	e000      	b.n	8001d2e <seclectmenu+0xe96>
									}
								}
 8001d2c:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d32:	483d      	ldr	r0, [pc, #244]	; (8001e28 <seclectmenu+0xf90>)
 8001d34:	f7ff f862 	bl	8000dfc <checkbuton>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8734 	beq.w	8002ba8 <seclectmenu+0x1d10>
								{
									exitmenu = 15;
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <seclectmenu+0xf74>)
 8001d42:	220f      	movs	r2, #15
 8001d44:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001d46:	7bbb      	ldrb	r3, [r7, #14]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <seclectmenu+0xebe>
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	f000 863b 	beq.w	80029c8 <seclectmenu+0x1b30>
 8001d52:	f000 bf26 	b.w	8002ba2 <seclectmenu+0x1d0a>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001d56:	482e      	ldr	r0, [pc, #184]	; (8001e10 <seclectmenu+0xf78>)
 8001d58:	f7fe fd32 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	482b      	ldr	r0, [pc, #172]	; (8001e10 <seclectmenu+0xf78>)
 8001d62:	f7fe fcaf 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001d66:	4935      	ldr	r1, [pc, #212]	; (8001e3c <seclectmenu+0xfa4>)
 8001d68:	4829      	ldr	r0, [pc, #164]	; (8001e10 <seclectmenu+0xf78>)
 8001d6a:	f7fe fd12 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	2100      	movs	r1, #0
 8001d72:	4827      	ldr	r0, [pc, #156]	; (8001e10 <seclectmenu+0xf78>)
 8001d74:	f7fe fca6 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001d78:	4931      	ldr	r1, [pc, #196]	; (8001e40 <seclectmenu+0xfa8>)
 8001d7a:	4825      	ldr	r0, [pc, #148]	; (8001e10 <seclectmenu+0xf78>)
 8001d7c:	f7fe fd09 	bl	8000792 <CLCD_WriteString>
										uint8_t statusadd = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001d88:	f000 be04 	b.w	8002994 <seclectmenu+0x1afc>
										{
											if (exitmenu == 0)
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <seclectmenu+0xf74>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d108      	bne.n	8001da6 <seclectmenu+0xf0e>
											{
												CLCD_Clear(&LCD1);
 8001d94:	481e      	ldr	r0, [pc, #120]	; (8001e10 <seclectmenu+0xf78>)
 8001d96:	f7fe fd13 	bl	80007c0 <CLCD_Clear>
												HAL_Delay(1000);
 8001d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d9e:	f001 ffe7 	bl	8003d70 <HAL_Delay>
												return;
 8001da2:	f000 bf6b 	b.w	8002c7c <seclectmenu+0x1de4>
											}
											if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001daa:	4817      	ldr	r0, [pc, #92]	; (8001e08 <seclectmenu+0xf70>)
 8001dac:	f7ff f826 	bl	8000dfc <checkbuton>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d072      	beq.n	8001e9c <seclectmenu+0x1004>
											{
												exitmenu = 15;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <seclectmenu+0xf74>)
 8001db8:	220f      	movs	r2, #15
 8001dba:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001dc2:	7b3b      	ldrb	r3, [r7, #12]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d801      	bhi.n	8001dcc <seclectmenu+0xf34>
 8001dc8:	7b3b      	ldrb	r3, [r7, #12]
 8001dca:	e000      	b.n	8001dce <seclectmenu+0xf36>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001dd0:	7b3b      	ldrb	r3, [r7, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d002      	beq.n	8001ddc <seclectmenu+0xf44>
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d034      	beq.n	8001e44 <seclectmenu+0xfac>
 8001dda:	e049      	b.n	8001e70 <seclectmenu+0xfd8>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <seclectmenu+0xf78>)
 8001dde:	f7fe fcef 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	480a      	ldr	r0, [pc, #40]	; (8001e10 <seclectmenu+0xf78>)
 8001de8:	f7fe fc6c 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001dec:	4913      	ldr	r1, [pc, #76]	; (8001e3c <seclectmenu+0xfa4>)
 8001dee:	4808      	ldr	r0, [pc, #32]	; (8001e10 <seclectmenu+0xf78>)
 8001df0:	f7fe fccf 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001df4:	2201      	movs	r2, #1
 8001df6:	2100      	movs	r1, #0
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <seclectmenu+0xf78>)
 8001dfa:	f7fe fc63 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001dfe:	4910      	ldr	r1, [pc, #64]	; (8001e40 <seclectmenu+0xfa8>)
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <seclectmenu+0xf78>)
 8001e02:	f7fe fcc6 	bl	8000792 <CLCD_WriteString>
													break;
 8001e06:	e04a      	b.n	8001e9e <seclectmenu+0x1006>
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	2000015c 	.word	0x2000015c
 8001e14:	0800683c 	.word	0x0800683c
 8001e18:	0800684c 	.word	0x0800684c
 8001e1c:	0800682c 	.word	0x0800682c
 8001e20:	0800685c 	.word	0x0800685c
 8001e24:	08006768 	.word	0x08006768
 8001e28:	40010800 	.word	0x40010800
 8001e2c:	0800686c 	.word	0x0800686c
 8001e30:	08006878 	.word	0x08006878
 8001e34:	08006884 	.word	0x08006884
 8001e38:	08006890 	.word	0x08006890
 8001e3c:	08006734 	.word	0x08006734
 8001e40:	08006748 	.word	0x08006748
												case 2:
													CLCD_Clear(&LCD1);
 8001e44:	48b7      	ldr	r0, [pc, #732]	; (8002124 <seclectmenu+0x128c>)
 8001e46:	f7fe fcbb 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	48b5      	ldr	r0, [pc, #724]	; (8002124 <seclectmenu+0x128c>)
 8001e50:	f7fe fc38 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8001e54:	49b4      	ldr	r1, [pc, #720]	; (8002128 <seclectmenu+0x1290>)
 8001e56:	48b3      	ldr	r0, [pc, #716]	; (8002124 <seclectmenu+0x128c>)
 8001e58:	f7fe fc9b 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2100      	movs	r1, #0
 8001e60:	48b0      	ldr	r0, [pc, #704]	; (8002124 <seclectmenu+0x128c>)
 8001e62:	f7fe fc2f 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8001e66:	49b1      	ldr	r1, [pc, #708]	; (800212c <seclectmenu+0x1294>)
 8001e68:	48ae      	ldr	r0, [pc, #696]	; (8002124 <seclectmenu+0x128c>)
 8001e6a:	f7fe fc92 	bl	8000792 <CLCD_WriteString>
													break;
 8001e6e:	e016      	b.n	8001e9e <seclectmenu+0x1006>
												default:
													CLCD_Clear(&LCD1);
 8001e70:	48ac      	ldr	r0, [pc, #688]	; (8002124 <seclectmenu+0x128c>)
 8001e72:	f7fe fca5 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	48aa      	ldr	r0, [pc, #680]	; (8002124 <seclectmenu+0x128c>)
 8001e7c:	f7fe fc22 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001e80:	49ab      	ldr	r1, [pc, #684]	; (8002130 <seclectmenu+0x1298>)
 8001e82:	48a8      	ldr	r0, [pc, #672]	; (8002124 <seclectmenu+0x128c>)
 8001e84:	f7fe fc85 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	48a5      	ldr	r0, [pc, #660]	; (8002124 <seclectmenu+0x128c>)
 8001e8e:	f7fe fc19 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> BACK");
 8001e92:	49a8      	ldr	r1, [pc, #672]	; (8002134 <seclectmenu+0x129c>)
 8001e94:	48a3      	ldr	r0, [pc, #652]	; (8002124 <seclectmenu+0x128c>)
 8001e96:	f7fe fc7c 	bl	8000792 <CLCD_WriteString>
													break;
 8001e9a:	e000      	b.n	8001e9e <seclectmenu+0x1006>
												}
											}
 8001e9c:	bf00      	nop
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea2:	48a5      	ldr	r0, [pc, #660]	; (8002138 <seclectmenu+0x12a0>)
 8001ea4:	f7fe ffaa 	bl	8000dfc <checkbuton>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8571 	beq.w	8002992 <seclectmenu+0x1afa>
											{
												exitmenu = 15;
 8001eb0:	4ba2      	ldr	r3, [pc, #648]	; (800213c <seclectmenu+0x12a4>)
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d004      	beq.n	8001ec6 <seclectmenu+0x102e>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	f000 82bd 	beq.w	800243c <seclectmenu+0x15a4>
 8001ec2:	f000 bd63 	b.w	800298c <seclectmenu+0x1af4>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001ec6:	4897      	ldr	r0, [pc, #604]	; (8002124 <seclectmenu+0x128c>)
 8001ec8:	f7fe fc7a 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4894      	ldr	r0, [pc, #592]	; (8002124 <seclectmenu+0x128c>)
 8001ed2:	f7fe fbf7 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001ed6:	499a      	ldr	r1, [pc, #616]	; (8002140 <seclectmenu+0x12a8>)
 8001ed8:	4892      	ldr	r0, [pc, #584]	; (8002124 <seclectmenu+0x128c>)
 8001eda:	f7fe fc5a 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4890      	ldr	r0, [pc, #576]	; (8002124 <seclectmenu+0x128c>)
 8001ee4:	f7fe fbee 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    THE 2 ");
 8001ee8:	4996      	ldr	r1, [pc, #600]	; (8002144 <seclectmenu+0x12ac>)
 8001eea:	488e      	ldr	r0, [pc, #568]	; (8002124 <seclectmenu+0x128c>)
 8001eec:	f7fe fc51 	bl	8000792 <CLCD_WriteString>
													uint8_t statusadd1 = 1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001ef8:	e286      	b.n	8002408 <seclectmenu+0x1570>
													{
														if (exitmenu == 0)
 8001efa:	4b90      	ldr	r3, [pc, #576]	; (800213c <seclectmenu+0x12a4>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <seclectmenu+0x107c>
														{
															CLCD_Clear(&LCD1);
 8001f02:	4888      	ldr	r0, [pc, #544]	; (8002124 <seclectmenu+0x128c>)
 8001f04:	f7fe fc5c 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 8001f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0c:	f001 ff30 	bl	8003d70 <HAL_Delay>
															return;
 8001f10:	f000 beb4 	b.w	8002c7c <seclectmenu+0x1de4>
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f18:	488b      	ldr	r0, [pc, #556]	; (8002148 <seclectmenu+0x12b0>)
 8001f1a:	f7fe ff6f 	bl	8000dfc <checkbuton>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 808b 	beq.w	800203c <seclectmenu+0x11a4>
														{
															exitmenu = 15;
 8001f26:	4b85      	ldr	r3, [pc, #532]	; (800213c <seclectmenu+0x12a4>)
 8001f28:	220f      	movs	r2, #15
 8001f2a:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001f2c:	7abb      	ldrb	r3, [r7, #10]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001f32:	7abb      	ldrb	r3, [r7, #10]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d801      	bhi.n	8001f3c <seclectmenu+0x10a4>
 8001f38:	7abb      	ldrb	r3, [r7, #10]
 8001f3a:	e000      	b.n	8001f3e <seclectmenu+0x10a6>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d863      	bhi.n	8002010 <seclectmenu+0x1178>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <seclectmenu+0x10b8>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f8d 	.word	0x08001f8d
 8001f58:	08001fb9 	.word	0x08001fb9
 8001f5c:	08001fe5 	.word	0x08001fe5
															{
															case 1:
																CLCD_Clear(&LCD1);
 8001f60:	4870      	ldr	r0, [pc, #448]	; (8002124 <seclectmenu+0x128c>)
 8001f62:	f7fe fc2d 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	486e      	ldr	r0, [pc, #440]	; (8002124 <seclectmenu+0x128c>)
 8001f6c:	f7fe fbaa 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001f70:	4973      	ldr	r1, [pc, #460]	; (8002140 <seclectmenu+0x12a8>)
 8001f72:	486c      	ldr	r0, [pc, #432]	; (8002124 <seclectmenu+0x128c>)
 8001f74:	f7fe fc0d 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4869      	ldr	r0, [pc, #420]	; (8002124 <seclectmenu+0x128c>)
 8001f7e:	f7fe fba1 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 2 ");
 8001f82:	4970      	ldr	r1, [pc, #448]	; (8002144 <seclectmenu+0x12ac>)
 8001f84:	4867      	ldr	r0, [pc, #412]	; (8002124 <seclectmenu+0x128c>)
 8001f86:	f7fe fc04 	bl	8000792 <CLCD_WriteString>
																break;
 8001f8a:	e058      	b.n	800203e <seclectmenu+0x11a6>
															case 2:
																CLCD_Clear(&LCD1);
 8001f8c:	4865      	ldr	r0, [pc, #404]	; (8002124 <seclectmenu+0x128c>)
 8001f8e:	f7fe fc17 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	4863      	ldr	r0, [pc, #396]	; (8002124 <seclectmenu+0x128c>)
 8001f98:	f7fe fb94 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001f9c:	496b      	ldr	r1, [pc, #428]	; (800214c <seclectmenu+0x12b4>)
 8001f9e:	4861      	ldr	r0, [pc, #388]	; (8002124 <seclectmenu+0x128c>)
 8001fa0:	f7fe fbf7 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	485e      	ldr	r0, [pc, #376]	; (8002124 <seclectmenu+0x128c>)
 8001faa:	f7fe fb8b 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 3 ");
 8001fae:	4968      	ldr	r1, [pc, #416]	; (8002150 <seclectmenu+0x12b8>)
 8001fb0:	485c      	ldr	r0, [pc, #368]	; (8002124 <seclectmenu+0x128c>)
 8001fb2:	f7fe fbee 	bl	8000792 <CLCD_WriteString>
																break;
 8001fb6:	e042      	b.n	800203e <seclectmenu+0x11a6>
															case 3:
																CLCD_Clear(&LCD1);
 8001fb8:	485a      	ldr	r0, [pc, #360]	; (8002124 <seclectmenu+0x128c>)
 8001fba:	f7fe fc01 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4858      	ldr	r0, [pc, #352]	; (8002124 <seclectmenu+0x128c>)
 8001fc4:	f7fe fb7e 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001fc8:	4962      	ldr	r1, [pc, #392]	; (8002154 <seclectmenu+0x12bc>)
 8001fca:	4856      	ldr	r0, [pc, #344]	; (8002124 <seclectmenu+0x128c>)
 8001fcc:	f7fe fbe1 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4853      	ldr	r0, [pc, #332]	; (8002124 <seclectmenu+0x128c>)
 8001fd6:	f7fe fb75 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8001fda:	495f      	ldr	r1, [pc, #380]	; (8002158 <seclectmenu+0x12c0>)
 8001fdc:	4851      	ldr	r0, [pc, #324]	; (8002124 <seclectmenu+0x128c>)
 8001fde:	f7fe fbd8 	bl	8000792 <CLCD_WriteString>
																break;
 8001fe2:	e02c      	b.n	800203e <seclectmenu+0x11a6>
															case 4:
																CLCD_Clear(&LCD1);
 8001fe4:	484f      	ldr	r0, [pc, #316]	; (8002124 <seclectmenu+0x128c>)
 8001fe6:	f7fe fbeb 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	484d      	ldr	r0, [pc, #308]	; (8002124 <seclectmenu+0x128c>)
 8001ff0:	f7fe fb68 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001ff4:	4959      	ldr	r1, [pc, #356]	; (800215c <seclectmenu+0x12c4>)
 8001ff6:	484b      	ldr	r0, [pc, #300]	; (8002124 <seclectmenu+0x128c>)
 8001ff8:	f7fe fbcb 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2100      	movs	r1, #0
 8002000:	4848      	ldr	r0, [pc, #288]	; (8002124 <seclectmenu+0x128c>)
 8002002:	f7fe fb5f 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 8002006:	4956      	ldr	r1, [pc, #344]	; (8002160 <seclectmenu+0x12c8>)
 8002008:	4846      	ldr	r0, [pc, #280]	; (8002124 <seclectmenu+0x128c>)
 800200a:	f7fe fbc2 	bl	8000792 <CLCD_WriteString>
																break;
 800200e:	e016      	b.n	800203e <seclectmenu+0x11a6>
															default:
																CLCD_Clear(&LCD1);
 8002010:	4844      	ldr	r0, [pc, #272]	; (8002124 <seclectmenu+0x128c>)
 8002012:	f7fe fbd5 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	4842      	ldr	r0, [pc, #264]	; (8002124 <seclectmenu+0x128c>)
 800201c:	f7fe fb52 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8002020:	494d      	ldr	r1, [pc, #308]	; (8002158 <seclectmenu+0x12c0>)
 8002022:	4840      	ldr	r0, [pc, #256]	; (8002124 <seclectmenu+0x128c>)
 8002024:	f7fe fbb5 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	2100      	movs	r1, #0
 800202c:	483d      	ldr	r0, [pc, #244]	; (8002124 <seclectmenu+0x128c>)
 800202e:	f7fe fb49 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 8002032:	494c      	ldr	r1, [pc, #304]	; (8002164 <seclectmenu+0x12cc>)
 8002034:	483b      	ldr	r0, [pc, #236]	; (8002124 <seclectmenu+0x128c>)
 8002036:	f7fe fbac 	bl	8000792 <CLCD_WriteString>
																break;
 800203a:	e000      	b.n	800203e <seclectmenu+0x11a6>
															}
														}
 800203c:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 800203e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002042:	483d      	ldr	r0, [pc, #244]	; (8002138 <seclectmenu+0x12a0>)
 8002044:	f7fe feda 	bl	8000dfc <checkbuton>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 81db 	beq.w	8002406 <seclectmenu+0x156e>
														{
															exitmenu = 15;
 8002050:	4b3a      	ldr	r3, [pc, #232]	; (800213c <seclectmenu+0x12a4>)
 8002052:	220f      	movs	r2, #15
 8002054:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8002056:	7b3b      	ldrb	r3, [r7, #12]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	b2da      	uxtb	r2, r3
 800205c:	7abb      	ldrb	r3, [r7, #10]
 800205e:	4413      	add	r3, r2
 8002060:	713b      	strb	r3, [r7, #4]
															switch (statusadd1)
 8002062:	7abb      	ldrb	r3, [r7, #10]
 8002064:	3b01      	subs	r3, #1
 8002066:	2b03      	cmp	r3, #3
 8002068:	f200 81ca 	bhi.w	8002400 <seclectmenu+0x1568>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <seclectmenu+0x11dc>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	0800219d 	.word	0x0800219d
 800207c:	08002269 	.word	0x08002269
 8002080:	08002335 	.word	0x08002335
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8002084:	793b      	ldrb	r3, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f001 f86a 	bl	8003160 <CheckKey>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d125      	bne.n	80020de <seclectmenu+0x1246>
																{
																	CLCD_Clear(&LCD1);
 8002092:	4824      	ldr	r0, [pc, #144]	; (8002124 <seclectmenu+0x128c>)
 8002094:	f7fe fb94 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	4821      	ldr	r0, [pc, #132]	; (8002124 <seclectmenu+0x128c>)
 800209e:	f7fe fb11 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 1 ");
 80020a2:	4931      	ldr	r1, [pc, #196]	; (8002168 <seclectmenu+0x12d0>)
 80020a4:	481f      	ldr	r0, [pc, #124]	; (8002124 <seclectmenu+0x128c>)
 80020a6:	f7fe fb74 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80020aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ae:	f001 fe5f 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80020b2:	481c      	ldr	r0, [pc, #112]	; (8002124 <seclectmenu+0x128c>)
 80020b4:	f7fe fb84 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <seclectmenu+0x128c>)
 80020be:	f7fe fb01 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80020c2:	491f      	ldr	r1, [pc, #124]	; (8002140 <seclectmenu+0x12a8>)
 80020c4:	4817      	ldr	r0, [pc, #92]	; (8002124 <seclectmenu+0x128c>)
 80020c6:	f7fe fb64 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2100      	movs	r1, #0
 80020ce:	4815      	ldr	r0, [pc, #84]	; (8002124 <seclectmenu+0x128c>)
 80020d0:	f7fe faf8 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 80020d4:	491b      	ldr	r1, [pc, #108]	; (8002144 <seclectmenu+0x12ac>)
 80020d6:	4813      	ldr	r0, [pc, #76]	; (8002124 <seclectmenu+0x128c>)
 80020d8:	f7fe fb5b 	bl	8000792 <CLCD_WriteString>
 80020dc:	e194      	b.n	8002408 <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 80020de:	793b      	ldrb	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 f83d 	bl	8003160 <CheckKey>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f867 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <seclectmenu+0x128c>)
 80020f0:	f7fe fb66 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	480a      	ldr	r0, [pc, #40]	; (8002124 <seclectmenu+0x128c>)
 80020fa:	f7fe fae3 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80020fe:	491b      	ldr	r1, [pc, #108]	; (800216c <seclectmenu+0x12d4>)
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <seclectmenu+0x128c>)
 8002102:	f7fe fb46 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800210a:	f001 fe31 	bl	8003d70 <HAL_Delay>
																	if (checkcountUID() == 0)
 800210e:	f000 fe31 	bl	8002d74 <checkcountUID>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d12b      	bne.n	8002170 <seclectmenu+0x12d8>
																	{
																		startadd();
 8002118:	f001 f85e 	bl	80031d8 <startadd>
																		exitmenu = 0;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <seclectmenu+0x12a4>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e171      	b.n	8002408 <seclectmenu+0x1570>
 8002124:	2000015c 	.word	0x2000015c
 8002128:	08006720 	.word	0x08006720
 800212c:	08006758 	.word	0x08006758
 8002130:	08006748 	.word	0x08006748
 8002134:	08006768 	.word	0x08006768
 8002138:	40010800 	.word	0x40010800
 800213c:	20000000 	.word	0x20000000
 8002140:	08006770 	.word	0x08006770
 8002144:	0800677c 	.word	0x0800677c
 8002148:	40010c00 	.word	0x40010c00
 800214c:	08006788 	.word	0x08006788
 8002150:	08006794 	.word	0x08006794
 8002154:	080067a0 	.word	0x080067a0
 8002158:	080067ac 	.word	0x080067ac
 800215c:	080067b8 	.word	0x080067b8
 8002160:	080067c4 	.word	0x080067c4
 8002164:	080067d0 	.word	0x080067d0
 8002168:	0800689c 	.word	0x0800689c
 800216c:	080068ac 	.word	0x080068ac
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 8002170:	48bf      	ldr	r0, [pc, #764]	; (8002470 <seclectmenu+0x15d8>)
 8002172:	f7fe fb25 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	48bd      	ldr	r0, [pc, #756]	; (8002470 <seclectmenu+0x15d8>)
 800217c:	f7fe faa2 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8002180:	49bc      	ldr	r1, [pc, #752]	; (8002474 <seclectmenu+0x15dc>)
 8002182:	48bb      	ldr	r0, [pc, #748]	; (8002470 <seclectmenu+0x15d8>)
 8002184:	f7fe fb05 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002188:	2201      	movs	r2, #1
 800218a:	2100      	movs	r1, #0
 800218c:	48b8      	ldr	r0, [pc, #736]	; (8002470 <seclectmenu+0x15d8>)
 800218e:	f7fe fa99 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 2 ");
 8002192:	49b9      	ldr	r1, [pc, #740]	; (8002478 <seclectmenu+0x15e0>)
 8002194:	48b6      	ldr	r0, [pc, #728]	; (8002470 <seclectmenu+0x15d8>)
 8002196:	f7fe fafc 	bl	8000792 <CLCD_WriteString>
																	}
																}
																break;
 800219a:	e135      	b.n	8002408 <seclectmenu+0x1570>
															case 2:
																if (CheckKey(keyadd1) == 0)
 800219c:	793b      	ldrb	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 ffde 	bl	8003160 <CheckKey>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d125      	bne.n	80021f6 <seclectmenu+0x135e>
																{
																	CLCD_Clear(&LCD1);
 80021aa:	48b1      	ldr	r0, [pc, #708]	; (8002470 <seclectmenu+0x15d8>)
 80021ac:	f7fe fb08 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	48ae      	ldr	r0, [pc, #696]	; (8002470 <seclectmenu+0x15d8>)
 80021b6:	f7fe fa85 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 2 ");
 80021ba:	49b0      	ldr	r1, [pc, #704]	; (800247c <seclectmenu+0x15e4>)
 80021bc:	48ac      	ldr	r0, [pc, #688]	; (8002470 <seclectmenu+0x15d8>)
 80021be:	f7fe fae8 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80021c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c6:	f001 fdd3 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80021ca:	48a9      	ldr	r0, [pc, #676]	; (8002470 <seclectmenu+0x15d8>)
 80021cc:	f7fe faf8 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	48a6      	ldr	r0, [pc, #664]	; (8002470 <seclectmenu+0x15d8>)
 80021d6:	f7fe fa75 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80021da:	49a9      	ldr	r1, [pc, #676]	; (8002480 <seclectmenu+0x15e8>)
 80021dc:	48a4      	ldr	r0, [pc, #656]	; (8002470 <seclectmenu+0x15d8>)
 80021de:	f7fe fad8 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	2100      	movs	r1, #0
 80021e6:	48a2      	ldr	r0, [pc, #648]	; (8002470 <seclectmenu+0x15d8>)
 80021e8:	f7fe fa6c 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 80021ec:	49a5      	ldr	r1, [pc, #660]	; (8002484 <seclectmenu+0x15ec>)
 80021ee:	48a0      	ldr	r0, [pc, #640]	; (8002470 <seclectmenu+0x15d8>)
 80021f0:	f7fe facf 	bl	8000792 <CLCD_WriteString>
 80021f4:	e108      	b.n	8002408 <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 80021f6:	793b      	ldrb	r3, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 ffb1 	bl	8003160 <CheckKey>
 80021fe:	4603      	mov	r3, r0
 8002200:	4618      	mov	r0, r3
 8002202:	f000 ffdb 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 8002206:	489a      	ldr	r0, [pc, #616]	; (8002470 <seclectmenu+0x15d8>)
 8002208:	f7fe fada 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	4897      	ldr	r0, [pc, #604]	; (8002470 <seclectmenu+0x15d8>)
 8002212:	f7fe fa57 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002216:	499c      	ldr	r1, [pc, #624]	; (8002488 <seclectmenu+0x15f0>)
 8002218:	4895      	ldr	r0, [pc, #596]	; (8002470 <seclectmenu+0x15d8>)
 800221a:	f7fe faba 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800221e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002222:	f001 fda5 	bl	8003d70 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002226:	f000 fda5 	bl	8002d74 <checkcountUID>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <seclectmenu+0x13a4>
																	{
																		startadd();
 8002230:	f000 ffd2 	bl	80031d8 <startadd>
																		exitmenu = 0;
 8002234:	4b95      	ldr	r3, [pc, #596]	; (800248c <seclectmenu+0x15f4>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e0e5      	b.n	8002408 <seclectmenu+0x1570>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 800223c:	488c      	ldr	r0, [pc, #560]	; (8002470 <seclectmenu+0x15d8>)
 800223e:	f7fe fabf 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	488a      	ldr	r0, [pc, #552]	; (8002470 <seclectmenu+0x15d8>)
 8002248:	f7fe fa3c 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 2 ");
 800224c:	498c      	ldr	r1, [pc, #560]	; (8002480 <seclectmenu+0x15e8>)
 800224e:	4888      	ldr	r0, [pc, #544]	; (8002470 <seclectmenu+0x15d8>)
 8002250:	f7fe fa9f 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002254:	2201      	movs	r2, #1
 8002256:	2100      	movs	r1, #0
 8002258:	4885      	ldr	r0, [pc, #532]	; (8002470 <seclectmenu+0x15d8>)
 800225a:	f7fe fa33 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 3 ");
 800225e:	4989      	ldr	r1, [pc, #548]	; (8002484 <seclectmenu+0x15ec>)
 8002260:	4883      	ldr	r0, [pc, #524]	; (8002470 <seclectmenu+0x15d8>)
 8002262:	f7fe fa96 	bl	8000792 <CLCD_WriteString>
																	}
																}
																break;
 8002266:	e0cf      	b.n	8002408 <seclectmenu+0x1570>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8002268:	793b      	ldrb	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 ff78 	bl	8003160 <CheckKey>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d125      	bne.n	80022c2 <seclectmenu+0x142a>
																{
																	CLCD_Clear(&LCD1);
 8002276:	487e      	ldr	r0, [pc, #504]	; (8002470 <seclectmenu+0x15d8>)
 8002278:	f7fe faa2 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	487b      	ldr	r0, [pc, #492]	; (8002470 <seclectmenu+0x15d8>)
 8002282:	f7fe fa1f 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 3 ");
 8002286:	4982      	ldr	r1, [pc, #520]	; (8002490 <seclectmenu+0x15f8>)
 8002288:	4879      	ldr	r0, [pc, #484]	; (8002470 <seclectmenu+0x15d8>)
 800228a:	f7fe fa82 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800228e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002292:	f001 fd6d 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002296:	4876      	ldr	r0, [pc, #472]	; (8002470 <seclectmenu+0x15d8>)
 8002298:	f7fe fa92 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	4873      	ldr	r0, [pc, #460]	; (8002470 <seclectmenu+0x15d8>)
 80022a2:	f7fe fa0f 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80022a6:	497b      	ldr	r1, [pc, #492]	; (8002494 <seclectmenu+0x15fc>)
 80022a8:	4871      	ldr	r0, [pc, #452]	; (8002470 <seclectmenu+0x15d8>)
 80022aa:	f7fe fa72 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2100      	movs	r1, #0
 80022b2:	486f      	ldr	r0, [pc, #444]	; (8002470 <seclectmenu+0x15d8>)
 80022b4:	f7fe fa06 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 80022b8:	4977      	ldr	r1, [pc, #476]	; (8002498 <seclectmenu+0x1600>)
 80022ba:	486d      	ldr	r0, [pc, #436]	; (8002470 <seclectmenu+0x15d8>)
 80022bc:	f7fe fa69 	bl	8000792 <CLCD_WriteString>
 80022c0:	e0a2      	b.n	8002408 <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 80022c2:	793b      	ldrb	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 ff4b 	bl	8003160 <CheckKey>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 ff75 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 80022d2:	4867      	ldr	r0, [pc, #412]	; (8002470 <seclectmenu+0x15d8>)
 80022d4:	f7fe fa74 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	4864      	ldr	r0, [pc, #400]	; (8002470 <seclectmenu+0x15d8>)
 80022de:	f7fe f9f1 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80022e2:	4969      	ldr	r1, [pc, #420]	; (8002488 <seclectmenu+0x15f0>)
 80022e4:	4862      	ldr	r0, [pc, #392]	; (8002470 <seclectmenu+0x15d8>)
 80022e6:	f7fe fa54 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80022ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022ee:	f001 fd3f 	bl	8003d70 <HAL_Delay>
																	if (checkcountUID() == 0)
 80022f2:	f000 fd3f 	bl	8002d74 <checkcountUID>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <seclectmenu+0x1470>
																	{
																		startadd();
 80022fc:	f000 ff6c 	bl	80031d8 <startadd>
																		exitmenu = 0;
 8002300:	4b62      	ldr	r3, [pc, #392]	; (800248c <seclectmenu+0x15f4>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e07f      	b.n	8002408 <seclectmenu+0x1570>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 8002308:	4859      	ldr	r0, [pc, #356]	; (8002470 <seclectmenu+0x15d8>)
 800230a:	f7fe fa59 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	4857      	ldr	r0, [pc, #348]	; (8002470 <seclectmenu+0x15d8>)
 8002314:	f7fe f9d6 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8002318:	495e      	ldr	r1, [pc, #376]	; (8002494 <seclectmenu+0x15fc>)
 800231a:	4855      	ldr	r0, [pc, #340]	; (8002470 <seclectmenu+0x15d8>)
 800231c:	f7fe fa39 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002320:	2201      	movs	r2, #1
 8002322:	2100      	movs	r1, #0
 8002324:	4852      	ldr	r0, [pc, #328]	; (8002470 <seclectmenu+0x15d8>)
 8002326:	f7fe f9cd 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 4 ");
 800232a:	495b      	ldr	r1, [pc, #364]	; (8002498 <seclectmenu+0x1600>)
 800232c:	4850      	ldr	r0, [pc, #320]	; (8002470 <seclectmenu+0x15d8>)
 800232e:	f7fe fa30 	bl	8000792 <CLCD_WriteString>
																	}
																}
																break;
 8002332:	e069      	b.n	8002408 <seclectmenu+0x1570>
															case 4:
																if (CheckKey(keyadd1) == 0)
 8002334:	793b      	ldrb	r3, [r7, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 ff12 	bl	8003160 <CheckKey>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d125      	bne.n	800238e <seclectmenu+0x14f6>
																{
																	CLCD_Clear(&LCD1);
 8002342:	484b      	ldr	r0, [pc, #300]	; (8002470 <seclectmenu+0x15d8>)
 8002344:	f7fe fa3c 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	4848      	ldr	r0, [pc, #288]	; (8002470 <seclectmenu+0x15d8>)
 800234e:	f7fe f9b9 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 4 ");
 8002352:	4952      	ldr	r1, [pc, #328]	; (800249c <seclectmenu+0x1604>)
 8002354:	4846      	ldr	r0, [pc, #280]	; (8002470 <seclectmenu+0x15d8>)
 8002356:	f7fe fa1c 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800235a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235e:	f001 fd07 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002362:	4843      	ldr	r0, [pc, #268]	; (8002470 <seclectmenu+0x15d8>)
 8002364:	f7fe fa2c 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	4840      	ldr	r0, [pc, #256]	; (8002470 <seclectmenu+0x15d8>)
 800236e:	f7fe f9a9 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8002372:	494b      	ldr	r1, [pc, #300]	; (80024a0 <seclectmenu+0x1608>)
 8002374:	483e      	ldr	r0, [pc, #248]	; (8002470 <seclectmenu+0x15d8>)
 8002376:	f7fe fa0c 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800237a:	2201      	movs	r2, #1
 800237c:	2100      	movs	r1, #0
 800237e:	483c      	ldr	r0, [pc, #240]	; (8002470 <seclectmenu+0x15d8>)
 8002380:	f7fe f9a0 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 8002384:	4947      	ldr	r1, [pc, #284]	; (80024a4 <seclectmenu+0x160c>)
 8002386:	483a      	ldr	r0, [pc, #232]	; (8002470 <seclectmenu+0x15d8>)
 8002388:	f7fe fa03 	bl	8000792 <CLCD_WriteString>
 800238c:	e03c      	b.n	8002408 <seclectmenu+0x1570>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 800238e:	793b      	ldrb	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fee5 	bl	8003160 <CheckKey>
 8002396:	4603      	mov	r3, r0
 8002398:	4618      	mov	r0, r3
 800239a:	f000 ff0f 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 800239e:	4834      	ldr	r0, [pc, #208]	; (8002470 <seclectmenu+0x15d8>)
 80023a0:	f7fe fa0e 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	4831      	ldr	r0, [pc, #196]	; (8002470 <seclectmenu+0x15d8>)
 80023aa:	f7fe f98b 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80023ae:	4936      	ldr	r1, [pc, #216]	; (8002488 <seclectmenu+0x15f0>)
 80023b0:	482f      	ldr	r0, [pc, #188]	; (8002470 <seclectmenu+0x15d8>)
 80023b2:	f7fe f9ee 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80023b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ba:	f001 fcd9 	bl	8003d70 <HAL_Delay>
																	if (checkcountUID() == 0)
 80023be:	f000 fcd9 	bl	8002d74 <checkcountUID>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <seclectmenu+0x153c>
																	{
																		startadd();
 80023c8:	f000 ff06 	bl	80031d8 <startadd>
																		exitmenu = 0;
 80023cc:	4b2f      	ldr	r3, [pc, #188]	; (800248c <seclectmenu+0x15f4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e019      	b.n	8002408 <seclectmenu+0x1570>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 80023d4:	4826      	ldr	r0, [pc, #152]	; (8002470 <seclectmenu+0x15d8>)
 80023d6:	f7fe f9f3 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	4824      	ldr	r0, [pc, #144]	; (8002470 <seclectmenu+0x15d8>)
 80023e0:	f7fe f970 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80023e4:	492e      	ldr	r1, [pc, #184]	; (80024a0 <seclectmenu+0x1608>)
 80023e6:	4822      	ldr	r0, [pc, #136]	; (8002470 <seclectmenu+0x15d8>)
 80023e8:	f7fe f9d3 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 80023ec:	2201      	movs	r2, #1
 80023ee:	2100      	movs	r1, #0
 80023f0:	481f      	ldr	r0, [pc, #124]	; (8002470 <seclectmenu+0x15d8>)
 80023f2:	f7fe f967 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    BACK ");
 80023f6:	492b      	ldr	r1, [pc, #172]	; (80024a4 <seclectmenu+0x160c>)
 80023f8:	481d      	ldr	r0, [pc, #116]	; (8002470 <seclectmenu+0x15d8>)
 80023fa:	f7fe f9ca 	bl	8000792 <CLCD_WriteString>
																	}
																}
																break;
 80023fe:	e003      	b.n	8002408 <seclectmenu+0x1570>
															default:
																back11 = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	727b      	strb	r3, [r7, #9]
																break;
 8002404:	e000      	b.n	8002408 <seclectmenu+0x1570>
															}
														}
 8002406:	bf00      	nop
													while (back11 == 1)
 8002408:	7a7b      	ldrb	r3, [r7, #9]
 800240a:	2b01      	cmp	r3, #1
 800240c:	f43f ad75 	beq.w	8001efa <seclectmenu+0x1062>
													}
													CLCD_Clear(&LCD1);
 8002410:	4817      	ldr	r0, [pc, #92]	; (8002470 <seclectmenu+0x15d8>)
 8002412:	f7fe f9d5 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	4815      	ldr	r0, [pc, #84]	; (8002470 <seclectmenu+0x15d8>)
 800241c:	f7fe f952 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8002420:	4921      	ldr	r1, [pc, #132]	; (80024a8 <seclectmenu+0x1610>)
 8002422:	4813      	ldr	r0, [pc, #76]	; (8002470 <seclectmenu+0x15d8>)
 8002424:	f7fe f9b5 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002428:	2201      	movs	r2, #1
 800242a:	2100      	movs	r1, #0
 800242c:	4810      	ldr	r0, [pc, #64]	; (8002470 <seclectmenu+0x15d8>)
 800242e:	f7fe f949 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 8002432:	491e      	ldr	r1, [pc, #120]	; (80024ac <seclectmenu+0x1614>)
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <seclectmenu+0x15d8>)
 8002436:	f7fe f9ac 	bl	8000792 <CLCD_WriteString>
													break;
 800243a:	e2ab      	b.n	8002994 <seclectmenu+0x1afc>
												case 2:
													CLCD_Clear(&LCD1);
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <seclectmenu+0x15d8>)
 800243e:	f7fe f9bf 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	480a      	ldr	r0, [pc, #40]	; (8002470 <seclectmenu+0x15d8>)
 8002448:	f7fe f93c 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800244c:	4909      	ldr	r1, [pc, #36]	; (8002474 <seclectmenu+0x15dc>)
 800244e:	4808      	ldr	r0, [pc, #32]	; (8002470 <seclectmenu+0x15d8>)
 8002450:	f7fe f99f 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002454:	2201      	movs	r2, #1
 8002456:	2100      	movs	r1, #0
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <seclectmenu+0x15d8>)
 800245a:	f7fe f933 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    THE 2 ");
 800245e:	4906      	ldr	r1, [pc, #24]	; (8002478 <seclectmenu+0x15e0>)
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <seclectmenu+0x15d8>)
 8002462:	f7fe f996 	bl	8000792 <CLCD_WriteString>
													uint8_t statusadd2 = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 800246e:	e273      	b.n	8002958 <seclectmenu+0x1ac0>
 8002470:	2000015c 	.word	0x2000015c
 8002474:	08006770 	.word	0x08006770
 8002478:	0800677c 	.word	0x0800677c
 800247c:	080068bc 	.word	0x080068bc
 8002480:	08006788 	.word	0x08006788
 8002484:	08006794 	.word	0x08006794
 8002488:	080068ac 	.word	0x080068ac
 800248c:	20000000 	.word	0x20000000
 8002490:	080068cc 	.word	0x080068cc
 8002494:	080067a0 	.word	0x080067a0
 8002498:	080067ac 	.word	0x080067ac
 800249c:	080068dc 	.word	0x080068dc
 80024a0:	080067b8 	.word	0x080067b8
 80024a4:	080067c4 	.word	0x080067c4
 80024a8:	08006734 	.word	0x08006734
 80024ac:	08006748 	.word	0x08006748
													{
														if (exitmenu == 0)
 80024b0:	4bbc      	ldr	r3, [pc, #752]	; (80027a4 <seclectmenu+0x190c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <seclectmenu+0x1630>
														{
															CLCD_Clear(&LCD1);
 80024b8:	48bb      	ldr	r0, [pc, #748]	; (80027a8 <seclectmenu+0x1910>)
 80024ba:	f7fe f981 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 80024be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c2:	f001 fc55 	bl	8003d70 <HAL_Delay>
															return;
 80024c6:	e3d9      	b.n	8002c7c <seclectmenu+0x1de4>
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80024c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024cc:	48b7      	ldr	r0, [pc, #732]	; (80027ac <seclectmenu+0x1914>)
 80024ce:	f7fe fc95 	bl	8000dfc <checkbuton>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 808b 	beq.w	80025f0 <seclectmenu+0x1758>
														{
															exitmenu = 15;
 80024da:	4bb2      	ldr	r3, [pc, #712]	; (80027a4 <seclectmenu+0x190c>)
 80024dc:	220f      	movs	r2, #15
 80024de:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 80024e0:	7a3b      	ldrb	r3, [r7, #8]
 80024e2:	3301      	adds	r3, #1
 80024e4:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 80024e6:	7a3b      	ldrb	r3, [r7, #8]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d801      	bhi.n	80024f0 <seclectmenu+0x1658>
 80024ec:	7a3b      	ldrb	r3, [r7, #8]
 80024ee:	e000      	b.n	80024f2 <seclectmenu+0x165a>
 80024f0:	2300      	movs	r3, #0
 80024f2:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 80024f4:	7a3b      	ldrb	r3, [r7, #8]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d863      	bhi.n	80025c4 <seclectmenu+0x172c>
 80024fc:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <seclectmenu+0x166c>)
 80024fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002502:	bf00      	nop
 8002504:	08002515 	.word	0x08002515
 8002508:	08002541 	.word	0x08002541
 800250c:	0800256d 	.word	0x0800256d
 8002510:	08002599 	.word	0x08002599
															{
															case 1:
																CLCD_Clear(&LCD1);
 8002514:	48a4      	ldr	r0, [pc, #656]	; (80027a8 <seclectmenu+0x1910>)
 8002516:	f7fe f953 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	48a2      	ldr	r0, [pc, #648]	; (80027a8 <seclectmenu+0x1910>)
 8002520:	f7fe f8d0 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8002524:	49a2      	ldr	r1, [pc, #648]	; (80027b0 <seclectmenu+0x1918>)
 8002526:	48a0      	ldr	r0, [pc, #640]	; (80027a8 <seclectmenu+0x1910>)
 8002528:	f7fe f933 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 800252c:	2201      	movs	r2, #1
 800252e:	2100      	movs	r1, #0
 8002530:	489d      	ldr	r0, [pc, #628]	; (80027a8 <seclectmenu+0x1910>)
 8002532:	f7fe f8c7 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 2 ");
 8002536:	499f      	ldr	r1, [pc, #636]	; (80027b4 <seclectmenu+0x191c>)
 8002538:	489b      	ldr	r0, [pc, #620]	; (80027a8 <seclectmenu+0x1910>)
 800253a:	f7fe f92a 	bl	8000792 <CLCD_WriteString>
																break;
 800253e:	e058      	b.n	80025f2 <seclectmenu+0x175a>
															case 2:
																CLCD_Clear(&LCD1);
 8002540:	4899      	ldr	r0, [pc, #612]	; (80027a8 <seclectmenu+0x1910>)
 8002542:	f7fe f93d 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	4897      	ldr	r0, [pc, #604]	; (80027a8 <seclectmenu+0x1910>)
 800254c:	f7fe f8ba 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8002550:	4999      	ldr	r1, [pc, #612]	; (80027b8 <seclectmenu+0x1920>)
 8002552:	4895      	ldr	r0, [pc, #596]	; (80027a8 <seclectmenu+0x1910>)
 8002554:	f7fe f91d 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002558:	2201      	movs	r2, #1
 800255a:	2100      	movs	r1, #0
 800255c:	4892      	ldr	r0, [pc, #584]	; (80027a8 <seclectmenu+0x1910>)
 800255e:	f7fe f8b1 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 3 ");
 8002562:	4996      	ldr	r1, [pc, #600]	; (80027bc <seclectmenu+0x1924>)
 8002564:	4890      	ldr	r0, [pc, #576]	; (80027a8 <seclectmenu+0x1910>)
 8002566:	f7fe f914 	bl	8000792 <CLCD_WriteString>
																break;
 800256a:	e042      	b.n	80025f2 <seclectmenu+0x175a>
															case 3:
																CLCD_Clear(&LCD1);
 800256c:	488e      	ldr	r0, [pc, #568]	; (80027a8 <seclectmenu+0x1910>)
 800256e:	f7fe f927 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	488c      	ldr	r0, [pc, #560]	; (80027a8 <seclectmenu+0x1910>)
 8002578:	f7fe f8a4 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800257c:	4990      	ldr	r1, [pc, #576]	; (80027c0 <seclectmenu+0x1928>)
 800257e:	488a      	ldr	r0, [pc, #552]	; (80027a8 <seclectmenu+0x1910>)
 8002580:	f7fe f907 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002584:	2201      	movs	r2, #1
 8002586:	2100      	movs	r1, #0
 8002588:	4887      	ldr	r0, [pc, #540]	; (80027a8 <seclectmenu+0x1910>)
 800258a:	f7fe f89b 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 800258e:	498d      	ldr	r1, [pc, #564]	; (80027c4 <seclectmenu+0x192c>)
 8002590:	4885      	ldr	r0, [pc, #532]	; (80027a8 <seclectmenu+0x1910>)
 8002592:	f7fe f8fe 	bl	8000792 <CLCD_WriteString>
																break;
 8002596:	e02c      	b.n	80025f2 <seclectmenu+0x175a>
															case 4:
																CLCD_Clear(&LCD1);
 8002598:	4883      	ldr	r0, [pc, #524]	; (80027a8 <seclectmenu+0x1910>)
 800259a:	f7fe f911 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	4881      	ldr	r0, [pc, #516]	; (80027a8 <seclectmenu+0x1910>)
 80025a4:	f7fe f88e 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80025a8:	4987      	ldr	r1, [pc, #540]	; (80027c8 <seclectmenu+0x1930>)
 80025aa:	487f      	ldr	r0, [pc, #508]	; (80027a8 <seclectmenu+0x1910>)
 80025ac:	f7fe f8f1 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2100      	movs	r1, #0
 80025b4:	487c      	ldr	r0, [pc, #496]	; (80027a8 <seclectmenu+0x1910>)
 80025b6:	f7fe f885 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 80025ba:	4984      	ldr	r1, [pc, #528]	; (80027cc <seclectmenu+0x1934>)
 80025bc:	487a      	ldr	r0, [pc, #488]	; (80027a8 <seclectmenu+0x1910>)
 80025be:	f7fe f8e8 	bl	8000792 <CLCD_WriteString>
																break;
 80025c2:	e016      	b.n	80025f2 <seclectmenu+0x175a>
															default:
																CLCD_Clear(&LCD1);
 80025c4:	4878      	ldr	r0, [pc, #480]	; (80027a8 <seclectmenu+0x1910>)
 80025c6:	f7fe f8fb 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	4876      	ldr	r0, [pc, #472]	; (80027a8 <seclectmenu+0x1910>)
 80025d0:	f7fe f878 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 80025d4:	497b      	ldr	r1, [pc, #492]	; (80027c4 <seclectmenu+0x192c>)
 80025d6:	4874      	ldr	r0, [pc, #464]	; (80027a8 <seclectmenu+0x1910>)
 80025d8:	f7fe f8db 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80025dc:	2201      	movs	r2, #1
 80025de:	2100      	movs	r1, #0
 80025e0:	4871      	ldr	r0, [pc, #452]	; (80027a8 <seclectmenu+0x1910>)
 80025e2:	f7fe f86f 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 80025e6:	497a      	ldr	r1, [pc, #488]	; (80027d0 <seclectmenu+0x1938>)
 80025e8:	486f      	ldr	r0, [pc, #444]	; (80027a8 <seclectmenu+0x1910>)
 80025ea:	f7fe f8d2 	bl	8000792 <CLCD_WriteString>
																break;
 80025ee:	e000      	b.n	80025f2 <seclectmenu+0x175a>
															}
														}
 80025f0:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80025f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f6:	4877      	ldr	r0, [pc, #476]	; (80027d4 <seclectmenu+0x193c>)
 80025f8:	f7fe fc00 	bl	8000dfc <checkbuton>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 81a9 	beq.w	8002956 <seclectmenu+0x1abe>
														{
															exitmenu = 15;
 8002604:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <seclectmenu+0x190c>)
 8002606:	220f      	movs	r2, #15
 8002608:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800260a:	7b3b      	ldrb	r3, [r7, #12]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	b2da      	uxtb	r2, r3
 8002610:	7a3b      	ldrb	r3, [r7, #8]
 8002612:	4413      	add	r3, r2
 8002614:	717b      	strb	r3, [r7, #5]
															switch (statusadd2)
 8002616:	7a3b      	ldrb	r3, [r7, #8]
 8002618:	3b01      	subs	r3, #1
 800261a:	2b03      	cmp	r3, #3
 800261c:	f200 8198 	bhi.w	8002950 <seclectmenu+0x1ab8>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <seclectmenu+0x1790>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002639 	.word	0x08002639
 800262c:	080026ef 	.word	0x080026ef
 8002630:	080027e5 	.word	0x080027e5
 8002634:	0800289b 	.word	0x0800289b
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8002638:	797b      	ldrb	r3, [r7, #5]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fd90 	bl	8003160 <CheckKey>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d125      	bne.n	8002692 <seclectmenu+0x17fa>
																{
																	CLCD_Clear(&LCD1);
 8002646:	4858      	ldr	r0, [pc, #352]	; (80027a8 <seclectmenu+0x1910>)
 8002648:	f7fe f8ba 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	4855      	ldr	r0, [pc, #340]	; (80027a8 <seclectmenu+0x1910>)
 8002652:	f7fe f837 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 1 ");
 8002656:	4960      	ldr	r1, [pc, #384]	; (80027d8 <seclectmenu+0x1940>)
 8002658:	4853      	ldr	r0, [pc, #332]	; (80027a8 <seclectmenu+0x1910>)
 800265a:	f7fe f89a 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800265e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002662:	f001 fb85 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002666:	4850      	ldr	r0, [pc, #320]	; (80027a8 <seclectmenu+0x1910>)
 8002668:	f7fe f8aa 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	2100      	movs	r1, #0
 8002670:	484d      	ldr	r0, [pc, #308]	; (80027a8 <seclectmenu+0x1910>)
 8002672:	f7fe f827 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8002676:	494e      	ldr	r1, [pc, #312]	; (80027b0 <seclectmenu+0x1918>)
 8002678:	484b      	ldr	r0, [pc, #300]	; (80027a8 <seclectmenu+0x1910>)
 800267a:	f7fe f88a 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800267e:	2201      	movs	r2, #1
 8002680:	2100      	movs	r1, #0
 8002682:	4849      	ldr	r0, [pc, #292]	; (80027a8 <seclectmenu+0x1910>)
 8002684:	f7fe f81e 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 8002688:	494a      	ldr	r1, [pc, #296]	; (80027b4 <seclectmenu+0x191c>)
 800268a:	4847      	ldr	r0, [pc, #284]	; (80027a8 <seclectmenu+0x1910>)
 800268c:	f7fe f881 	bl	8000792 <CLCD_WriteString>
 8002690:	e162      	b.n	8002958 <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fd63 	bl	8003160 <CheckKey>
 800269a:	4603      	mov	r3, r0
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fd8d 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 80026a2:	4841      	ldr	r0, [pc, #260]	; (80027a8 <seclectmenu+0x1910>)
 80026a4:	f7fe f88c 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	483e      	ldr	r0, [pc, #248]	; (80027a8 <seclectmenu+0x1910>)
 80026ae:	f7fe f809 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80026b2:	494a      	ldr	r1, [pc, #296]	; (80027dc <seclectmenu+0x1944>)
 80026b4:	483c      	ldr	r0, [pc, #240]	; (80027a8 <seclectmenu+0x1910>)
 80026b6:	f7fe f86c 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80026ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026be:	f001 fb57 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80026c2:	4839      	ldr	r0, [pc, #228]	; (80027a8 <seclectmenu+0x1910>)
 80026c4:	f7fe f87c 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	4836      	ldr	r0, [pc, #216]	; (80027a8 <seclectmenu+0x1910>)
 80026ce:	f7fd fff9 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80026d2:	4937      	ldr	r1, [pc, #220]	; (80027b0 <seclectmenu+0x1918>)
 80026d4:	4834      	ldr	r0, [pc, #208]	; (80027a8 <seclectmenu+0x1910>)
 80026d6:	f7fe f85c 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80026da:	2201      	movs	r2, #1
 80026dc:	2100      	movs	r1, #0
 80026de:	4832      	ldr	r0, [pc, #200]	; (80027a8 <seclectmenu+0x1910>)
 80026e0:	f7fd fff0 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 80026e4:	4933      	ldr	r1, [pc, #204]	; (80027b4 <seclectmenu+0x191c>)
 80026e6:	4830      	ldr	r0, [pc, #192]	; (80027a8 <seclectmenu+0x1910>)
 80026e8:	f7fe f853 	bl	8000792 <CLCD_WriteString>
																}
																break;
 80026ec:	e134      	b.n	8002958 <seclectmenu+0x1ac0>
															case 2:
																if (CheckKey(keyadd2) == 0)
 80026ee:	797b      	ldrb	r3, [r7, #5]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fd35 	bl	8003160 <CheckKey>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d125      	bne.n	8002748 <seclectmenu+0x18b0>
																{
																	CLCD_Clear(&LCD1);
 80026fc:	482a      	ldr	r0, [pc, #168]	; (80027a8 <seclectmenu+0x1910>)
 80026fe:	f7fe f85f 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	4828      	ldr	r0, [pc, #160]	; (80027a8 <seclectmenu+0x1910>)
 8002708:	f7fd ffdc 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 2 ");
 800270c:	4934      	ldr	r1, [pc, #208]	; (80027e0 <seclectmenu+0x1948>)
 800270e:	4826      	ldr	r0, [pc, #152]	; (80027a8 <seclectmenu+0x1910>)
 8002710:	f7fe f83f 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002718:	f001 fb2a 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800271c:	4822      	ldr	r0, [pc, #136]	; (80027a8 <seclectmenu+0x1910>)
 800271e:	f7fe f84f 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	4820      	ldr	r0, [pc, #128]	; (80027a8 <seclectmenu+0x1910>)
 8002728:	f7fd ffcc 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 800272c:	4922      	ldr	r1, [pc, #136]	; (80027b8 <seclectmenu+0x1920>)
 800272e:	481e      	ldr	r0, [pc, #120]	; (80027a8 <seclectmenu+0x1910>)
 8002730:	f7fe f82f 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002734:	2201      	movs	r2, #1
 8002736:	2100      	movs	r1, #0
 8002738:	481b      	ldr	r0, [pc, #108]	; (80027a8 <seclectmenu+0x1910>)
 800273a:	f7fd ffc3 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 800273e:	491f      	ldr	r1, [pc, #124]	; (80027bc <seclectmenu+0x1924>)
 8002740:	4819      	ldr	r0, [pc, #100]	; (80027a8 <seclectmenu+0x1910>)
 8002742:	f7fe f826 	bl	8000792 <CLCD_WriteString>
 8002746:	e107      	b.n	8002958 <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 8002748:	797b      	ldrb	r3, [r7, #5]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fd08 	bl	8003160 <CheckKey>
 8002750:	4603      	mov	r3, r0
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fd32 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 8002758:	4813      	ldr	r0, [pc, #76]	; (80027a8 <seclectmenu+0x1910>)
 800275a:	f7fe f831 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	4811      	ldr	r0, [pc, #68]	; (80027a8 <seclectmenu+0x1910>)
 8002764:	f7fd ffae 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002768:	491c      	ldr	r1, [pc, #112]	; (80027dc <seclectmenu+0x1944>)
 800276a:	480f      	ldr	r0, [pc, #60]	; (80027a8 <seclectmenu+0x1910>)
 800276c:	f7fe f811 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002774:	f001 fafc 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002778:	480b      	ldr	r0, [pc, #44]	; (80027a8 <seclectmenu+0x1910>)
 800277a:	f7fe f821 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <seclectmenu+0x1910>)
 8002784:	f7fd ff9e 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8002788:	490b      	ldr	r1, [pc, #44]	; (80027b8 <seclectmenu+0x1920>)
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <seclectmenu+0x1910>)
 800278c:	f7fe f801 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002790:	2201      	movs	r2, #1
 8002792:	2100      	movs	r1, #0
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <seclectmenu+0x1910>)
 8002796:	f7fd ff95 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <seclectmenu+0x1924>)
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <seclectmenu+0x1910>)
 800279e:	f7fd fff8 	bl	8000792 <CLCD_WriteString>
																}
																break;
 80027a2:	e0d9      	b.n	8002958 <seclectmenu+0x1ac0>
 80027a4:	20000000 	.word	0x20000000
 80027a8:	2000015c 	.word	0x2000015c
 80027ac:	40010c00 	.word	0x40010c00
 80027b0:	08006770 	.word	0x08006770
 80027b4:	0800677c 	.word	0x0800677c
 80027b8:	08006788 	.word	0x08006788
 80027bc:	08006794 	.word	0x08006794
 80027c0:	080067a0 	.word	0x080067a0
 80027c4:	080067ac 	.word	0x080067ac
 80027c8:	080067b8 	.word	0x080067b8
 80027cc:	080067c4 	.word	0x080067c4
 80027d0:	080067d0 	.word	0x080067d0
 80027d4:	40010800 	.word	0x40010800
 80027d8:	0800689c 	.word	0x0800689c
 80027dc:	080068ac 	.word	0x080068ac
 80027e0:	080068bc 	.word	0x080068bc
															case 3:
																if (CheckKey(keyadd2) == 0)
 80027e4:	797b      	ldrb	r3, [r7, #5]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fcba 	bl	8003160 <CheckKey>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d125      	bne.n	800283e <seclectmenu+0x19a6>
																{
																	CLCD_Clear(&LCD1);
 80027f2:	48b5      	ldr	r0, [pc, #724]	; (8002ac8 <seclectmenu+0x1c30>)
 80027f4:	f7fd ffe4 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	48b2      	ldr	r0, [pc, #712]	; (8002ac8 <seclectmenu+0x1c30>)
 80027fe:	f7fd ff61 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 3 ");
 8002802:	49b2      	ldr	r1, [pc, #712]	; (8002acc <seclectmenu+0x1c34>)
 8002804:	48b0      	ldr	r0, [pc, #704]	; (8002ac8 <seclectmenu+0x1c30>)
 8002806:	f7fd ffc4 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800280a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800280e:	f001 faaf 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002812:	48ad      	ldr	r0, [pc, #692]	; (8002ac8 <seclectmenu+0x1c30>)
 8002814:	f7fd ffd4 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	48aa      	ldr	r0, [pc, #680]	; (8002ac8 <seclectmenu+0x1c30>)
 800281e:	f7fd ff51 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8002822:	49ab      	ldr	r1, [pc, #684]	; (8002ad0 <seclectmenu+0x1c38>)
 8002824:	48a8      	ldr	r0, [pc, #672]	; (8002ac8 <seclectmenu+0x1c30>)
 8002826:	f7fd ffb4 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800282a:	2201      	movs	r2, #1
 800282c:	2100      	movs	r1, #0
 800282e:	48a6      	ldr	r0, [pc, #664]	; (8002ac8 <seclectmenu+0x1c30>)
 8002830:	f7fd ff48 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 8002834:	49a7      	ldr	r1, [pc, #668]	; (8002ad4 <seclectmenu+0x1c3c>)
 8002836:	48a4      	ldr	r0, [pc, #656]	; (8002ac8 <seclectmenu+0x1c30>)
 8002838:	f7fd ffab 	bl	8000792 <CLCD_WriteString>
 800283c:	e08c      	b.n	8002958 <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 800283e:	797b      	ldrb	r3, [r7, #5]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fc8d 	bl	8003160 <CheckKey>
 8002846:	4603      	mov	r3, r0
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fcb7 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 800284e:	489e      	ldr	r0, [pc, #632]	; (8002ac8 <seclectmenu+0x1c30>)
 8002850:	f7fd ffb6 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	489b      	ldr	r0, [pc, #620]	; (8002ac8 <seclectmenu+0x1c30>)
 800285a:	f7fd ff33 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 800285e:	499e      	ldr	r1, [pc, #632]	; (8002ad8 <seclectmenu+0x1c40>)
 8002860:	4899      	ldr	r0, [pc, #612]	; (8002ac8 <seclectmenu+0x1c30>)
 8002862:	f7fd ff96 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286a:	f001 fa81 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800286e:	4896      	ldr	r0, [pc, #600]	; (8002ac8 <seclectmenu+0x1c30>)
 8002870:	f7fd ffa6 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	4893      	ldr	r0, [pc, #588]	; (8002ac8 <seclectmenu+0x1c30>)
 800287a:	f7fd ff23 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800287e:	4994      	ldr	r1, [pc, #592]	; (8002ad0 <seclectmenu+0x1c38>)
 8002880:	4891      	ldr	r0, [pc, #580]	; (8002ac8 <seclectmenu+0x1c30>)
 8002882:	f7fd ff86 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002886:	2201      	movs	r2, #1
 8002888:	2100      	movs	r1, #0
 800288a:	488f      	ldr	r0, [pc, #572]	; (8002ac8 <seclectmenu+0x1c30>)
 800288c:	f7fd ff1a 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 8002890:	4990      	ldr	r1, [pc, #576]	; (8002ad4 <seclectmenu+0x1c3c>)
 8002892:	488d      	ldr	r0, [pc, #564]	; (8002ac8 <seclectmenu+0x1c30>)
 8002894:	f7fd ff7d 	bl	8000792 <CLCD_WriteString>
																}
																break;
 8002898:	e05e      	b.n	8002958 <seclectmenu+0x1ac0>
															case 4:
																if (CheckKey(keyadd2) == 0)
 800289a:	797b      	ldrb	r3, [r7, #5]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fc5f 	bl	8003160 <CheckKey>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d125      	bne.n	80028f4 <seclectmenu+0x1a5c>
																{
																	CLCD_Clear(&LCD1);
 80028a8:	4887      	ldr	r0, [pc, #540]	; (8002ac8 <seclectmenu+0x1c30>)
 80028aa:	f7fd ff89 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	4885      	ldr	r0, [pc, #532]	; (8002ac8 <seclectmenu+0x1c30>)
 80028b4:	f7fd ff06 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 4 ");
 80028b8:	4988      	ldr	r1, [pc, #544]	; (8002adc <seclectmenu+0x1c44>)
 80028ba:	4883      	ldr	r0, [pc, #524]	; (8002ac8 <seclectmenu+0x1c30>)
 80028bc:	f7fd ff69 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80028c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c4:	f001 fa54 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80028c8:	487f      	ldr	r0, [pc, #508]	; (8002ac8 <seclectmenu+0x1c30>)
 80028ca:	f7fd ff79 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	487d      	ldr	r0, [pc, #500]	; (8002ac8 <seclectmenu+0x1c30>)
 80028d4:	f7fd fef6 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80028d8:	4981      	ldr	r1, [pc, #516]	; (8002ae0 <seclectmenu+0x1c48>)
 80028da:	487b      	ldr	r0, [pc, #492]	; (8002ac8 <seclectmenu+0x1c30>)
 80028dc:	f7fd ff59 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	2100      	movs	r1, #0
 80028e4:	4878      	ldr	r0, [pc, #480]	; (8002ac8 <seclectmenu+0x1c30>)
 80028e6:	f7fd feed 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 80028ea:	497e      	ldr	r1, [pc, #504]	; (8002ae4 <seclectmenu+0x1c4c>)
 80028ec:	4876      	ldr	r0, [pc, #472]	; (8002ac8 <seclectmenu+0x1c30>)
 80028ee:	f7fd ff50 	bl	8000792 <CLCD_WriteString>
 80028f2:	e031      	b.n	8002958 <seclectmenu+0x1ac0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 80028f4:	797b      	ldrb	r3, [r7, #5]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fc32 	bl	8003160 <CheckKey>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fc5c 	bl	80031bc <removeuid>
																	CLCD_Clear(&LCD1);
 8002904:	4870      	ldr	r0, [pc, #448]	; (8002ac8 <seclectmenu+0x1c30>)
 8002906:	f7fd ff5b 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	486e      	ldr	r0, [pc, #440]	; (8002ac8 <seclectmenu+0x1c30>)
 8002910:	f7fd fed8 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002914:	4970      	ldr	r1, [pc, #448]	; (8002ad8 <seclectmenu+0x1c40>)
 8002916:	486c      	ldr	r0, [pc, #432]	; (8002ac8 <seclectmenu+0x1c30>)
 8002918:	f7fd ff3b 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800291c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002920:	f001 fa26 	bl	8003d70 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002924:	4868      	ldr	r0, [pc, #416]	; (8002ac8 <seclectmenu+0x1c30>)
 8002926:	f7fd ff4b 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	4866      	ldr	r0, [pc, #408]	; (8002ac8 <seclectmenu+0x1c30>)
 8002930:	f7fd fec8 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8002934:	496a      	ldr	r1, [pc, #424]	; (8002ae0 <seclectmenu+0x1c48>)
 8002936:	4864      	ldr	r0, [pc, #400]	; (8002ac8 <seclectmenu+0x1c30>)
 8002938:	f7fd ff2b 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800293c:	2201      	movs	r2, #1
 800293e:	2100      	movs	r1, #0
 8002940:	4861      	ldr	r0, [pc, #388]	; (8002ac8 <seclectmenu+0x1c30>)
 8002942:	f7fd febf 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 8002946:	4967      	ldr	r1, [pc, #412]	; (8002ae4 <seclectmenu+0x1c4c>)
 8002948:	485f      	ldr	r0, [pc, #380]	; (8002ac8 <seclectmenu+0x1c30>)
 800294a:	f7fd ff22 	bl	8000792 <CLCD_WriteString>
																}
																break;
 800294e:	e003      	b.n	8002958 <seclectmenu+0x1ac0>
															default:
																back12 = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	71fb      	strb	r3, [r7, #7]
																break;
 8002954:	e000      	b.n	8002958 <seclectmenu+0x1ac0>
															}
														}
 8002956:	bf00      	nop
													while (back12 == 1)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	2b01      	cmp	r3, #1
 800295c:	f43f ada8 	beq.w	80024b0 <seclectmenu+0x1618>
													}
													CLCD_Clear(&LCD1);
 8002960:	4859      	ldr	r0, [pc, #356]	; (8002ac8 <seclectmenu+0x1c30>)
 8002962:	f7fd ff2d 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	4857      	ldr	r0, [pc, #348]	; (8002ac8 <seclectmenu+0x1c30>)
 800296c:	f7fd feaa 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8002970:	495d      	ldr	r1, [pc, #372]	; (8002ae8 <seclectmenu+0x1c50>)
 8002972:	4855      	ldr	r0, [pc, #340]	; (8002ac8 <seclectmenu+0x1c30>)
 8002974:	f7fd ff0d 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002978:	2201      	movs	r2, #1
 800297a:	2100      	movs	r1, #0
 800297c:	4852      	ldr	r0, [pc, #328]	; (8002ac8 <seclectmenu+0x1c30>)
 800297e:	f7fd fea1 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8002982:	495a      	ldr	r1, [pc, #360]	; (8002aec <seclectmenu+0x1c54>)
 8002984:	4850      	ldr	r0, [pc, #320]	; (8002ac8 <seclectmenu+0x1c30>)
 8002986:	f7fd ff04 	bl	8000792 <CLCD_WriteString>
													break;
 800298a:	e003      	b.n	8002994 <seclectmenu+0x1afc>
												default:
													backrm10 = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	72fb      	strb	r3, [r7, #11]
													break;
 8002990:	e000      	b.n	8002994 <seclectmenu+0x1afc>
												}
											}
 8002992:	bf00      	nop
										while (backrm10 == 1)
 8002994:	7afb      	ldrb	r3, [r7, #11]
 8002996:	2b01      	cmp	r3, #1
 8002998:	f43f a9f8 	beq.w	8001d8c <seclectmenu+0xef4>
										}
										CLCD_Clear(&LCD1);
 800299c:	484a      	ldr	r0, [pc, #296]	; (8002ac8 <seclectmenu+0x1c30>)
 800299e:	f7fd ff0f 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	4848      	ldr	r0, [pc, #288]	; (8002ac8 <seclectmenu+0x1c30>)
 80029a8:	f7fd fe8c 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> CHON THE");
 80029ac:	4950      	ldr	r1, [pc, #320]	; (8002af0 <seclectmenu+0x1c58>)
 80029ae:	4846      	ldr	r0, [pc, #280]	; (8002ac8 <seclectmenu+0x1c30>)
 80029b0:	f7fd feef 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80029b4:	2201      	movs	r2, #1
 80029b6:	2100      	movs	r1, #0
 80029b8:	4843      	ldr	r0, [pc, #268]	; (8002ac8 <seclectmenu+0x1c30>)
 80029ba:	f7fd fe83 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 80029be:	494d      	ldr	r1, [pc, #308]	; (8002af4 <seclectmenu+0x1c5c>)
 80029c0:	4841      	ldr	r0, [pc, #260]	; (8002ac8 <seclectmenu+0x1c30>)
 80029c2:	f7fd fee6 	bl	8000792 <CLCD_WriteString>
										break;
 80029c6:	e0f0      	b.n	8002baa <seclectmenu+0x1d12>
									case 1:
										CLCD_Clear(&LCD1);
 80029c8:	483f      	ldr	r0, [pc, #252]	; (8002ac8 <seclectmenu+0x1c30>)
 80029ca:	f7fd fef9 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	483d      	ldr	r0, [pc, #244]	; (8002ac8 <seclectmenu+0x1c30>)
 80029d4:	f7fd fe76 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "QUET THE");
 80029d8:	4947      	ldr	r1, [pc, #284]	; (8002af8 <seclectmenu+0x1c60>)
 80029da:	483b      	ldr	r0, [pc, #236]	; (8002ac8 <seclectmenu+0x1c30>)
 80029dc:	f7fd fed9 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80029e0:	2201      	movs	r2, #1
 80029e2:	2100      	movs	r1, #0
 80029e4:	4838      	ldr	r0, [pc, #224]	; (8002ac8 <seclectmenu+0x1c30>)
 80029e6:	f7fd fe6d 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 80029ea:	4944      	ldr	r1, [pc, #272]	; (8002afc <seclectmenu+0x1c64>)
 80029ec:	4836      	ldr	r0, [pc, #216]	; (8002ac8 <seclectmenu+0x1c30>)
 80029ee:	f7fd fed0 	bl	8000792 <CLCD_WriteString>
										uint8_t rmquet = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80029f6:	e0ba      	b.n	8002b6e <seclectmenu+0x1cd6>
										{
											if (TM_MFRC522_Check(CardID) == MI_OK)
 80029f8:	4841      	ldr	r0, [pc, #260]	; (8002b00 <seclectmenu+0x1c68>)
 80029fa:	f000 fdd1 	bl	80035a0 <TM_MFRC522_Check>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 80aa 	bne.w	8002b5a <seclectmenu+0x1cc2>
											{
												HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002a06:	2201      	movs	r2, #1
 8002a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a0c:	483d      	ldr	r0, [pc, #244]	; (8002b04 <seclectmenu+0x1c6c>)
 8002a0e:	f001 fe7c 	bl	800470a <HAL_GPIO_WritePin>
												HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002a12:	2201      	movs	r2, #1
 8002a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a18:	483a      	ldr	r0, [pc, #232]	; (8002b04 <seclectmenu+0x1c6c>)
 8002a1a:	f001 fe76 	bl	800470a <HAL_GPIO_WritePin>
												HAL_Delay(delayloa);
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <seclectmenu+0x1c70>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f9a4 	bl	8003d70 <HAL_Delay>
												HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a2e:	4835      	ldr	r0, [pc, #212]	; (8002b04 <seclectmenu+0x1c6c>)
 8002a30:	f001 fe6b 	bl	800470a <HAL_GPIO_WritePin>
												HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a3a:	4832      	ldr	r0, [pc, #200]	; (8002b04 <seclectmenu+0x1c6c>)
 8002a3c:	f001 fe65 	bl	800470a <HAL_GPIO_WritePin>
												if (CheckListUID(CardID) != 0)
 8002a40:	482f      	ldr	r0, [pc, #188]	; (8002b00 <seclectmenu+0x1c68>)
 8002a42:	f000 f967 	bl	8002d14 <CheckListUID>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d061      	beq.n	8002b10 <seclectmenu+0x1c78>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8002a4c:	482c      	ldr	r0, [pc, #176]	; (8002b00 <seclectmenu+0x1c68>)
 8002a4e:	f000 f961 	bl	8002d14 <CheckListUID>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fb83 	bl	8003160 <CheckKey>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fbad 	bl	80031bc <removeuid>
													CLCD_Clear(&LCD1);
 8002a62:	4819      	ldr	r0, [pc, #100]	; (8002ac8 <seclectmenu+0x1c30>)
 8002a64:	f7fd feac 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4816      	ldr	r0, [pc, #88]	; (8002ac8 <seclectmenu+0x1c30>)
 8002a6e:	f7fd fe29 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002a72:	4919      	ldr	r1, [pc, #100]	; (8002ad8 <seclectmenu+0x1c40>)
 8002a74:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <seclectmenu+0x1c30>)
 8002a76:	f7fd fe8c 	bl	8000792 <CLCD_WriteString>
													HAL_Delay(1000);
 8002a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a7e:	f001 f977 	bl	8003d70 <HAL_Delay>
													if (checkcountUID() == 0)
 8002a82:	f000 f977 	bl	8002d74 <checkcountUID>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <seclectmenu+0x1c04>
													{
														startadd();
 8002a8c:	f000 fba4 	bl	80031d8 <startadd>
														rmquet = 1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <seclectmenu+0x1c74>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
														return;
 8002a9a:	e0ef      	b.n	8002c7c <seclectmenu+0x1de4>
													}else{
														CLCD_Clear(&LCD1);
 8002a9c:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <seclectmenu+0x1c30>)
 8002a9e:	f7fd fe8f 	bl	80007c0 <CLCD_Clear>
														CLCD_SetCursor(&LCD1, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <seclectmenu+0x1c30>)
 8002aa8:	f7fd fe0c 	bl	80006c4 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "QUET THE");
 8002aac:	4912      	ldr	r1, [pc, #72]	; (8002af8 <seclectmenu+0x1c60>)
 8002aae:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <seclectmenu+0x1c30>)
 8002ab0:	f7fd fe6f 	bl	8000792 <CLCD_WriteString>
														CLCD_SetCursor(&LCD1, 0, 1);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <seclectmenu+0x1c30>)
 8002aba:	f7fd fe03 	bl	80006c4 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "=>  BACK");
 8002abe:	490f      	ldr	r1, [pc, #60]	; (8002afc <seclectmenu+0x1c64>)
 8002ac0:	4801      	ldr	r0, [pc, #4]	; (8002ac8 <seclectmenu+0x1c30>)
 8002ac2:	f7fd fe66 	bl	8000792 <CLCD_WriteString>
 8002ac6:	e048      	b.n	8002b5a <seclectmenu+0x1cc2>
 8002ac8:	2000015c 	.word	0x2000015c
 8002acc:	080068cc 	.word	0x080068cc
 8002ad0:	080067a0 	.word	0x080067a0
 8002ad4:	080067ac 	.word	0x080067ac
 8002ad8:	080068ac 	.word	0x080068ac
 8002adc:	080068dc 	.word	0x080068dc
 8002ae0:	080067b8 	.word	0x080067b8
 8002ae4:	080067c4 	.word	0x080067c4
 8002ae8:	08006720 	.word	0x08006720
 8002aec:	08006758 	.word	0x08006758
 8002af0:	0800686c 	.word	0x0800686c
 8002af4:	08006878 	.word	0x08006878
 8002af8:	080068ec 	.word	0x080068ec
 8002afc:	080067d0 	.word	0x080067d0
 8002b00:	2000014c 	.word	0x2000014c
 8002b04:	40010c00 	.word	0x40010c00
 8002b08:	20000018 	.word	0x20000018
 8002b0c:	20000000 	.word	0x20000000
													}

												}
												else
												{
													CLCD_Clear(&LCD1);
 8002b10:	485c      	ldr	r0, [pc, #368]	; (8002c84 <seclectmenu+0x1dec>)
 8002b12:	f7fd fe55 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	485a      	ldr	r0, [pc, #360]	; (8002c84 <seclectmenu+0x1dec>)
 8002b1c:	f7fd fdd2 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "THE CHUA THEM");
 8002b20:	4959      	ldr	r1, [pc, #356]	; (8002c88 <seclectmenu+0x1df0>)
 8002b22:	4858      	ldr	r0, [pc, #352]	; (8002c84 <seclectmenu+0x1dec>)
 8002b24:	f7fd fe35 	bl	8000792 <CLCD_WriteString>
													HAL_Delay(1000);
 8002b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b2c:	f001 f920 	bl	8003d70 <HAL_Delay>
													CLCD_Clear(&LCD1);
 8002b30:	4854      	ldr	r0, [pc, #336]	; (8002c84 <seclectmenu+0x1dec>)
 8002b32:	f7fd fe45 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4852      	ldr	r0, [pc, #328]	; (8002c84 <seclectmenu+0x1dec>)
 8002b3c:	f7fd fdc2 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "QUET THE");
 8002b40:	4952      	ldr	r1, [pc, #328]	; (8002c8c <seclectmenu+0x1df4>)
 8002b42:	4850      	ldr	r0, [pc, #320]	; (8002c84 <seclectmenu+0x1dec>)
 8002b44:	f7fd fe25 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	484d      	ldr	r0, [pc, #308]	; (8002c84 <seclectmenu+0x1dec>)
 8002b4e:	f7fd fdb9 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  BACK");
 8002b52:	494f      	ldr	r1, [pc, #316]	; (8002c90 <seclectmenu+0x1df8>)
 8002b54:	484b      	ldr	r0, [pc, #300]	; (8002c84 <seclectmenu+0x1dec>)
 8002b56:	f7fd fe1c 	bl	8000792 <CLCD_WriteString>
												}
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5e:	484d      	ldr	r0, [pc, #308]	; (8002c94 <seclectmenu+0x1dfc>)
 8002b60:	f7fe f94c 	bl	8000dfc <checkbuton>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <seclectmenu+0x1cd6>
											{
												rmquet = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f47f af41 	bne.w	80029f8 <seclectmenu+0x1b60>
											}
										}
										CLCD_Clear(&LCD1);
 8002b76:	4843      	ldr	r0, [pc, #268]	; (8002c84 <seclectmenu+0x1dec>)
 8002b78:	f7fd fe22 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4840      	ldr	r0, [pc, #256]	; (8002c84 <seclectmenu+0x1dec>)
 8002b82:	f7fd fd9f 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   CHON THE");
 8002b86:	4944      	ldr	r1, [pc, #272]	; (8002c98 <seclectmenu+0x1e00>)
 8002b88:	483e      	ldr	r0, [pc, #248]	; (8002c84 <seclectmenu+0x1dec>)
 8002b8a:	f7fd fe02 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002b8e:	2201      	movs	r2, #1
 8002b90:	2100      	movs	r1, #0
 8002b92:	483c      	ldr	r0, [pc, #240]	; (8002c84 <seclectmenu+0x1dec>)
 8002b94:	f7fd fd96 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> QUET THE");
 8002b98:	4940      	ldr	r1, [pc, #256]	; (8002c9c <seclectmenu+0x1e04>)
 8002b9a:	483a      	ldr	r0, [pc, #232]	; (8002c84 <seclectmenu+0x1dec>)
 8002b9c:	f7fd fdf9 	bl	8000792 <CLCD_WriteString>
										break;
 8002ba0:	e003      	b.n	8002baa <seclectmenu+0x1d12>
									default:
										backrm1 = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	737b      	strb	r3, [r7, #13]
										break;
 8002ba6:	e000      	b.n	8002baa <seclectmenu+0x1d12>
									}
								}
 8002ba8:	bf00      	nop
							while (backrm1 == 1)
 8002baa:	7b7b      	ldrb	r3, [r7, #13]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f43f a856 	beq.w	8001c5e <seclectmenu+0xdc6>
							}
							CLCD_Clear(&LCD1);
 8002bb2:	4834      	ldr	r0, [pc, #208]	; (8002c84 <seclectmenu+0x1dec>)
 8002bb4:	f7fd fe04 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4831      	ldr	r0, [pc, #196]	; (8002c84 <seclectmenu+0x1dec>)
 8002bbe:	f7fd fd81 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA 1 THE");
 8002bc2:	4937      	ldr	r1, [pc, #220]	; (8002ca0 <seclectmenu+0x1e08>)
 8002bc4:	482f      	ldr	r0, [pc, #188]	; (8002c84 <seclectmenu+0x1dec>)
 8002bc6:	f7fd fde4 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2100      	movs	r1, #0
 8002bce:	482d      	ldr	r0, [pc, #180]	; (8002c84 <seclectmenu+0x1dec>)
 8002bd0:	f7fd fd78 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8002bd4:	4933      	ldr	r1, [pc, #204]	; (8002ca4 <seclectmenu+0x1e0c>)
 8002bd6:	482b      	ldr	r0, [pc, #172]	; (8002c84 <seclectmenu+0x1dec>)
 8002bd8:	f7fd fddb 	bl	8000792 <CLCD_WriteString>
							break;
 8002bdc:	e00b      	b.n	8002bf6 <seclectmenu+0x1d5e>
						case 1:
							resetflash();
 8002bde:	f000 fc71 	bl	80034c4 <resetflash>
							startadd();
 8002be2:	f000 faf9 	bl	80031d8 <startadd>
							exitmenu = 0;
 8002be6:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <seclectmenu+0x1e10>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
							break;
 8002bec:	e003      	b.n	8002bf6 <seclectmenu+0x1d5e>
						default:
							backrm = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
							break;
 8002bf2:	e000      	b.n	8002bf6 <seclectmenu+0x1d5e>
						}
					}
 8002bf4:	bf00      	nop
				while (backrm == 1)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f43e af6d 	beq.w	8001ad8 <seclectmenu+0xc40>
				}
				CLCD_Clear(&LCD1);
 8002bfe:	4821      	ldr	r0, [pc, #132]	; (8002c84 <seclectmenu+0x1dec>)
 8002c00:	f7fd fdde 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	481e      	ldr	r0, [pc, #120]	; (8002c84 <seclectmenu+0x1dec>)
 8002c0a:	f7fd fd5b 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    THEM THE");
 8002c0e:	4927      	ldr	r1, [pc, #156]	; (8002cac <seclectmenu+0x1e14>)
 8002c10:	481c      	ldr	r0, [pc, #112]	; (8002c84 <seclectmenu+0x1dec>)
 8002c12:	f7fd fdbe 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002c16:	2201      	movs	r2, #1
 8002c18:	2100      	movs	r1, #0
 8002c1a:	481a      	ldr	r0, [pc, #104]	; (8002c84 <seclectmenu+0x1dec>)
 8002c1c:	f7fd fd52 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  XOA THE");
 8002c20:	4923      	ldr	r1, [pc, #140]	; (8002cb0 <seclectmenu+0x1e18>)
 8002c22:	4818      	ldr	r0, [pc, #96]	; (8002c84 <seclectmenu+0x1dec>)
 8002c24:	f7fd fdb5 	bl	8000792 <CLCD_WriteString>
				break;
 8002c28:	e01c      	b.n	8002c64 <seclectmenu+0x1dcc>
			case 2:
				checkthe();
 8002c2a:	f000 f987 	bl	8002f3c <checkthe>
				CLCD_Clear(&LCD1);
 8002c2e:	4815      	ldr	r0, [pc, #84]	; (8002c84 <seclectmenu+0x1dec>)
 8002c30:	f7fd fdc6 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	4812      	ldr	r0, [pc, #72]	; (8002c84 <seclectmenu+0x1dec>)
 8002c3a:	f7fd fd43 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8002c3e:	491d      	ldr	r1, [pc, #116]	; (8002cb4 <seclectmenu+0x1e1c>)
 8002c40:	4810      	ldr	r0, [pc, #64]	; (8002c84 <seclectmenu+0x1dec>)
 8002c42:	f7fd fda6 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002c46:	2201      	movs	r2, #1
 8002c48:	2100      	movs	r1, #0
 8002c4a:	480e      	ldr	r0, [pc, #56]	; (8002c84 <seclectmenu+0x1dec>)
 8002c4c:	f7fd fd3a 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  TRA THE");
 8002c50:	4919      	ldr	r1, [pc, #100]	; (8002cb8 <seclectmenu+0x1e20>)
 8002c52:	480c      	ldr	r0, [pc, #48]	; (8002c84 <seclectmenu+0x1dec>)
 8002c54:	f7fd fd9d 	bl	8000792 <CLCD_WriteString>
				break;
 8002c58:	e004      	b.n	8002c64 <seclectmenu+0x1dcc>
				break;
			default:
				exitmenu = 0;
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <seclectmenu+0x1e10>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
				break;
 8002c60:	e000      	b.n	8002c64 <seclectmenu+0x1dcc>
			}
		}
 8002c62:	bf00      	nop
	while (exitmenu )
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <seclectmenu+0x1e10>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f47e a934 	bne.w	8000ed6 <seclectmenu+0x3e>
	}
	CLCD_Clear(&LCD1);
 8002c6e:	4805      	ldr	r0, [pc, #20]	; (8002c84 <seclectmenu+0x1dec>)
 8002c70:	f7fd fda6 	bl	80007c0 <CLCD_Clear>
	HAL_Delay(1000);
 8002c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c78:	f001 f87a 	bl	8003d70 <HAL_Delay>
}
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000015c 	.word	0x2000015c
 8002c88:	080068f8 	.word	0x080068f8
 8002c8c:	080068ec 	.word	0x080068ec
 8002c90:	080067d0 	.word	0x080067d0
 8002c94:	40010800 	.word	0x40010800
 8002c98:	08006884 	.word	0x08006884
 8002c9c:	08006890 	.word	0x08006890
 8002ca0:	0800683c 	.word	0x0800683c
 8002ca4:	0800684c 	.word	0x0800684c
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	080066b8 	.word	0x080066b8
 8002cb0:	080066e4 	.word	0x080066e4
 8002cb4:	080066d8 	.word	0x080066d8
 8002cb8:	080066f0 	.word	0x080066f0

08002cbc <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	2208      	movs	r2, #8
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	f7fd fab8 	bl	8000244 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002cd4:	7cbb      	ldrb	r3, [r7, #18]
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d001      	beq.n	8002cde <CheckUID+0x22>
		return 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e016      	b.n	8002d0c <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]
 8002ce2:	e00f      	b.n	8002d04 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	3318      	adds	r3, #24
 8002cf0:	443b      	add	r3, r7
 8002cf2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <CheckUID+0x42>
			return 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e006      	b.n	8002d0c <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	3301      	adds	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d9ec      	bls.n	8002ce4 <CheckUID+0x28>
	}
	return 1;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <CheckListUID+0x5c>)
 8002d1e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002d20:	e018      	b.n	8002d54 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3306      	adds	r3, #6
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fa73 	bl	8000212 <Flash_Read_2Byte>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d10a      	bne.n	8002d4e <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002d38:	68f9      	ldr	r1, [r7, #12]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffbe 	bl	8002cbc <CheckUID>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d103      	bne.n	8002d4e <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3305      	adds	r3, #5
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	e00b      	b.n	8002d66 <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3308      	adds	r3, #8
 8002d52:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3305      	adds	r3, #5
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fa4e 	bl	80001fa <Flash_Read_Byte>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2bff      	cmp	r3, #255	; 0xff
 8002d62:	d1de      	bne.n	8002d22 <CheckListUID+0xe>
	}
	return 0;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	0800a000 	.word	0x0800a000

08002d74 <checkcountUID>:
uint8_t checkcountUID(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <checkcountUID+0x60>)
 8002d7c:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002d82:	e01a      	b.n	8002dba <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3306      	adds	r3, #6
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fa42 	bl	8000212 <Flash_Read_2Byte>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d10c      	bne.n	8002db4 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3305      	adds	r3, #5
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fa2b 	bl	80001fa <Flash_Read_Byte>
 8002da4:	4603      	mov	r3, r0
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <checkcountUID+0x40>
			{
				count++;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	3301      	adds	r3, #1
 8002db2:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3308      	adds	r3, #8
 8002db8:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3305      	adds	r3, #5
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa1b 	bl	80001fa <Flash_Read_Byte>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2bff      	cmp	r3, #255	; 0xff
 8002dc8:	d1dc      	bne.n	8002d84 <checkcountUID+0x10>
	}
	return count;
 8002dca:	78fb      	ldrb	r3, [r7, #3]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	0800a000 	.word	0x0800a000

08002dd8 <adduid>:
void adduid(uint8_t key)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002de2:	f000 faa1 	bl	8003328 <setaddress>
	CLCD_Clear(&LCD1);
 8002de6:	484a      	ldr	r0, [pc, #296]	; (8002f10 <adduid+0x138>)
 8002de8:	f7fd fcea 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	4847      	ldr	r0, [pc, #284]	; (8002f10 <adduid+0x138>)
 8002df2:	f7fd fc67 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "QUET THE");
 8002df6:	4947      	ldr	r1, [pc, #284]	; (8002f14 <adduid+0x13c>)
 8002df8:	4845      	ldr	r0, [pc, #276]	; (8002f10 <adduid+0x138>)
 8002dfa:	f7fd fcca 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	2100      	movs	r1, #0
 8002e02:	4843      	ldr	r0, [pc, #268]	; (8002f10 <adduid+0x138>)
 8002e04:	f7fd fc5e 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002e08:	4943      	ldr	r1, [pc, #268]	; (8002f18 <adduid+0x140>)
 8002e0a:	4841      	ldr	r0, [pc, #260]	; (8002f10 <adduid+0x138>)
 8002e0c:	f7fd fcc1 	bl	8000792 <CLCD_WriteString>
	while (exitmenu)
 8002e10:	e075      	b.n	8002efe <adduid+0x126>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002e12:	4842      	ldr	r0, [pc, #264]	; (8002f1c <adduid+0x144>)
 8002e14:	f000 fbc4 	bl	80035a0 <TM_MFRC522_Check>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d167      	bne.n	8002eee <adduid+0x116>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e24:	483e      	ldr	r0, [pc, #248]	; (8002f20 <adduid+0x148>)
 8002e26:	f001 fc70 	bl	800470a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e30:	483b      	ldr	r0, [pc, #236]	; (8002f20 <adduid+0x148>)
 8002e32:	f001 fc6a 	bl	800470a <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <adduid+0x14c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 ff98 	bl	8003d70 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e46:	4836      	ldr	r0, [pc, #216]	; (8002f20 <adduid+0x148>)
 8002e48:	f001 fc5f 	bl	800470a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e52:	4833      	ldr	r0, [pc, #204]	; (8002f20 <adduid+0x148>)
 8002e54:	f001 fc59 	bl	800470a <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) == 0)
 8002e58:	4830      	ldr	r0, [pc, #192]	; (8002f1c <adduid+0x144>)
 8002e5a:	f7ff ff5b 	bl	8002d14 <CheckListUID>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d11f      	bne.n	8002ea4 <adduid+0xcc>
			{
				CardID[5] = key;
 8002e64:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <adduid+0x144>)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <adduid+0x150>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2206      	movs	r2, #6
 8002e70:	492a      	ldr	r1, [pc, #168]	; (8002f1c <adduid+0x144>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd f99e 	bl	80001b4 <Flash_Write_Array>
				AddressUID += 8;
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <adduid+0x150>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <adduid+0x150>)
 8002e80:	6013      	str	r3, [r2, #0]
				CLCD_Clear(&LCD1);
 8002e82:	4823      	ldr	r0, [pc, #140]	; (8002f10 <adduid+0x138>)
 8002e84:	f7fd fc9c 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4820      	ldr	r0, [pc, #128]	; (8002f10 <adduid+0x138>)
 8002e8e:	f7fd fc19 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THANH CONG");
 8002e92:	4926      	ldr	r1, [pc, #152]	; (8002f2c <adduid+0x154>)
 8002e94:	481e      	ldr	r0, [pc, #120]	; (8002f10 <adduid+0x138>)
 8002e96:	f7fd fc7c 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9e:	f000 ff67 	bl	8003d70 <HAL_Delay>
				return;
 8002ea2:	e032      	b.n	8002f0a <adduid+0x132>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8002ea4:	481a      	ldr	r0, [pc, #104]	; (8002f10 <adduid+0x138>)
 8002ea6:	f7fd fc8b 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	4818      	ldr	r0, [pc, #96]	; (8002f10 <adduid+0x138>)
 8002eb0:	f7fd fc08 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THE DA TON TAI");
 8002eb4:	491e      	ldr	r1, [pc, #120]	; (8002f30 <adduid+0x158>)
 8002eb6:	4816      	ldr	r0, [pc, #88]	; (8002f10 <adduid+0x138>)
 8002eb8:	f7fd fc6b 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec0:	f000 ff56 	bl	8003d70 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002ec4:	4812      	ldr	r0, [pc, #72]	; (8002f10 <adduid+0x138>)
 8002ec6:	f7fd fc7b 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4810      	ldr	r0, [pc, #64]	; (8002f10 <adduid+0x138>)
 8002ed0:	f7fd fbf8 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8002ed4:	490f      	ldr	r1, [pc, #60]	; (8002f14 <adduid+0x13c>)
 8002ed6:	480e      	ldr	r0, [pc, #56]	; (8002f10 <adduid+0x138>)
 8002ed8:	f7fd fc5b 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002edc:	2201      	movs	r2, #1
 8002ede:	2100      	movs	r1, #0
 8002ee0:	480b      	ldr	r0, [pc, #44]	; (8002f10 <adduid+0x138>)
 8002ee2:	f7fd fbef 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002ee6:	490c      	ldr	r1, [pc, #48]	; (8002f18 <adduid+0x140>)
 8002ee8:	4809      	ldr	r0, [pc, #36]	; (8002f10 <adduid+0x138>)
 8002eea:	f7fd fc52 	bl	8000792 <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ef2:	4810      	ldr	r0, [pc, #64]	; (8002f34 <adduid+0x15c>)
 8002ef4:	f7fd ff82 	bl	8000dfc <checkbuton>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d004      	beq.n	8002f08 <adduid+0x130>
	while (exitmenu)
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <adduid+0x160>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d185      	bne.n	8002e12 <adduid+0x3a>
 8002f06:	e000      	b.n	8002f0a <adduid+0x132>
		{
			return;
 8002f08:	bf00      	nop
		}
	}
}
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000015c 	.word	0x2000015c
 8002f14:	080068ec 	.word	0x080068ec
 8002f18:	080067d0 	.word	0x080067d0
 8002f1c:	2000014c 	.word	0x2000014c
 8002f20:	40010c00 	.word	0x40010c00
 8002f24:	20000018 	.word	0x20000018
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	08006908 	.word	0x08006908
 8002f30:	08006914 	.word	0x08006914
 8002f34:	40010800 	.word	0x40010800
 8002f38:	20000000 	.word	0x20000000

08002f3c <checkthe>:
void checkthe(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002f42:	4b78      	ldr	r3, [pc, #480]	; (8003124 <checkthe+0x1e8>)
 8002f44:	221e      	movs	r2, #30
 8002f46:	701a      	strb	r2, [r3, #0]
	CLCD_Clear(&LCD1);
 8002f48:	4877      	ldr	r0, [pc, #476]	; (8003128 <checkthe+0x1ec>)
 8002f4a:	f7fd fc39 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	4875      	ldr	r0, [pc, #468]	; (8003128 <checkthe+0x1ec>)
 8002f54:	f7fd fbb6 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "QUET THE");
 8002f58:	4974      	ldr	r1, [pc, #464]	; (800312c <checkthe+0x1f0>)
 8002f5a:	4873      	ldr	r0, [pc, #460]	; (8003128 <checkthe+0x1ec>)
 8002f5c:	f7fd fc19 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002f60:	2201      	movs	r2, #1
 8002f62:	2100      	movs	r1, #0
 8002f64:	4870      	ldr	r0, [pc, #448]	; (8003128 <checkthe+0x1ec>)
 8002f66:	f7fd fbad 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002f6a:	4971      	ldr	r1, [pc, #452]	; (8003130 <checkthe+0x1f4>)
 8002f6c:	486e      	ldr	r0, [pc, #440]	; (8003128 <checkthe+0x1ec>)
 8002f6e:	f7fd fc10 	bl	8000792 <CLCD_WriteString>
	while (exitmenu )
 8002f72:	e0cc      	b.n	800310e <checkthe+0x1d2>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002f74:	486f      	ldr	r0, [pc, #444]	; (8003134 <checkthe+0x1f8>)
 8002f76:	f000 fb13 	bl	80035a0 <TM_MFRC522_Check>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 80be 	bne.w	80030fe <checkthe+0x1c2>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002f82:	2201      	movs	r2, #1
 8002f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f88:	486b      	ldr	r0, [pc, #428]	; (8003138 <checkthe+0x1fc>)
 8002f8a:	f001 fbbe 	bl	800470a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f94:	4868      	ldr	r0, [pc, #416]	; (8003138 <checkthe+0x1fc>)
 8002f96:	f001 fbb8 	bl	800470a <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 8002f9a:	4b68      	ldr	r3, [pc, #416]	; (800313c <checkthe+0x200>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fee6 	bl	8003d70 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002faa:	4863      	ldr	r0, [pc, #396]	; (8003138 <checkthe+0x1fc>)
 8002fac:	f001 fbad 	bl	800470a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fb6:	4860      	ldr	r0, [pc, #384]	; (8003138 <checkthe+0x1fc>)
 8002fb8:	f001 fba7 	bl	800470a <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) == 0)
 8002fbc:	485d      	ldr	r0, [pc, #372]	; (8003134 <checkthe+0x1f8>)
 8002fbe:	f7ff fea9 	bl	8002d14 <CheckListUID>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d129      	bne.n	800301c <checkthe+0xe0>
			{
				CLCD_Clear(&LCD1);
 8002fc8:	4857      	ldr	r0, [pc, #348]	; (8003128 <checkthe+0x1ec>)
 8002fca:	f7fd fbf9 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4855      	ldr	r0, [pc, #340]	; (8003128 <checkthe+0x1ec>)
 8002fd4:	f7fd fb76 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THE CHUA THEM");
 8002fd8:	4959      	ldr	r1, [pc, #356]	; (8003140 <checkthe+0x204>)
 8002fda:	4853      	ldr	r0, [pc, #332]	; (8003128 <checkthe+0x1ec>)
 8002fdc:	f7fd fbd9 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fe4:	f000 fec4 	bl	8003d70 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002fe8:	484f      	ldr	r0, [pc, #316]	; (8003128 <checkthe+0x1ec>)
 8002fea:	f7fd fbe9 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	484d      	ldr	r0, [pc, #308]	; (8003128 <checkthe+0x1ec>)
 8002ff4:	f7fd fb66 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8002ff8:	494c      	ldr	r1, [pc, #304]	; (800312c <checkthe+0x1f0>)
 8002ffa:	484b      	ldr	r0, [pc, #300]	; (8003128 <checkthe+0x1ec>)
 8002ffc:	f7fd fbc9 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8003000:	2201      	movs	r2, #1
 8003002:	2100      	movs	r1, #0
 8003004:	4848      	ldr	r0, [pc, #288]	; (8003128 <checkthe+0x1ec>)
 8003006:	f7fd fb5d 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 800300a:	4949      	ldr	r1, [pc, #292]	; (8003130 <checkthe+0x1f4>)
 800300c:	4846      	ldr	r0, [pc, #280]	; (8003128 <checkthe+0x1ec>)
 800300e:	f7fd fbc0 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8003012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003016:	f000 feab 	bl	8003d70 <HAL_Delay>
 800301a:	e070      	b.n	80030fe <checkthe+0x1c2>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 800301c:	4845      	ldr	r0, [pc, #276]	; (8003134 <checkthe+0x1f8>)
 800301e:	f7ff fe79 	bl	8002d14 <CheckListUID>
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	717b      	strb	r3, [r7, #5]
				CLCD_Clear(&LCD1);
 8003034:	483c      	ldr	r0, [pc, #240]	; (8003128 <checkthe+0x1ec>)
 8003036:	f7fd fbc3 	bl	80007c0 <CLCD_Clear>
				switch (key1)
 800303a:	797b      	ldrb	r3, [r7, #5]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d109      	bne.n	8003054 <checkthe+0x118>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	4838      	ldr	r0, [pc, #224]	; (8003128 <checkthe+0x1ec>)
 8003046:	f7fd fb3d 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE NGUOI LON");
 800304a:	493e      	ldr	r1, [pc, #248]	; (8003144 <checkthe+0x208>)
 800304c:	4836      	ldr	r0, [pc, #216]	; (8003128 <checkthe+0x1ec>)
 800304e:	f7fd fba0 	bl	8000792 <CLCD_WriteString>
					break;
 8003052:	e009      	b.n	8003068 <checkthe+0x12c>
				default:
					CLCD_SetCursor(&LCD1, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	4833      	ldr	r0, [pc, #204]	; (8003128 <checkthe+0x1ec>)
 800305a:	f7fd fb33 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE TRE EM");
 800305e:	493a      	ldr	r1, [pc, #232]	; (8003148 <checkthe+0x20c>)
 8003060:	4831      	ldr	r0, [pc, #196]	; (8003128 <checkthe+0x1ec>)
 8003062:	f7fd fb96 	bl	8000792 <CLCD_WriteString>
					break;
 8003066:	bf00      	nop
				}
				switch (key2)
 8003068:	79bb      	ldrb	r3, [r7, #6]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d01a      	beq.n	80030a4 <checkthe+0x168>
 800306e:	2b03      	cmp	r3, #3
 8003070:	dc22      	bgt.n	80030b8 <checkthe+0x17c>
 8003072:	2b01      	cmp	r3, #1
 8003074:	d002      	beq.n	800307c <checkthe+0x140>
 8003076:	2b02      	cmp	r3, #2
 8003078:	d00a      	beq.n	8003090 <checkthe+0x154>
 800307a:	e01d      	b.n	80030b8 <checkthe+0x17c>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 1);
 800307c:	2201      	movs	r2, #1
 800307e:	2100      	movs	r1, #0
 8003080:	4829      	ldr	r0, [pc, #164]	; (8003128 <checkthe+0x1ec>)
 8003082:	f7fd fb1f 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 1");
 8003086:	4931      	ldr	r1, [pc, #196]	; (800314c <checkthe+0x210>)
 8003088:	4827      	ldr	r0, [pc, #156]	; (8003128 <checkthe+0x1ec>)
 800308a:	f7fd fb82 	bl	8000792 <CLCD_WriteString>
					break;
 800308e:	e01d      	b.n	80030cc <checkthe+0x190>
				case 2:
					CLCD_SetCursor(&LCD1, 0, 1);
 8003090:	2201      	movs	r2, #1
 8003092:	2100      	movs	r1, #0
 8003094:	4824      	ldr	r0, [pc, #144]	; (8003128 <checkthe+0x1ec>)
 8003096:	f7fd fb15 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 2");
 800309a:	492d      	ldr	r1, [pc, #180]	; (8003150 <checkthe+0x214>)
 800309c:	4822      	ldr	r0, [pc, #136]	; (8003128 <checkthe+0x1ec>)
 800309e:	f7fd fb78 	bl	8000792 <CLCD_WriteString>
					break;
 80030a2:	e013      	b.n	80030cc <checkthe+0x190>
				case 3:
					CLCD_SetCursor(&LCD1, 0, 1);
 80030a4:	2201      	movs	r2, #1
 80030a6:	2100      	movs	r1, #0
 80030a8:	481f      	ldr	r0, [pc, #124]	; (8003128 <checkthe+0x1ec>)
 80030aa:	f7fd fb0b 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 3");
 80030ae:	4929      	ldr	r1, [pc, #164]	; (8003154 <checkthe+0x218>)
 80030b0:	481d      	ldr	r0, [pc, #116]	; (8003128 <checkthe+0x1ec>)
 80030b2:	f7fd fb6e 	bl	8000792 <CLCD_WriteString>
					break;
 80030b6:	e009      	b.n	80030cc <checkthe+0x190>
				default:
					CLCD_SetCursor(&LCD1, 0, 1);
 80030b8:	2201      	movs	r2, #1
 80030ba:	2100      	movs	r1, #0
 80030bc:	481a      	ldr	r0, [pc, #104]	; (8003128 <checkthe+0x1ec>)
 80030be:	f7fd fb01 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 4");
 80030c2:	4925      	ldr	r1, [pc, #148]	; (8003158 <checkthe+0x21c>)
 80030c4:	4818      	ldr	r0, [pc, #96]	; (8003128 <checkthe+0x1ec>)
 80030c6:	f7fd fb64 	bl	8000792 <CLCD_WriteString>
					break;
 80030ca:	bf00      	nop
				}
				HAL_Delay(1000);
 80030cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030d0:	f000 fe4e 	bl	8003d70 <HAL_Delay>
				CLCD_Clear(&LCD1);
 80030d4:	4814      	ldr	r0, [pc, #80]	; (8003128 <checkthe+0x1ec>)
 80030d6:	f7fd fb73 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <checkthe+0x1ec>)
 80030e0:	f7fd faf0 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 80030e4:	4911      	ldr	r1, [pc, #68]	; (800312c <checkthe+0x1f0>)
 80030e6:	4810      	ldr	r0, [pc, #64]	; (8003128 <checkthe+0x1ec>)
 80030e8:	f7fd fb53 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2100      	movs	r1, #0
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <checkthe+0x1ec>)
 80030f2:	f7fd fae7 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 80030f6:	490e      	ldr	r1, [pc, #56]	; (8003130 <checkthe+0x1f4>)
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <checkthe+0x1ec>)
 80030fa:	f7fd fb4a 	bl	8000792 <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 80030fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003102:	4816      	ldr	r0, [pc, #88]	; (800315c <checkthe+0x220>)
 8003104:	f7fd fe7a 	bl	8000dfc <checkbuton>
 8003108:	4603      	mov	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d005      	beq.n	800311a <checkthe+0x1de>
	while (exitmenu )
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <checkthe+0x1e8>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f47f af2e 	bne.w	8002f74 <checkthe+0x38>
 8003118:	e000      	b.n	800311c <checkthe+0x1e0>
		{
			return;
 800311a:	bf00      	nop
		}
	}
}
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000
 8003128:	2000015c 	.word	0x2000015c
 800312c:	080068ec 	.word	0x080068ec
 8003130:	080067d0 	.word	0x080067d0
 8003134:	2000014c 	.word	0x2000014c
 8003138:	40010c00 	.word	0x40010c00
 800313c:	20000018 	.word	0x20000018
 8003140:	080068f8 	.word	0x080068f8
 8003144:	08006648 	.word	0x08006648
 8003148:	08006924 	.word	0x08006924
 800314c:	08006930 	.word	0x08006930
 8003150:	08006938 	.word	0x08006938
 8003154:	08006940 	.word	0x08006940
 8003158:	08006948 	.word	0x08006948
 800315c:	40010800 	.word	0x40010800

08003160 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <CheckKey+0x58>)
 800316c:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800316e:	e015      	b.n	800319c <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3306      	adds	r3, #6
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f84c 	bl	8000212 <Flash_Read_2Byte>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003182:	429a      	cmp	r2, r3
 8003184:	d107      	bne.n	8003196 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3305      	adds	r3, #5
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	79fa      	ldrb	r2, [r7, #7]
 800318e:	429a      	cmp	r2, r3
 8003190:	d101      	bne.n	8003196 <CheckKey+0x36>
				return pt;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	e00b      	b.n	80031ae <CheckKey+0x4e>
		}
		pt = pt + 8;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3308      	adds	r3, #8
 800319a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3305      	adds	r3, #5
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f82a 	bl	80001fa <Flash_Read_Byte>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2bff      	cmp	r3, #255	; 0xff
 80031aa:	d1e1      	bne.n	8003170 <CheckKey+0x10>
	}
	return 0;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	0800a000 	.word	0x0800a000

080031bc <removeuid>:
void removeuid(uint32_t addressrm)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3306      	adds	r3, #6
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fc ffda 	bl	8000184 <Flash_Write_2Byte>
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <startadd>:
void startadd(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 80031dc:	4849      	ldr	r0, [pc, #292]	; (8003304 <startadd+0x12c>)
 80031de:	f7fd faef 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	4847      	ldr	r0, [pc, #284]	; (8003304 <startadd+0x12c>)
 80031e8:	f7fd fa6c 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "MOI QUET THE");
 80031ec:	4946      	ldr	r1, [pc, #280]	; (8003308 <startadd+0x130>)
 80031ee:	4845      	ldr	r0, [pc, #276]	; (8003304 <startadd+0x12c>)
 80031f0:	f7fd facf 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 80031f4:	2201      	movs	r2, #1
 80031f6:	2100      	movs	r1, #0
 80031f8:	4842      	ldr	r0, [pc, #264]	; (8003304 <startadd+0x12c>)
 80031fa:	f7fd fa63 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THE NGUOI LON");
 80031fe:	4943      	ldr	r1, [pc, #268]	; (800330c <startadd+0x134>)
 8003200:	4840      	ldr	r0, [pc, #256]	; (8003304 <startadd+0x12c>)
 8003202:	f7fd fac6 	bl	8000792 <CLCD_WriteString>
	setaddress();
 8003206:	f000 f88f 	bl	8003328 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800320a:	4841      	ldr	r0, [pc, #260]	; (8003310 <startadd+0x138>)
 800320c:	f000 f9c8 	bl	80035a0 <TM_MFRC522_Check>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f9      	bne.n	800320a <startadd+0x32>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8003216:	2201      	movs	r2, #1
 8003218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800321c:	483d      	ldr	r0, [pc, #244]	; (8003314 <startadd+0x13c>)
 800321e:	f001 fa74 	bl	800470a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003228:	483a      	ldr	r0, [pc, #232]	; (8003314 <startadd+0x13c>)
 800322a:	f001 fa6e 	bl	800470a <HAL_GPIO_WritePin>
				HAL_Delay(delayloa);
 800322e:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <startadd+0x140>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fd9c 	bl	8003d70 <HAL_Delay>
				HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800323e:	4835      	ldr	r0, [pc, #212]	; (8003314 <startadd+0x13c>)
 8003240:	f001 fa63 	bl	800470a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800324a:	4832      	ldr	r0, [pc, #200]	; (8003314 <startadd+0x13c>)
 800324c:	f001 fa5d 	bl	800470a <HAL_GPIO_WritePin>
				if (CheckListUID(CardID) == 0)
 8003250:	482f      	ldr	r0, [pc, #188]	; (8003310 <startadd+0x138>)
 8003252:	f7ff fd5f 	bl	8002d14 <CheckListUID>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10f      	bne.n	800327c <startadd+0xa4>
				{
					CardID[5] = 0x11;
 800325c:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <startadd+0x138>)
 800325e:	2211      	movs	r2, #17
 8003260:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8003262:	4b2e      	ldr	r3, [pc, #184]	; (800331c <startadd+0x144>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2206      	movs	r2, #6
 8003268:	4929      	ldr	r1, [pc, #164]	; (8003310 <startadd+0x138>)
 800326a:	4618      	mov	r0, r3
 800326c:	f7fc ffa2 	bl	80001b4 <Flash_Write_Array>
					AddressUID += 8;
 8003270:	4b2a      	ldr	r3, [pc, #168]	; (800331c <startadd+0x144>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3308      	adds	r3, #8
 8003276:	4a29      	ldr	r2, [pc, #164]	; (800331c <startadd+0x144>)
 8003278:	6013      	str	r3, [r2, #0]
					break;
 800327a:	e025      	b.n	80032c8 <startadd+0xf0>
				}
				else
				{
					CLCD_Clear(&LCD1);
 800327c:	4821      	ldr	r0, [pc, #132]	; (8003304 <startadd+0x12c>)
 800327e:	f7fd fa9f 	bl	80007c0 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	481f      	ldr	r0, [pc, #124]	; (8003304 <startadd+0x12c>)
 8003288:	f7fd fa1c 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE DA TON TAI");
 800328c:	4924      	ldr	r1, [pc, #144]	; (8003320 <startadd+0x148>)
 800328e:	481d      	ldr	r0, [pc, #116]	; (8003304 <startadd+0x12c>)
 8003290:	f7fd fa7f 	bl	8000792 <CLCD_WriteString>
					HAL_Delay(1000);
 8003294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003298:	f000 fd6a 	bl	8003d70 <HAL_Delay>
					CLCD_Clear(&LCD1);
 800329c:	4819      	ldr	r0, [pc, #100]	; (8003304 <startadd+0x12c>)
 800329e:	f7fd fa8f 	bl	80007c0 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	4817      	ldr	r0, [pc, #92]	; (8003304 <startadd+0x12c>)
 80032a8:	f7fd fa0c 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "MOI QUET THE");
 80032ac:	4916      	ldr	r1, [pc, #88]	; (8003308 <startadd+0x130>)
 80032ae:	4815      	ldr	r0, [pc, #84]	; (8003304 <startadd+0x12c>)
 80032b0:	f7fd fa6f 	bl	8000792 <CLCD_WriteString>
					CLCD_SetCursor(&LCD1, 0, 1);
 80032b4:	2201      	movs	r2, #1
 80032b6:	2100      	movs	r1, #0
 80032b8:	4812      	ldr	r0, [pc, #72]	; (8003304 <startadd+0x12c>)
 80032ba:	f7fd fa03 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE NGUOI LON");
 80032be:	4913      	ldr	r1, [pc, #76]	; (800330c <startadd+0x134>)
 80032c0:	4810      	ldr	r0, [pc, #64]	; (8003304 <startadd+0x12c>)
 80032c2:	f7fd fa66 	bl	8000792 <CLCD_WriteString>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80032c6:	e7a0      	b.n	800320a <startadd+0x32>
				}
			}
		}
	CLCD_Clear(&LCD1);
 80032c8:	480e      	ldr	r0, [pc, #56]	; (8003304 <startadd+0x12c>)
 80032ca:	f7fd fa79 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	480c      	ldr	r0, [pc, #48]	; (8003304 <startadd+0x12c>)
 80032d4:	f7fd f9f6 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THEM THANH CONG");
 80032d8:	4912      	ldr	r1, [pc, #72]	; (8003324 <startadd+0x14c>)
 80032da:	480a      	ldr	r0, [pc, #40]	; (8003304 <startadd+0x12c>)
 80032dc:	f7fd fa59 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 80032e0:	2201      	movs	r2, #1
 80032e2:	2100      	movs	r1, #0
 80032e4:	4807      	ldr	r0, [pc, #28]	; (8003304 <startadd+0x12c>)
 80032e6:	f7fd f9ed 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THE NGUOI LON");
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <startadd+0x134>)
 80032ec:	4805      	ldr	r0, [pc, #20]	; (8003304 <startadd+0x12c>)
 80032ee:	f7fd fa50 	bl	8000792 <CLCD_WriteString>
	HAL_Delay(1000);
 80032f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032f6:	f000 fd3b 	bl	8003d70 <HAL_Delay>
	CLCD_Clear(&LCD1);
 80032fa:	4802      	ldr	r0, [pc, #8]	; (8003304 <startadd+0x12c>)
 80032fc:	f7fd fa60 	bl	80007c0 <CLCD_Clear>
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	2000015c 	.word	0x2000015c
 8003308:	08006950 	.word	0x08006950
 800330c:	08006648 	.word	0x08006648
 8003310:	2000014c 	.word	0x2000014c
 8003314:	40010c00 	.word	0x40010c00
 8003318:	20000018 	.word	0x20000018
 800331c:	20000004 	.word	0x20000004
 8003320:	08006914 	.word	0x08006914
 8003324:	08006960 	.word	0x08006960

08003328 <setaddress>:
void setaddress(void){
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <setaddress+0x30>)
 8003330:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003332:	e002      	b.n	800333a <setaddress+0x12>
	{
		pt = pt + 8;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3308      	adds	r3, #8
 8003338:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3305      	adds	r3, #5
 800333e:	4618      	mov	r0, r3
 8003340:	f7fc ff5b 	bl	80001fa <Flash_Read_Byte>
 8003344:	4603      	mov	r3, r0
 8003346:	2bff      	cmp	r3, #255	; 0xff
 8003348:	d1f4      	bne.n	8003334 <setaddress+0xc>
	}
	AddressUID = pt;
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <setaddress+0x34>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	0800a000 	.word	0x0800a000
 800335c:	20000004 	.word	0x20000004

08003360 <password>:

void password(void){
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 8003366:	4851      	ldr	r0, [pc, #324]	; (80034ac <password+0x14c>)
 8003368:	f7fd fa2a 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	484e      	ldr	r0, [pc, #312]	; (80034ac <password+0x14c>)
 8003372:	f7fd f9a7 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "NHAP PASSWORD :");
 8003376:	494e      	ldr	r1, [pc, #312]	; (80034b0 <password+0x150>)
 8003378:	484c      	ldr	r0, [pc, #304]	; (80034ac <password+0x14c>)
 800337a:	f7fd fa0a 	bl	8000792 <CLCD_WriteString>
	exitmenu =120;
 800337e:	4b4d      	ldr	r3, [pc, #308]	; (80034b4 <password+0x154>)
 8003380:	2278      	movs	r2, #120	; 0x78
 8003382:	701a      	strb	r2, [r3, #0]
	uint8_t pass[16] = {-1};
 8003384:	23ff      	movs	r3, #255	; 0xff
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
	uint8_t k=0;
 8003394:	2300      	movs	r3, #0
 8003396:	75fb      	strb	r3, [r7, #23]
	uint8_t pas = -1;
 8003398:	23ff      	movs	r3, #255	; 0xff
 800339a:	75bb      	strb	r3, [r7, #22]
	HAL_Delay(1000);
 800339c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a0:	f000 fce6 	bl	8003d70 <HAL_Delay>
	while(checkbuton(MENU_GPIO_Port, MENU_Pin) != 0){}
 80033a4:	bf00      	nop
 80033a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033aa:	4843      	ldr	r0, [pc, #268]	; (80034b8 <password+0x158>)
 80033ac:	f7fd fd26 	bl	8000dfc <checkbuton>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f7      	bne.n	80033a6 <password+0x46>
	CLCD_SetCursor(&LCD1, k, 1);
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4619      	mov	r1, r3
 80033bc:	483b      	ldr	r0, [pc, #236]	; (80034ac <password+0x14c>)
 80033be:	f7fd f981 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteChar(&LCD1, 95);
 80033c2:	215f      	movs	r1, #95	; 0x5f
 80033c4:	4839      	ldr	r0, [pc, #228]	; (80034ac <password+0x14c>)
 80033c6:	f7fd f9c5 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 80033ca:	e066      	b.n	800349a <password+0x13a>
		if(checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) == 1){
 80033cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d0:	483a      	ldr	r0, [pc, #232]	; (80034bc <password+0x15c>)
 80033d2:	f7fd fd13 	bl	8000dfc <checkbuton>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d114      	bne.n	8003406 <password+0xa6>
			pas++;
 80033dc:	7dbb      	ldrb	r3, [r7, #22]
 80033de:	3301      	adds	r3, #1
 80033e0:	75bb      	strb	r3, [r7, #22]
			if(pas == 10)	pas = 0;
 80033e2:	7dbb      	ldrb	r3, [r7, #22]
 80033e4:	2b0a      	cmp	r3, #10
 80033e6:	d101      	bne.n	80033ec <password+0x8c>
 80033e8:	2300      	movs	r3, #0
 80033ea:	75bb      	strb	r3, [r7, #22]
			CLCD_SetCursor(&LCD1, k, 1);
 80033ec:	7dfb      	ldrb	r3, [r7, #23]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4619      	mov	r1, r3
 80033f2:	482e      	ldr	r0, [pc, #184]	; (80034ac <password+0x14c>)
 80033f4:	f7fd f966 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, pas + 0x30);
 80033f8:	7dbb      	ldrb	r3, [r7, #22]
 80033fa:	3330      	adds	r3, #48	; 0x30
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4619      	mov	r1, r3
 8003400:	482a      	ldr	r0, [pc, #168]	; (80034ac <password+0x14c>)
 8003402:	f7fd f9a7 	bl	8000754 <CLCD_WriteChar>
		}
		if(checkbuton(MENU_GPIO_Port, MENU_Pin) == 1){
 8003406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800340a:	482b      	ldr	r0, [pc, #172]	; (80034b8 <password+0x158>)
 800340c:	f7fd fcf6 	bl	8000dfc <checkbuton>
 8003410:	4603      	mov	r3, r0
 8003412:	2b01      	cmp	r3, #1
 8003414:	d141      	bne.n	800349a <password+0x13a>
			pass[k] = pas;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	3318      	adds	r3, #24
 800341a:	443b      	add	r3, r7
 800341c:	7dba      	ldrb	r2, [r7, #22]
 800341e:	f803 2c14 	strb.w	r2, [r3, #-20]
			k = k+1;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	3301      	adds	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
			pas = -1;
 8003428:	23ff      	movs	r3, #255	; 0xff
 800342a:	75bb      	strb	r3, [r7, #22]
			if(k == 16){
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b10      	cmp	r3, #16
 8003430:	d129      	bne.n	8003486 <password+0x126>
				for(uint8_t i = 0; i<16; i++){
 8003432:	2300      	movs	r3, #0
 8003434:	757b      	strb	r3, [r7, #21]
 8003436:	e00c      	b.n	8003452 <password+0xf2>
					if(pass[i] != PassWord[i]){
 8003438:	7d7b      	ldrb	r3, [r7, #21]
 800343a:	3318      	adds	r3, #24
 800343c:	443b      	add	r3, r7
 800343e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003442:	7d7b      	ldrb	r3, [r7, #21]
 8003444:	491e      	ldr	r1, [pc, #120]	; (80034c0 <password+0x160>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	429a      	cmp	r2, r3
 800344a:	d12b      	bne.n	80034a4 <password+0x144>
				for(uint8_t i = 0; i<16; i++){
 800344c:	7d7b      	ldrb	r3, [r7, #21]
 800344e:	3301      	adds	r3, #1
 8003450:	757b      	strb	r3, [r7, #21]
 8003452:	7d7b      	ldrb	r3, [r7, #21]
 8003454:	2b0f      	cmp	r3, #15
 8003456:	d9ef      	bls.n	8003438 <password+0xd8>
						return;
					}
				}
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 8003458:	2201      	movs	r2, #1
 800345a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800345e:	4817      	ldr	r0, [pc, #92]	; (80034bc <password+0x15c>)
 8003460:	f001 f953 	bl	800470a <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8003464:	f241 3088 	movw	r0, #5000	; 0x1388
 8003468:	f000 fc82 	bl	8003d70 <HAL_Delay>
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003472:	4812      	ldr	r0, [pc, #72]	; (80034bc <password+0x15c>)
 8003474:	f001 f949 	bl	800470a <HAL_GPIO_WritePin>
				resetflash();
 8003478:	f000 f824 	bl	80034c4 <resetflash>
				startadd();
 800347c:	f7ff feac 	bl	80031d8 <startadd>
				exitmenu =0;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <password+0x154>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
			}
			CLCD_SetCursor(&LCD1, k, 1);
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2201      	movs	r2, #1
 800348a:	4619      	mov	r1, r3
 800348c:	4807      	ldr	r0, [pc, #28]	; (80034ac <password+0x14c>)
 800348e:	f7fd f919 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, 95);
 8003492:	215f      	movs	r1, #95	; 0x5f
 8003494:	4805      	ldr	r0, [pc, #20]	; (80034ac <password+0x14c>)
 8003496:	f7fd f95d 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <password+0x154>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d194      	bne.n	80033cc <password+0x6c>
 80034a2:	e000      	b.n	80034a6 <password+0x146>
						return;
 80034a4:	bf00      	nop
		}

	}

}
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000015c 	.word	0x2000015c
 80034b0:	08006970 	.word	0x08006970
 80034b4:	20000000 	.word	0x20000000
 80034b8:	40010800 	.word	0x40010800
 80034bc:	40010c00 	.word	0x40010c00
 80034c0:	20000008 	.word	0x20000008

080034c4 <resetflash>:
void resetflash(){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <resetflash+0x34>)
 80034cc:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80034ce:	e002      	b.n	80034d6 <resetflash+0x12>
		Flash_Erase(pt);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fc fe3b 	bl	800014c <Flash_Erase>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fc fea7 	bl	800022a <Flash_Read_8Byte>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	bf08      	it	eq
 80034e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80034ea:	d1f1      	bne.n	80034d0 <resetflash+0xc>
	}
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	0800a000 	.word	0x0800a000

080034fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003504:	e7fe      	b.n	8003504 <Error_Handler+0x8>
	...

08003508 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af02      	add	r7, sp, #8
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003516:	bf00      	nop
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <TM_SPI_Send+0x4c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d1f8      	bne.n	8003518 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003526:	f107 0208 	add.w	r2, r7, #8
 800352a:	f107 010c 	add.w	r1, r7, #12
 800352e:	230a      	movs	r3, #10
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2301      	movs	r3, #1
 8003534:	4807      	ldr	r0, [pc, #28]	; (8003554 <TM_SPI_Send+0x4c>)
 8003536:	f001 fd85 	bl	8005044 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 800353a:	bf00      	nop
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <TM_SPI_Send+0x4c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d0f8      	beq.n	800353c <TM_SPI_Send+0x34>
	return data_re[0];
 800354a:	7a3b      	ldrb	r3, [r7, #8]

}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200000ac 	.word	0x200000ac

08003558 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 800355c:	f000 f8d5 	bl	800370a <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003560:	218d      	movs	r1, #141	; 0x8d
 8003562:	202a      	movs	r0, #42	; 0x2a
 8003564:	f000 f836 	bl	80035d4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003568:	213e      	movs	r1, #62	; 0x3e
 800356a:	202b      	movs	r0, #43	; 0x2b
 800356c:	f000 f832 	bl	80035d4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003570:	211e      	movs	r1, #30
 8003572:	202d      	movs	r0, #45	; 0x2d
 8003574:	f000 f82e 	bl	80035d4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003578:	2100      	movs	r1, #0
 800357a:	202c      	movs	r0, #44	; 0x2c
 800357c:	f000 f82a 	bl	80035d4 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003580:	2170      	movs	r1, #112	; 0x70
 8003582:	2026      	movs	r0, #38	; 0x26
 8003584:	f000 f826 	bl	80035d4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	2015      	movs	r0, #21
 800358c:	f000 f822 	bl	80035d4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003590:	213d      	movs	r1, #61	; 0x3d
 8003592:	2011      	movs	r0, #17
 8003594:	f000 f81e 	bl	80035d4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003598:	f000 f8a2 	bl	80036e0 <TM_MFRC522_AntennaOn>
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}

080035a0 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	2026      	movs	r0, #38	; 0x26
 80035ac:	f000 f8b5 	bl	800371a <TM_MFRC522_Request>
 80035b0:	4603      	mov	r3, r0
 80035b2:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9a1 	bl	8003902 <TM_MFRC522_Anticoll>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 80035c4:	f000 fa23 	bl	8003a0e <TM_MFRC522_Halt>
	return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	460a      	mov	r2, r1
 80035de:	71fb      	strb	r3, [r7, #7]
 80035e0:	4613      	mov	r3, r2
 80035e2:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80035e4:	2200      	movs	r2, #0
 80035e6:	2110      	movs	r1, #16
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <TM_MFRC522_WriteRegister+0x48>)
 80035ea:	f001 f88e 	bl	800470a <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ff84 	bl	8003508 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003600:	79bb      	ldrb	r3, [r7, #6]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff80 	bl	8003508 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003608:	2201      	movs	r2, #1
 800360a:	2110      	movs	r1, #16
 800360c:	4803      	ldr	r0, [pc, #12]	; (800361c <TM_MFRC522_WriteRegister+0x48>)
 800360e:	f001 f87c 	bl	800470a <HAL_GPIO_WritePin>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40010800 	.word	0x40010800

08003620 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 800362a:	2200      	movs	r2, #0
 800362c:	2110      	movs	r1, #16
 800362e:	480f      	ldr	r0, [pc, #60]	; (800366c <TM_MFRC522_ReadRegister+0x4c>)
 8003630:	f001 f86b 	bl	800470a <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	b25b      	sxtb	r3, r3
 800363a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800363e:	b25b      	sxtb	r3, r3
 8003640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003644:	b25b      	sxtb	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff5d 	bl	8003508 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 800364e:	2000      	movs	r0, #0
 8003650:	f7ff ff5a 	bl	8003508 <TM_SPI_Send>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003658:	2201      	movs	r2, #1
 800365a:	2110      	movs	r1, #16
 800365c:	4803      	ldr	r0, [pc, #12]	; (800366c <TM_MFRC522_ReadRegister+0x4c>)
 800365e:	f001 f854 	bl	800470a <HAL_GPIO_WritePin>

	return val;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40010800 	.word	0x40010800

08003670 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	460a      	mov	r2, r1
 800367a:	71fb      	strb	r3, [r7, #7]
 800367c:	4613      	mov	r3, r2
 800367e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ffcc 	bl	8003620 <TM_MFRC522_ReadRegister>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	4313      	orrs	r3, r2
 8003690:	b2da      	uxtb	r2, r3
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff9c 	bl	80035d4 <TM_MFRC522_WriteRegister>
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	460a      	mov	r2, r1
 80036ae:	71fb      	strb	r3, [r7, #7]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ffb2 	bl	8003620 <TM_MFRC522_ReadRegister>
 80036bc:	4603      	mov	r3, r0
 80036be:	b25a      	sxtb	r2, r3
 80036c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	b25b      	sxtb	r3, r3
 80036c8:	4013      	ands	r3, r2
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ff7e 	bl	80035d4 <TM_MFRC522_WriteRegister>
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80036e6:	2014      	movs	r0, #20
 80036e8:	f7ff ff9a 	bl	8003620 <TM_MFRC522_ReadRegister>
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80036fa:	2103      	movs	r1, #3
 80036fc:	2014      	movs	r0, #20
 80036fe:	f7ff ffb7 	bl	8003670 <TM_MFRC522_SetBitMask>
	}
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 800370a:	b580      	push	{r7, lr}
 800370c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800370e:	210f      	movs	r1, #15
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff ff5f 	bl	80035d4 <TM_MFRC522_WriteRegister>
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}

0800371a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af02      	add	r7, sp, #8
 8003720:	4603      	mov	r3, r0
 8003722:	6039      	str	r1, [r7, #0]
 8003724:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003726:	2107      	movs	r1, #7
 8003728:	200d      	movs	r0, #13
 800372a:	f7ff ff53 	bl	80035d4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	79fa      	ldrb	r2, [r7, #7]
 8003732:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	200c      	movs	r0, #12
 8003742:	f000 f80f 	bl	8003764 <TM_MFRC522_ToCard>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <TM_MFRC522_Request+0x3c>
 8003750:	89bb      	ldrh	r3, [r7, #12]
 8003752:	2b10      	cmp	r3, #16
 8003754:	d001      	beq.n	800375a <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003756:	2302      	movs	r3, #2
 8003758:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	4613      	mov	r3, r2
 8003774:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003776:	2302      	movs	r3, #2
 8003778:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800377a:	2300      	movs	r3, #0
 800377c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800377e:	2300      	movs	r3, #0
 8003780:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d006      	beq.n	8003796 <TM_MFRC522_ToCard+0x32>
 8003788:	2b0e      	cmp	r3, #14
 800378a:	d109      	bne.n	80037a0 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800378c:	2312      	movs	r3, #18
 800378e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003790:	2310      	movs	r3, #16
 8003792:	757b      	strb	r3, [r7, #21]
			break;
 8003794:	e005      	b.n	80037a2 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003796:	2377      	movs	r3, #119	; 0x77
 8003798:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800379a:	2330      	movs	r3, #48	; 0x30
 800379c:	757b      	strb	r3, [r7, #21]
			break;
 800379e:	e000      	b.n	80037a2 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80037a0:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80037a2:	7dbb      	ldrb	r3, [r7, #22]
 80037a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	2002      	movs	r0, #2
 80037ae:	f7ff ff11 	bl	80035d4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80037b2:	2180      	movs	r1, #128	; 0x80
 80037b4:	2004      	movs	r0, #4
 80037b6:	f7ff ff75 	bl	80036a4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	200a      	movs	r0, #10
 80037be:	f7ff ff57 	bl	8003670 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80037c2:	2100      	movs	r1, #0
 80037c4:	2001      	movs	r0, #1
 80037c6:	f7ff ff05 	bl	80035d4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80037ca:	2300      	movs	r3, #0
 80037cc:	827b      	strh	r3, [r7, #18]
 80037ce:	e00a      	b.n	80037e6 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80037d0:	8a7b      	ldrh	r3, [r7, #18]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4413      	add	r3, r2
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	2009      	movs	r0, #9
 80037dc:	f7ff fefa 	bl	80035d4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80037e0:	8a7b      	ldrh	r3, [r7, #18]
 80037e2:	3301      	adds	r3, #1
 80037e4:	827b      	strh	r3, [r7, #18]
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	8a7a      	ldrh	r2, [r7, #18]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d3ef      	bcc.n	80037d0 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	4619      	mov	r1, r3
 80037f4:	2001      	movs	r0, #1
 80037f6:	f7ff feed 	bl	80035d4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d103      	bne.n	8003808 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	200d      	movs	r0, #13
 8003804:	f7ff ff34 	bl	8003670 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003808:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800380c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800380e:	2004      	movs	r0, #4
 8003810:	f7ff ff06 	bl	8003620 <TM_MFRC522_ReadRegister>
 8003814:	4603      	mov	r3, r0
 8003816:	753b      	strb	r3, [r7, #20]
		i--;
 8003818:	8a7b      	ldrh	r3, [r7, #18]
 800381a:	3b01      	subs	r3, #1
 800381c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800381e:	8a7b      	ldrh	r3, [r7, #18]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <TM_MFRC522_ToCard+0xd6>
 8003824:	7d3b      	ldrb	r3, [r7, #20]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <TM_MFRC522_ToCard+0xd6>
 800382e:	7d3a      	ldrb	r2, [r7, #20]
 8003830:	7d7b      	ldrb	r3, [r7, #21]
 8003832:	4013      	ands	r3, r2
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0e9      	beq.n	800380e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	200d      	movs	r0, #13
 800383e:	f7ff ff31 	bl	80036a4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003842:	8a7b      	ldrh	r3, [r7, #18]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d057      	beq.n	80038f8 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003848:	2006      	movs	r0, #6
 800384a:	f7ff fee9 	bl	8003620 <TM_MFRC522_ReadRegister>
 800384e:	4603      	mov	r3, r0
 8003850:	f003 031b 	and.w	r3, r3, #27
 8003854:	2b00      	cmp	r3, #0
 8003856:	d14d      	bne.n	80038f4 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800385c:	7d3a      	ldrb	r2, [r7, #20]
 800385e:	7dbb      	ldrb	r3, [r7, #22]
 8003860:	4013      	ands	r3, r2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d140      	bne.n	80038f8 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003876:	200a      	movs	r0, #10
 8003878:	f7ff fed2 	bl	8003620 <TM_MFRC522_ReadRegister>
 800387c:	4603      	mov	r3, r0
 800387e:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003880:	200c      	movs	r0, #12
 8003882:	f7ff fecd 	bl	8003620 <TM_MFRC522_ReadRegister>
 8003886:	4603      	mov	r3, r0
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 800388e:	7c7b      	ldrb	r3, [r7, #17]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003894:	7d3b      	ldrb	r3, [r7, #20]
 8003896:	3b01      	subs	r3, #1
 8003898:	b29b      	uxth	r3, r3
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	b29a      	uxth	r2, r3
 800389e:	7c7b      	ldrb	r3, [r7, #17]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	e005      	b.n	80038b8 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80038ac:	7d3b      	ldrb	r3, [r7, #20]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80038b8:	7d3b      	ldrb	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80038c2:	7d3b      	ldrb	r3, [r7, #20]
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d901      	bls.n	80038cc <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80038c8:	2310      	movs	r3, #16
 80038ca:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80038cc:	2300      	movs	r3, #0
 80038ce:	827b      	strh	r3, [r7, #18]
 80038d0:	e00a      	b.n	80038e8 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80038d2:	8a7b      	ldrh	r3, [r7, #18]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	18d4      	adds	r4, r2, r3
 80038d8:	2009      	movs	r0, #9
 80038da:	f7ff fea1 	bl	8003620 <TM_MFRC522_ReadRegister>
 80038de:	4603      	mov	r3, r0
 80038e0:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80038e2:	8a7b      	ldrh	r3, [r7, #18]
 80038e4:	3301      	adds	r3, #1
 80038e6:	827b      	strh	r3, [r7, #18]
 80038e8:	7d3b      	ldrb	r3, [r7, #20]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	8a7a      	ldrh	r2, [r7, #18]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3ef      	bcc.n	80038d2 <TM_MFRC522_ToCard+0x16e>
 80038f2:	e001      	b.n	80038f8 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 80038f4:	2302      	movs	r3, #2
 80038f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}

08003902 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af02      	add	r7, sp, #8
 8003908:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800390e:	2100      	movs	r1, #0
 8003910:	200d      	movs	r0, #13
 8003912:	f7ff fe5f 	bl	80035d4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2293      	movs	r2, #147	; 0x93
 800391a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3301      	adds	r3, #1
 8003920:	2220      	movs	r2, #32
 8003922:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003924:	f107 030a 	add.w	r3, r7, #10
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	200c      	movs	r0, #12
 8003932:	f7ff ff17 	bl	8003764 <TM_MFRC522_ToCard>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d118      	bne.n	8003972 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003940:	2300      	movs	r3, #0
 8003942:	73bb      	strb	r3, [r7, #14]
 8003944:	e009      	b.n	800395a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003946:	7bbb      	ldrb	r3, [r7, #14]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	7b7b      	ldrb	r3, [r7, #13]
 8003950:	4053      	eors	r3, r2
 8003952:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	3301      	adds	r3, #1
 8003958:	73bb      	strb	r3, [r7, #14]
 800395a:	7bbb      	ldrb	r3, [r7, #14]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d9f2      	bls.n	8003946 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003960:	7bbb      	ldrb	r3, [r7, #14]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	7b7a      	ldrb	r2, [r7, #13]
 800396a:	429a      	cmp	r2, r3
 800396c:	d001      	beq.n	8003972 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800396e:	2302      	movs	r3, #2
 8003970:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	460b      	mov	r3, r1
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800398a:	2104      	movs	r1, #4
 800398c:	2005      	movs	r0, #5
 800398e:	f7ff fe89 	bl	80036a4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	200a      	movs	r0, #10
 8003996:	f7ff fe6b 	bl	8003670 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
 800399e:	e00a      	b.n	80039b6 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	2009      	movs	r0, #9
 80039ac:	f7ff fe12 	bl	80035d4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	3301      	adds	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
 80039b6:	7dfa      	ldrb	r2, [r7, #23]
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3f0      	bcc.n	80039a0 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80039be:	2103      	movs	r1, #3
 80039c0:	2001      	movs	r0, #1
 80039c2:	f7ff fe07 	bl	80035d4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80039c6:	23ff      	movs	r3, #255	; 0xff
 80039c8:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80039ca:	2005      	movs	r0, #5
 80039cc:	f7ff fe28 	bl	8003620 <TM_MFRC522_ReadRegister>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75bb      	strb	r3, [r7, #22]
		i--;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <TM_MFRC522_CalculateCRC+0x6e>
 80039e0:	7dbb      	ldrb	r3, [r7, #22]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ef      	beq.n	80039ca <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80039ea:	2022      	movs	r0, #34	; 0x22
 80039ec:	f7ff fe18 	bl	8003620 <TM_MFRC522_ReadRegister>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	1c5c      	adds	r4, r3, #1
 80039fc:	2021      	movs	r0, #33	; 0x21
 80039fe:	f7ff fe0f 	bl	8003620 <TM_MFRC522_ReadRegister>
 8003a02:	4603      	mov	r3, r0
 8003a04:	7023      	strb	r3, [r4, #0]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}

08003a0e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003a14:	2350      	movs	r3, #80	; 0x50
 8003a16:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	1c9a      	adds	r2, r3, #2
 8003a20:	463b      	mov	r3, r7
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ffa9 	bl	800397c <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003a2a:	463a      	mov	r2, r7
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	1dbb      	adds	r3, r7, #6
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	2204      	movs	r2, #4
 8003a36:	200c      	movs	r0, #12
 8003a38:	f7ff fe94 	bl	8003764 <TM_MFRC522_ToCard>



}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_MspInit+0x5c>)
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_MspInit+0x5c>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6193      	str	r3, [r2, #24]
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_MspInit+0x5c>)
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_MspInit+0x5c>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_MspInit+0x5c>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	61d3      	str	r3, [r2, #28]
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_MspInit+0x5c>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_MspInit+0x60>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <HAL_MspInit+0x60>)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40010000 	.word	0x40010000

08003aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 0310 	add.w	r3, r7, #16
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_SPI_MspInit+0x88>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d12f      	bne.n	8003b28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_SPI_MspInit+0x8c>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_SPI_MspInit+0x8c>)
 8003ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ad2:	6193      	str	r3, [r2, #24]
 8003ad4:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <HAL_SPI_MspInit+0x8c>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_SPI_MspInit+0x8c>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_SPI_MspInit+0x8c>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	6193      	str	r3, [r2, #24]
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_SPI_MspInit+0x8c>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003af8:	23a0      	movs	r3, #160	; 0xa0
 8003afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	2302      	movs	r3, #2
 8003afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b00:	2303      	movs	r3, #3
 8003b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	f107 0310 	add.w	r3, r7, #16
 8003b08:	4619      	mov	r1, r3
 8003b0a:	480b      	ldr	r0, [pc, #44]	; (8003b38 <HAL_SPI_MspInit+0x90>)
 8003b0c:	f000 fc62 	bl	80043d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1c:	f107 0310 	add.w	r3, r7, #16
 8003b20:	4619      	mov	r1, r3
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <HAL_SPI_MspInit+0x90>)
 8003b24:	f000 fc56 	bl	80043d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b28:	bf00      	nop
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40013000 	.word	0x40013000
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40010800 	.word	0x40010800

08003b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4c:	d113      	bne.n	8003b76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_TIM_Base_MspInit+0x44>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_TIM_Base_MspInit+0x44>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	61d3      	str	r3, [r2, #28]
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_TIM_Base_MspInit+0x44>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	201c      	movs	r0, #28
 8003b6c:	f000 f9fb 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b70:	201c      	movs	r0, #28
 8003b72:	f000 fa14 	bl	8003f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000

08003b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <NMI_Handler+0x4>

08003b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <HardFault_Handler+0x4>

08003b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <MemManage_Handler+0x4>

08003b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b9a:	e7fe      	b.n	8003b9a <BusFault_Handler+0x4>

08003b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <UsageFault_Handler+0x4>

08003ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bca:	f000 f8b5 	bl	8003d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <TIM2_IRQHandler+0x10>)
 8003bda:	f001 fd1d 	bl	8005618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000104 	.word	0x20000104

08003be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <_sbrk+0x5c>)
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <_sbrk+0x60>)
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <_sbrk+0x64>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <_sbrk+0x64>)
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <_sbrk+0x68>)
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <_sbrk+0x64>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d207      	bcs.n	8003c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c18:	f002 f856 	bl	8005cc8 <__errno>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	220c      	movs	r2, #12
 8003c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	e009      	b.n	8003c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <_sbrk+0x64>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <_sbrk+0x64>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <_sbrk+0x64>)
 8003c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20005000 	.word	0x20005000
 8003c48:	00000400 	.word	0x00000400
 8003c4c:	200001c8 	.word	0x200001c8
 8003c50:	20000200 	.word	0x20000200

08003c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c60:	480c      	ldr	r0, [pc, #48]	; (8003c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c62:	490d      	ldr	r1, [pc, #52]	; (8003c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c68:	e002      	b.n	8003c70 <LoopCopyDataInit>

08003c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c6e:	3304      	adds	r3, #4

08003c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c74:	d3f9      	bcc.n	8003c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c78:	4c0a      	ldr	r4, [pc, #40]	; (8003ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c7c:	e001      	b.n	8003c82 <LoopFillZerobss>

08003c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c80:	3204      	adds	r2, #4

08003c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c84:	d3fb      	bcc.n	8003c7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c86:	f7ff ffe5 	bl	8003c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c8a:	f002 f823 	bl	8005cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c8e:	f7fc fdd5 	bl	800083c <main>
  bx lr
 8003c92:	4770      	bx	lr
  ldr r0, =_sdata
 8003c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c98:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003c9c:	080069dc 	.word	0x080069dc
  ldr r2, =_sbss
 8003ca0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003ca4:	20000200 	.word	0x20000200

08003ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ca8:	e7fe      	b.n	8003ca8 <ADC1_2_IRQHandler>
	...

08003cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_Init+0x28>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_Init+0x28>)
 8003cb6:	f043 0310 	orr.w	r3, r3, #16
 8003cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cbc:	2003      	movs	r0, #3
 8003cbe:	f000 f947 	bl	8003f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cc2:	200f      	movs	r0, #15
 8003cc4:	f000 f808 	bl	8003cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc8:	f7ff febc 	bl	8003a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40022000 	.word	0x40022000

08003cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_InitTick+0x54>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_InitTick+0x58>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f95f 	bl	8003fba <HAL_SYSTICK_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e00e      	b.n	8003d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b0f      	cmp	r3, #15
 8003d0a:	d80a      	bhi.n	8003d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	f000 f927 	bl	8003f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d18:	4a06      	ldr	r2, [pc, #24]	; (8003d34 <HAL_InitTick+0x5c>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	2000001c 	.word	0x2000001c
 8003d30:	20000024 	.word	0x20000024
 8003d34:	20000020 	.word	0x20000020

08003d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_IncTick+0x1c>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_IncTick+0x20>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <HAL_IncTick+0x20>)
 8003d4a:	6013      	str	r3, [r2, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	20000024 	.word	0x20000024
 8003d58:	200001cc 	.word	0x200001cc

08003d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d60:	4b02      	ldr	r3, [pc, #8]	; (8003d6c <HAL_GetTick+0x10>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	200001cc 	.word	0x200001cc

08003d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7ff fff0 	bl	8003d5c <HAL_GetTick>
 8003d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d005      	beq.n	8003d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_Delay+0x44>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d96:	bf00      	nop
 8003d98:	f7ff ffe0 	bl	8003d5c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d8f7      	bhi.n	8003d98 <HAL_Delay+0x28>
  {
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000024 	.word	0x20000024

08003db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	60d3      	str	r3, [r2, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <__NVIC_GetPriorityGrouping+0x18>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 0307 	and.w	r3, r3, #7
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db0b      	blt.n	8003e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4906      	ldr	r1, [pc, #24]	; (8003e50 <__NVIC_EnableIRQ+0x34>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	e000e100 	.word	0xe000e100

08003e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	db0a      	blt.n	8003e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	490c      	ldr	r1, [pc, #48]	; (8003ea0 <__NVIC_SetPriority+0x4c>)
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	440b      	add	r3, r1
 8003e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e7c:	e00a      	b.n	8003e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4908      	ldr	r1, [pc, #32]	; (8003ea4 <__NVIC_SetPriority+0x50>)
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3b04      	subs	r3, #4
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	440b      	add	r3, r1
 8003e92:	761a      	strb	r2, [r3, #24]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e100 	.word	0xe000e100
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f1c3 0307 	rsb	r3, r3, #7
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	bf28      	it	cs
 8003ec6:	2304      	movcs	r3, #4
 8003ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d902      	bls.n	8003ed8 <NVIC_EncodePriority+0x30>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3b03      	subs	r3, #3
 8003ed6:	e000      	b.n	8003eda <NVIC_EncodePriority+0x32>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	401a      	ands	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	43d9      	mvns	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f00:	4313      	orrs	r3, r2
         );
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f1c:	d301      	bcc.n	8003f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00f      	b.n	8003f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <SysTick_Config+0x40>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	f7ff ff90 	bl	8003e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <SysTick_Config+0x40>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <SysTick_Config+0x40>)
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	e000e010 	.word	0xe000e010

08003f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff2d 	bl	8003db8 <__NVIC_SetPriorityGrouping>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f78:	f7ff ff42 	bl	8003e00 <__NVIC_GetPriorityGrouping>
 8003f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff90 	bl	8003ea8 <NVIC_EncodePriority>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff5f 	bl	8003e54 <__NVIC_SetPriority>
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff35 	bl	8003e1c <__NVIC_EnableIRQ>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ffa2 	bl	8003f0c <SysTick_Config>
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_FLASH_Program+0xd8>)
 8003ff0:	7e1b      	ldrb	r3, [r3, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_FLASH_Program+0x26>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e054      	b.n	80040a4 <HAL_FLASH_Program+0xd0>
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_FLASH_Program+0xd8>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004000:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004004:	f000 f8a8 	bl	8004158 <FLASH_WaitForLastOperation>
 8004008:	4603      	mov	r3, r0
 800400a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d144      	bne.n	800409c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d102      	bne.n	800401e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004018:	2301      	movs	r3, #1
 800401a:	757b      	strb	r3, [r7, #21]
 800401c:	e007      	b.n	800402e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d102      	bne.n	800402a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004024:	2302      	movs	r3, #2
 8004026:	757b      	strb	r3, [r7, #21]
 8004028:	e001      	b.n	800402e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800402a:	2304      	movs	r3, #4
 800402c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800402e:	2300      	movs	r3, #0
 8004030:	75bb      	strb	r3, [r7, #22]
 8004032:	e02d      	b.n	8004090 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004034:	7dbb      	ldrb	r3, [r7, #22]
 8004036:	005a      	lsls	r2, r3, #1
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	eb02 0c03 	add.w	ip, r2, r3
 800403e:	7dbb      	ldrb	r3, [r7, #22]
 8004040:	0119      	lsls	r1, r3, #4
 8004042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004046:	f1c1 0620 	rsb	r6, r1, #32
 800404a:	f1a1 0020 	sub.w	r0, r1, #32
 800404e:	fa22 f401 	lsr.w	r4, r2, r1
 8004052:	fa03 f606 	lsl.w	r6, r3, r6
 8004056:	4334      	orrs	r4, r6
 8004058:	fa23 f000 	lsr.w	r0, r3, r0
 800405c:	4304      	orrs	r4, r0
 800405e:	fa23 f501 	lsr.w	r5, r3, r1
 8004062:	b2a3      	uxth	r3, r4
 8004064:	4619      	mov	r1, r3
 8004066:	4660      	mov	r0, ip
 8004068:	f000 f85a 	bl	8004120 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800406c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004070:	f000 f872 	bl	8004158 <FLASH_WaitForLastOperation>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <HAL_FLASH_Program+0xdc>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <HAL_FLASH_Program+0xdc>)
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800408a:	7dbb      	ldrb	r3, [r7, #22]
 800408c:	3301      	adds	r3, #1
 800408e:	75bb      	strb	r3, [r7, #22]
 8004090:	7dba      	ldrb	r2, [r7, #22]
 8004092:	7d7b      	ldrb	r3, [r7, #21]
 8004094:	429a      	cmp	r2, r3
 8004096:	d3cd      	bcc.n	8004034 <HAL_FLASH_Program+0x60>
 8004098:	e000      	b.n	800409c <HAL_FLASH_Program+0xc8>
      {
        break;
 800409a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_FLASH_Program+0xd8>)
 800409e:	2200      	movs	r2, #0
 80040a0:	761a      	strb	r2, [r3, #24]

  return status;
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ac:	200001d0 	.word	0x200001d0
 80040b0:	40022000 	.word	0x40022000

080040b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_FLASH_Unlock+0x40>)
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_FLASH_Unlock+0x40>)
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <HAL_FLASH_Unlock+0x44>)
 80040ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040d0:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <HAL_FLASH_Unlock+0x40>)
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_FLASH_Unlock+0x48>)
 80040d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_FLASH_Unlock+0x40>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80040e6:	79fb      	ldrb	r3, [r7, #7]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40022000 	.word	0x40022000
 80040f8:	45670123 	.word	0x45670123
 80040fc:	cdef89ab 	.word	0xcdef89ab

08004100 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_FLASH_Lock+0x1c>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_FLASH_Lock+0x1c>)
 800410a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40022000 	.word	0x40022000

08004120 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800412c:	4b08      	ldr	r3, [pc, #32]	; (8004150 <FLASH_Program_HalfWord+0x30>)
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <FLASH_Program_HalfWord+0x34>)
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	4a07      	ldr	r2, [pc, #28]	; (8004154 <FLASH_Program_HalfWord+0x34>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	887a      	ldrh	r2, [r7, #2]
 8004142:	801a      	strh	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200001d0 	.word	0x200001d0
 8004154:	40022000 	.word	0x40022000

08004158 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004160:	f7ff fdfc 	bl	8003d5c <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004166:	e010      	b.n	800418a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d00c      	beq.n	800418a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <FLASH_WaitForLastOperation+0x2e>
 8004176:	f7ff fdf1 	bl	8003d5c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d201      	bcs.n	800418a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e025      	b.n	80041d6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <FLASH_WaitForLastOperation+0x88>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e8      	bne.n	8004168 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <FLASH_WaitForLastOperation+0x88>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <FLASH_WaitForLastOperation+0x88>)
 80041a4:	2220      	movs	r2, #32
 80041a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <FLASH_WaitForLastOperation+0x88>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <FLASH_WaitForLastOperation+0x88>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <FLASH_WaitForLastOperation+0x88>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80041cc:	f000 f80a 	bl	80041e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40022000 	.word	0x40022000

080041e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <FLASH_SetErrorCode+0x98>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <FLASH_SetErrorCode+0x9c>)
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <FLASH_SetErrorCode+0x9c>)
 8004204:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f043 0310 	orr.w	r3, r3, #16
 800420c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <FLASH_SetErrorCode+0x98>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <FLASH_SetErrorCode+0x9c>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	4a17      	ldr	r2, [pc, #92]	; (8004280 <FLASH_SetErrorCode+0x9c>)
 8004224:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <FLASH_SetErrorCode+0x98>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <FLASH_SetErrorCode+0x9c>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f043 0304 	orr.w	r3, r3, #4
 8004242:	4a0f      	ldr	r2, [pc, #60]	; (8004280 <FLASH_SetErrorCode+0x9c>)
 8004244:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <FLASH_SetErrorCode+0x98>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4a0c      	ldr	r2, [pc, #48]	; (800427c <FLASH_SetErrorCode+0x98>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f240 1201 	movw	r2, #257	; 0x101
 8004258:	4293      	cmp	r3, r2
 800425a:	d106      	bne.n	800426a <FLASH_SetErrorCode+0x86>
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <FLASH_SetErrorCode+0x98>)
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	4a06      	ldr	r2, [pc, #24]	; (800427c <FLASH_SetErrorCode+0x98>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	61d3      	str	r3, [r2, #28]
}  
 8004268:	e002      	b.n	8004270 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <FLASH_SetErrorCode+0x98>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60d3      	str	r3, [r2, #12]
}  
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40022000 	.word	0x40022000
 8004280:	200001d0 	.word	0x200001d0

08004284 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004296:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <HAL_FLASHEx_Erase+0xd0>)
 8004298:	7e1b      	ldrb	r3, [r3, #24]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_FLASHEx_Erase+0x1e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e053      	b.n	800434a <HAL_FLASHEx_Erase+0xc6>
 80042a2:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <HAL_FLASHEx_Erase+0xd0>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d116      	bne.n	80042de <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80042b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042b4:	f7ff ff50 	bl	8004158 <FLASH_WaitForLastOperation>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d141      	bne.n	8004342 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80042be:	2001      	movs	r0, #1
 80042c0:	f000 f84c 	bl	800435c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042c8:	f7ff ff46 	bl	8004158 <FLASH_WaitForLastOperation>
 80042cc:	4603      	mov	r3, r0
 80042ce:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80042d0:	4b21      	ldr	r3, [pc, #132]	; (8004358 <HAL_FLASHEx_Erase+0xd4>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	4a20      	ldr	r2, [pc, #128]	; (8004358 <HAL_FLASHEx_Erase+0xd4>)
 80042d6:	f023 0304 	bic.w	r3, r3, #4
 80042da:	6113      	str	r3, [r2, #16]
 80042dc:	e031      	b.n	8004342 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80042de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042e2:	f7ff ff39 	bl	8004158 <FLASH_WaitForLastOperation>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d12a      	bne.n	8004342 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f04f 32ff 	mov.w	r2, #4294967295
 80042f2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	e019      	b.n	8004330 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f000 f849 	bl	8004394 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004302:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004306:	f7ff ff27 	bl	8004158 <FLASH_WaitForLastOperation>
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_FLASHEx_Erase+0xd4>)
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	4a11      	ldr	r2, [pc, #68]	; (8004358 <HAL_FLASHEx_Erase+0xd4>)
 8004314:	f023 0302 	bic.w	r3, r3, #2
 8004318:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	601a      	str	r2, [r3, #0]
            break;
 8004326:	e00c      	b.n	8004342 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800432e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	029a      	lsls	r2, r3, #10
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d3dc      	bcc.n	80042fc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <HAL_FLASHEx_Erase+0xd0>)
 8004344:	2200      	movs	r2, #0
 8004346:	761a      	strb	r2, [r3, #24]

  return status;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200001d0 	.word	0x200001d0
 8004358:	40022000 	.word	0x40022000

0800435c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <FLASH_MassErase+0x30>)
 8004366:	2200      	movs	r2, #0
 8004368:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <FLASH_MassErase+0x34>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4a08      	ldr	r2, [pc, #32]	; (8004390 <FLASH_MassErase+0x34>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <FLASH_MassErase+0x34>)
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <FLASH_MassErase+0x34>)
 800437c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004380:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	200001d0 	.word	0x200001d0
 8004390:	40022000 	.word	0x40022000

08004394 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <FLASH_PageErase+0x38>)
 800439e:	2200      	movs	r2, #0
 80043a0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <FLASH_PageErase+0x3c>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <FLASH_PageErase+0x3c>)
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80043ae:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <FLASH_PageErase+0x3c>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <FLASH_PageErase+0x3c>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <FLASH_PageErase+0x3c>)
 80043ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043be:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	200001d0 	.word	0x200001d0
 80043d0:	40022000 	.word	0x40022000

080043d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b08b      	sub	sp, #44	; 0x2c
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043e2:	2300      	movs	r3, #0
 80043e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e6:	e169      	b.n	80046bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043e8:	2201      	movs	r2, #1
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	429a      	cmp	r2, r3
 8004402:	f040 8158 	bne.w	80046b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a9a      	ldr	r2, [pc, #616]	; (8004674 <HAL_GPIO_Init+0x2a0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d05e      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004410:	4a98      	ldr	r2, [pc, #608]	; (8004674 <HAL_GPIO_Init+0x2a0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d875      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 8004416:	4a98      	ldr	r2, [pc, #608]	; (8004678 <HAL_GPIO_Init+0x2a4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d058      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 800441c:	4a96      	ldr	r2, [pc, #600]	; (8004678 <HAL_GPIO_Init+0x2a4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d86f      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 8004422:	4a96      	ldr	r2, [pc, #600]	; (800467c <HAL_GPIO_Init+0x2a8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d052      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004428:	4a94      	ldr	r2, [pc, #592]	; (800467c <HAL_GPIO_Init+0x2a8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d869      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 800442e:	4a94      	ldr	r2, [pc, #592]	; (8004680 <HAL_GPIO_Init+0x2ac>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d04c      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004434:	4a92      	ldr	r2, [pc, #584]	; (8004680 <HAL_GPIO_Init+0x2ac>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d863      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 800443a:	4a92      	ldr	r2, [pc, #584]	; (8004684 <HAL_GPIO_Init+0x2b0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d046      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
 8004440:	4a90      	ldr	r2, [pc, #576]	; (8004684 <HAL_GPIO_Init+0x2b0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d85d      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 8004446:	2b12      	cmp	r3, #18
 8004448:	d82a      	bhi.n	80044a0 <HAL_GPIO_Init+0xcc>
 800444a:	2b12      	cmp	r3, #18
 800444c:	d859      	bhi.n	8004502 <HAL_GPIO_Init+0x12e>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <HAL_GPIO_Init+0x80>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	080044cf 	.word	0x080044cf
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044bb 	.word	0x080044bb
 8004460:	080044fd 	.word	0x080044fd
 8004464:	08004503 	.word	0x08004503
 8004468:	08004503 	.word	0x08004503
 800446c:	08004503 	.word	0x08004503
 8004470:	08004503 	.word	0x08004503
 8004474:	08004503 	.word	0x08004503
 8004478:	08004503 	.word	0x08004503
 800447c:	08004503 	.word	0x08004503
 8004480:	08004503 	.word	0x08004503
 8004484:	08004503 	.word	0x08004503
 8004488:	08004503 	.word	0x08004503
 800448c:	08004503 	.word	0x08004503
 8004490:	08004503 	.word	0x08004503
 8004494:	08004503 	.word	0x08004503
 8004498:	080044b1 	.word	0x080044b1
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	4a79      	ldr	r2, [pc, #484]	; (8004688 <HAL_GPIO_Init+0x2b4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044a6:	e02c      	b.n	8004502 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	623b      	str	r3, [r7, #32]
          break;
 80044ae:	e029      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	3304      	adds	r3, #4
 80044b6:	623b      	str	r3, [r7, #32]
          break;
 80044b8:	e024      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	3308      	adds	r3, #8
 80044c0:	623b      	str	r3, [r7, #32]
          break;
 80044c2:	e01f      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	330c      	adds	r3, #12
 80044ca:	623b      	str	r3, [r7, #32]
          break;
 80044cc:	e01a      	b.n	8004504 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044d6:	2304      	movs	r3, #4
 80044d8:	623b      	str	r3, [r7, #32]
          break;
 80044da:	e013      	b.n	8004504 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044e4:	2308      	movs	r3, #8
 80044e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	611a      	str	r2, [r3, #16]
          break;
 80044ee:	e009      	b.n	8004504 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044f0:	2308      	movs	r3, #8
 80044f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	615a      	str	r2, [r3, #20]
          break;
 80044fa:	e003      	b.n	8004504 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044fc:	2300      	movs	r3, #0
 80044fe:	623b      	str	r3, [r7, #32]
          break;
 8004500:	e000      	b.n	8004504 <HAL_GPIO_Init+0x130>
          break;
 8004502:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2bff      	cmp	r3, #255	; 0xff
 8004508:	d801      	bhi.n	800450e <HAL_GPIO_Init+0x13a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	e001      	b.n	8004512 <HAL_GPIO_Init+0x13e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2bff      	cmp	r3, #255	; 0xff
 8004518:	d802      	bhi.n	8004520 <HAL_GPIO_Init+0x14c>
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	e002      	b.n	8004526 <HAL_GPIO_Init+0x152>
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	3b08      	subs	r3, #8
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	210f      	movs	r1, #15
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	6a39      	ldr	r1, [r7, #32]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80b1 	beq.w	80046b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004554:	4b4d      	ldr	r3, [pc, #308]	; (800468c <HAL_GPIO_Init+0x2b8>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4a4c      	ldr	r2, [pc, #304]	; (800468c <HAL_GPIO_Init+0x2b8>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6193      	str	r3, [r2, #24]
 8004560:	4b4a      	ldr	r3, [pc, #296]	; (800468c <HAL_GPIO_Init+0x2b8>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800456c:	4a48      	ldr	r2, [pc, #288]	; (8004690 <HAL_GPIO_Init+0x2bc>)
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	3302      	adds	r3, #2
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	220f      	movs	r2, #15
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a40      	ldr	r2, [pc, #256]	; (8004694 <HAL_GPIO_Init+0x2c0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_GPIO_Init+0x1ec>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a3f      	ldr	r2, [pc, #252]	; (8004698 <HAL_GPIO_Init+0x2c4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00d      	beq.n	80045bc <HAL_GPIO_Init+0x1e8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a3e      	ldr	r2, [pc, #248]	; (800469c <HAL_GPIO_Init+0x2c8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <HAL_GPIO_Init+0x1e4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3d      	ldr	r2, [pc, #244]	; (80046a0 <HAL_GPIO_Init+0x2cc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <HAL_GPIO_Init+0x1e0>
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045b4:	2304      	movs	r3, #4
 80045b6:	e004      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e002      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_GPIO_Init+0x1ee>
 80045c0:	2300      	movs	r3, #0
 80045c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c4:	f002 0203 	and.w	r2, r2, #3
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	4093      	lsls	r3, r2
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045d2:	492f      	ldr	r1, [pc, #188]	; (8004690 <HAL_GPIO_Init+0x2bc>)
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	3302      	adds	r3, #2
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045ec:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	492c      	ldr	r1, [pc, #176]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]
 80045f8:	e006      	b.n	8004608 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045fa:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	43db      	mvns	r3, r3
 8004602:	4928      	ldr	r1, [pc, #160]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004604:	4013      	ands	r3, r2
 8004606:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	4922      	ldr	r1, [pc, #136]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
 8004620:	e006      	b.n	8004630 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	43db      	mvns	r3, r3
 800462a:	491e      	ldr	r1, [pc, #120]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 800462c:	4013      	ands	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d006      	beq.n	800464a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4918      	ldr	r1, [pc, #96]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]
 8004648:	e006      	b.n	8004658 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800464a:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	43db      	mvns	r3, r3
 8004652:	4914      	ldr	r1, [pc, #80]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004654:	4013      	ands	r3, r2
 8004656:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d021      	beq.n	80046a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_GPIO_Init+0x2d0>)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	60cb      	str	r3, [r1, #12]
 8004670:	e021      	b.n	80046b6 <HAL_GPIO_Init+0x2e2>
 8004672:	bf00      	nop
 8004674:	10320000 	.word	0x10320000
 8004678:	10310000 	.word	0x10310000
 800467c:	10220000 	.word	0x10220000
 8004680:	10210000 	.word	0x10210000
 8004684:	10120000 	.word	0x10120000
 8004688:	10110000 	.word	0x10110000
 800468c:	40021000 	.word	0x40021000
 8004690:	40010000 	.word	0x40010000
 8004694:	40010800 	.word	0x40010800
 8004698:	40010c00 	.word	0x40010c00
 800469c:	40011000 	.word	0x40011000
 80046a0:	40011400 	.word	0x40011400
 80046a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_GPIO_Init+0x304>)
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	4909      	ldr	r1, [pc, #36]	; (80046d8 <HAL_GPIO_Init+0x304>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	3301      	adds	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f47f ae8e 	bne.w	80043e8 <HAL_GPIO_Init+0x14>
  }
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	372c      	adds	r7, #44	; 0x2c
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40010400 	.word	0x40010400

080046dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e001      	b.n	80046fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	807b      	strh	r3, [r7, #2]
 8004716:	4613      	mov	r3, r2
 8004718:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800471a:	787b      	ldrb	r3, [r7, #1]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004726:	e003      	b.n	8004730 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	041a      	lsls	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800474c:	887a      	ldrh	r2, [r7, #2]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	041a      	lsls	r2, r3, #16
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	43d9      	mvns	r1, r3
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	400b      	ands	r3, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e272      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8087 	beq.w	800489a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800478c:	4b92      	ldr	r3, [pc, #584]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b04      	cmp	r3, #4
 8004796:	d00c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004798:	4b8f      	ldr	r3, [pc, #572]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d112      	bne.n	80047ca <HAL_RCC_OscConfig+0x5e>
 80047a4:	4b8c      	ldr	r3, [pc, #560]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b0:	d10b      	bne.n	80047ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b2:	4b89      	ldr	r3, [pc, #548]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d06c      	beq.n	8004898 <HAL_RCC_OscConfig+0x12c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d168      	bne.n	8004898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e24c      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x76>
 80047d4:	4b80      	ldr	r3, [pc, #512]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a7f      	ldr	r2, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e02e      	b.n	8004840 <HAL_RCC_OscConfig+0xd4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x98>
 80047ea:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a7a      	ldr	r2, [pc, #488]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b78      	ldr	r3, [pc, #480]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a77      	ldr	r2, [pc, #476]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e01d      	b.n	8004840 <HAL_RCC_OscConfig+0xd4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0xbc>
 800480e:	4b72      	ldr	r3, [pc, #456]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a71      	ldr	r2, [pc, #452]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b6f      	ldr	r3, [pc, #444]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0xd4>
 8004828:	4b6b      	ldr	r3, [pc, #428]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a6a      	ldr	r2, [pc, #424]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800483a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7ff fa88 	bl	8003d5c <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004850:	f7ff fa84 	bl	8003d5c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e200      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b5d      	ldr	r3, [pc, #372]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0xe4>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7ff fa74 	bl	8003d5c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7ff fa70 	bl	8003d5c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e1ec      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488a:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x10c>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048a6:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048b2:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x18c>
 80048be:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	4b43      	ldr	r3, [pc, #268]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x176>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e1c0      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4939      	ldr	r1, [pc, #228]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	e03a      	b.n	800496e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_RCC_OscConfig+0x270>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7ff fa29 	bl	8003d5c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490e:	f7ff fa25 	bl	8003d5c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1a1      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4927      	ldr	r1, [pc, #156]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b26      	ldr	r3, [pc, #152]	; (80049dc <HAL_RCC_OscConfig+0x270>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7ff fa08 	bl	8003d5c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004950:	f7ff fa04 	bl	8003d5c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e180      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03a      	beq.n	80049f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d019      	beq.n	80049b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004988:	f7ff f9e8 	bl	8003d5c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004990:	f7ff f9e4 	bl	8003d5c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e160      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049ae:	2001      	movs	r0, #1
 80049b0:	f000 faa6 	bl	8004f00 <RCC_Delay>
 80049b4:	e01c      	b.n	80049f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_OscConfig+0x274>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049bc:	f7ff f9ce 	bl	8003d5c <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c2:	e00f      	b.n	80049e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c4:	f7ff f9ca 	bl	8003d5c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d908      	bls.n	80049e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e146      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	42420000 	.word	0x42420000
 80049e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e4:	4b92      	ldr	r3, [pc, #584]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e9      	bne.n	80049c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80a6 	beq.w	8004b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a02:	4b8b      	ldr	r3, [pc, #556]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	4b88      	ldr	r3, [pc, #544]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4a87      	ldr	r2, [pc, #540]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	61d3      	str	r3, [r2, #28]
 8004a1a:	4b85      	ldr	r3, [pc, #532]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b82      	ldr	r3, [pc, #520]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b7f      	ldr	r3, [pc, #508]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7e      	ldr	r2, [pc, #504]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a42:	f7ff f98b 	bl	8003d5c <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4a:	f7ff f987 	bl	8003d5c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b64      	cmp	r3, #100	; 0x64
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e103      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	4b75      	ldr	r3, [pc, #468]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x312>
 8004a70:	4b6f      	ldr	r3, [pc, #444]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	4a6e      	ldr	r2, [pc, #440]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6213      	str	r3, [r2, #32]
 8004a7c:	e02d      	b.n	8004ada <HAL_RCC_OscConfig+0x36e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x334>
 8004a86:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a69      	ldr	r2, [pc, #420]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6213      	str	r3, [r2, #32]
 8004a92:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4a66      	ldr	r2, [pc, #408]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	6213      	str	r3, [r2, #32]
 8004a9e:	e01c      	b.n	8004ada <HAL_RCC_OscConfig+0x36e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b05      	cmp	r3, #5
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x356>
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	4a60      	ldr	r2, [pc, #384]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	f043 0304 	orr.w	r3, r3, #4
 8004ab2:	6213      	str	r3, [r2, #32]
 8004ab4:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4a5d      	ldr	r2, [pc, #372]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6213      	str	r3, [r2, #32]
 8004ac0:	e00b      	b.n	8004ada <HAL_RCC_OscConfig+0x36e>
 8004ac2:	4b5b      	ldr	r3, [pc, #364]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4a5a      	ldr	r2, [pc, #360]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	6213      	str	r3, [r2, #32]
 8004ace:	4b58      	ldr	r3, [pc, #352]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	4a57      	ldr	r2, [pc, #348]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d015      	beq.n	8004b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae2:	f7ff f93b 	bl	8003d5c <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aea:	f7ff f937 	bl	8003d5c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0b1      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ee      	beq.n	8004aea <HAL_RCC_OscConfig+0x37e>
 8004b0c:	e014      	b.n	8004b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0e:	f7ff f925 	bl	8003d5c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7ff f921 	bl	8003d5c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e09b      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ee      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3e:	4b3c      	ldr	r3, [pc, #240]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	4a3b      	ldr	r2, [pc, #236]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8087 	beq.w	8004c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b54:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d061      	beq.n	8004c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d146      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b68:	4b33      	ldr	r3, [pc, #204]	; (8004c38 <HAL_RCC_OscConfig+0x4cc>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7ff f8f5 	bl	8003d5c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b76:	f7ff f8f1 	bl	8003d5c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e06d      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b88:	4b29      	ldr	r3, [pc, #164]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d108      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	4921      	ldr	r1, [pc, #132]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a19      	ldr	r1, [r3, #32]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	491b      	ldr	r1, [pc, #108]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCC_OscConfig+0x4cc>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bce:	f7ff f8c5 	bl	8003d5c <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd6:	f7ff f8c1 	bl	8003d5c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e03d      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x46a>
 8004bf4:	e035      	b.n	8004c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <HAL_RCC_OscConfig+0x4cc>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7ff f8ae 	bl	8003d5c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7ff f8aa 	bl	8003d5c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e026      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x498>
 8004c22:	e01e      	b.n	8004c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e019      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40007000 	.word	0x40007000
 8004c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_OscConfig+0x500>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000

08004c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0d0      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b6a      	ldr	r3, [pc, #424]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d910      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 0207 	bic.w	r2, r3, #7
 8004c9a:	4965      	ldr	r1, [pc, #404]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0b8      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ccc:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a58      	ldr	r2, [pc, #352]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce4:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a52      	ldr	r2, [pc, #328]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	494d      	ldr	r1, [pc, #308]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d040      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d115      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e07f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e073      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e06b      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4936      	ldr	r1, [pc, #216]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7fe fffc 	bl	8003d5c <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fe fff8 	bl	8003d5c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e053      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 020c 	and.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1eb      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d210      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 0207 	bic.w	r2, r3, #7
 8004da6:	4922      	ldr	r1, [pc, #136]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e032      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4916      	ldr	r1, [pc, #88]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	490e      	ldr	r1, [pc, #56]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dfe:	f000 f821 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	490a      	ldr	r1, [pc, #40]	; (8004e38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	5ccb      	ldrb	r3, [r1, r3]
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x1cc>)
 8004e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_ClockConfig+0x1d0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe ff5a 	bl	8003cd8 <HAL_InitTick>

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40021000 	.word	0x40021000
 8004e38:	08006990 	.word	0x08006990
 8004e3c:	2000001c 	.word	0x2000001c
 8004e40:	20000020 	.word	0x20000020

08004e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	b490      	push	{r4, r7}
 8004e46:	b08a      	sub	sp, #40	; 0x28
 8004e48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e4a:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0xac>)
 8004e4c:	1d3c      	adds	r4, r7, #4
 8004e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e54:	f240 2301 	movw	r3, #513	; 0x201
 8004e58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	2300      	movs	r3, #0
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e6e:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x40>
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x46>
 8004e82:	e02b      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e84:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e86:	623b      	str	r3, [r7, #32]
      break;
 8004e88:	e02b      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	0c9b      	lsrs	r3, r3, #18
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	3328      	adds	r3, #40	; 0x28
 8004e94:	443b      	add	r3, r7
 8004e96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ea6:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	0c5b      	lsrs	r3, r3, #17
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	3328      	adds	r3, #40	; 0x28
 8004eb2:	443b      	add	r3, r7
 8004eb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004eb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ebe:	fb03 f202 	mul.w	r2, r3, r2
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	e004      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	623b      	str	r3, [r7, #32]
      break;
 8004eda:	e002      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ede:	623b      	str	r3, [r7, #32]
      break;
 8004ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3728      	adds	r7, #40	; 0x28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc90      	pop	{r4, r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	08006980 	.word	0x08006980
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	003d0900 	.word	0x003d0900

08004f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <RCC_Delay+0x34>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <RCC_Delay+0x38>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	0a5b      	lsrs	r3, r3, #9
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f1c:	bf00      	nop
  }
  while (Delay --);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1e5a      	subs	r2, r3, #1
 8004f22:	60fa      	str	r2, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f9      	bne.n	8004f1c <RCC_Delay+0x1c>
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	2000001c 	.word	0x2000001c
 8004f38:	10624dd3 	.word	0x10624dd3

08004f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e076      	b.n	800503c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d108      	bne.n	8004f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5e:	d009      	beq.n	8004f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	61da      	str	r2, [r3, #28]
 8004f66:	e005      	b.n	8004f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fe fd8a 	bl	8003aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff8:	ea42 0103 	orr.w	r1, r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	0c1a      	lsrs	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f002 0204 	and.w	r2, r2, #4
 800501a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08c      	sub	sp, #48	; 0x30
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005052:	2301      	movs	r3, #1
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_SPI_TransmitReceive+0x26>
 8005066:	2302      	movs	r3, #2
 8005068:	e18a      	b.n	8005380 <HAL_SPI_TransmitReceive+0x33c>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005072:	f7fe fe73 	bl	8003d5c <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005088:	887b      	ldrh	r3, [r7, #2]
 800508a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800508c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005090:	2b01      	cmp	r3, #1
 8005092:	d00f      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x70>
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800509a:	d107      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x68>
 80050a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d003      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050b2:	e15b      	b.n	800536c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x82>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x82>
 80050c0:	887b      	ldrh	r3, [r7, #2]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050cc:	e14e      	b.n	800536c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d003      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2205      	movs	r2, #5
 80050de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	887a      	ldrh	r2, [r7, #2]
 80050f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	887a      	ldrh	r2, [r7, #2]
 80050f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	887a      	ldrh	r2, [r7, #2]
 800510a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d007      	beq.n	8005136 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005134:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d178      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_TransmitReceive+0x10a>
 8005148:	8b7b      	ldrh	r3, [r7, #26]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d166      	bne.n	800521c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005172:	e053      	b.n	800521c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d11b      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x176>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d016      	beq.n	80051ba <HAL_SPI_TransmitReceive+0x176>
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d113      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	881a      	ldrh	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d119      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x1b8>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d014      	beq.n	80051fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	b292      	uxth	r2, r2
 80051de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051f8:	2301      	movs	r3, #1
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051fc:	f7fe fdae 	bl	8003d5c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005208:	429a      	cmp	r2, r3
 800520a:	d807      	bhi.n	800521c <HAL_SPI_TransmitReceive+0x1d8>
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d003      	beq.n	800521c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800521a:	e0a7      	b.n	800536c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1a6      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x130>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1a1      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x130>
 8005230:	e07c      	b.n	800532c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_SPI_TransmitReceive+0x1fc>
 800523a:	8b7b      	ldrh	r3, [r7, #26]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d16b      	bne.n	8005318 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	7812      	ldrb	r2, [r2, #0]
 800524c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005266:	e057      	b.n	8005318 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b02      	cmp	r3, #2
 8005274:	d11c      	bne.n	80052b0 <HAL_SPI_TransmitReceive+0x26c>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d017      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x26c>
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d114      	bne.n	80052b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	330c      	adds	r3, #12
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d119      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x2ae>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d014      	beq.n	80052f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052ee:	2301      	movs	r3, #1
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052f2:	f7fe fd33 	bl	8003d5c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052fe:	429a      	cmp	r2, r3
 8005300:	d803      	bhi.n	800530a <HAL_SPI_TransmitReceive+0x2c6>
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d102      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x2cc>
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005316:	e029      	b.n	800536c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1a2      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x224>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d19d      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f8b1 	bl	8005498 <SPI_EndRxTxTransaction>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005348:	e010      	b.n	800536c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10b      	bne.n	800536a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	e000      	b.n	800536c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800536a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800537c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005380:	4618      	mov	r0, r3
 8005382:	3730      	adds	r7, #48	; 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005398:	f7fe fce0 	bl	8003d5c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	4413      	add	r3, r2
 80053a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053a8:	f7fe fcd8 	bl	8003d5c <HAL_GetTick>
 80053ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ae:	4b39      	ldr	r3, [pc, #228]	; (8005494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	015b      	lsls	r3, r3, #5
 80053b4:	0d1b      	lsrs	r3, r3, #20
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053be:	e054      	b.n	800546a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d050      	beq.n	800546a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053c8:	f7fe fcc8 	bl	8003d5c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d902      	bls.n	80053de <SPI_WaitFlagStateUntilTimeout+0x56>
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d13d      	bne.n	800545a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f6:	d111      	bne.n	800541c <SPI_WaitFlagStateUntilTimeout+0x94>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005400:	d004      	beq.n	800540c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d107      	bne.n	800541c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005424:	d10f      	bne.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e017      	b.n	800548a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3b01      	subs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	429a      	cmp	r2, r3
 8005486:	d19b      	bne.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	2000001c 	.word	0x2000001c

08005498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff ff6a 	bl	8005388 <SPI_WaitFlagStateUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e000      	b.n	80054cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e041      	b.n	800556a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fe fb1e 	bl	8003b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fa70 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d001      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e03a      	b.n	8005602 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_TIM_Base_Start_IT+0x98>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x58>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d009      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x58>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a14      	ldr	r2, [pc, #80]	; (8005610 <HAL_TIM_Base_Start_IT+0x9c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x58>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <HAL_TIM_Base_Start_IT+0xa0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d111      	bne.n	80055f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b06      	cmp	r3, #6
 80055dc:	d010      	beq.n	8005600 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	e007      	b.n	8005600 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800

08005618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b02      	cmp	r3, #2
 800562c:	d122      	bne.n	8005674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b02      	cmp	r3, #2
 800563a:	d11b      	bne.n	8005674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0202 	mvn.w	r2, #2
 8005644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9b1 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9a4 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f9b3 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b04      	cmp	r3, #4
 8005680:	d122      	bne.n	80056c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b04      	cmp	r3, #4
 800568e:	d11b      	bne.n	80056c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0204 	mvn.w	r2, #4
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f987 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f97a 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f989 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d122      	bne.n	800571c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d11b      	bne.n	800571c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0208 	mvn.w	r2, #8
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2204      	movs	r2, #4
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f95d 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f950 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f95f 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b10      	cmp	r3, #16
 8005728:	d122      	bne.n	8005770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b10      	cmp	r3, #16
 8005736:	d11b      	bne.n	8005770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0210 	mvn.w	r2, #16
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2208      	movs	r2, #8
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f933 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f926 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f935 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b01      	cmp	r3, #1
 800577c:	d10e      	bne.n	800579c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d107      	bne.n	800579c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0201 	mvn.w	r2, #1
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb f830 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a6:	2b80      	cmp	r3, #128	; 0x80
 80057a8:	d10e      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b4:	2b80      	cmp	r3, #128	; 0x80
 80057b6:	d107      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa77 	bl	8005cb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d10e      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d107      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8f9 	bl	80059e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b20      	cmp	r3, #32
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0220 	mvn.w	r2, #32
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa42 	bl	8005ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIM_ConfigClockSource+0x18>
 800583c:	2302      	movs	r3, #2
 800583e:	e0b3      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x180>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800585e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005866:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005878:	d03e      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xd0>
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	f200 8087 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x168>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	f000 8085 	beq.w	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d87f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
 8005890:	2b70      	cmp	r3, #112	; 0x70
 8005892:	d01a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xa2>
 8005894:	2b70      	cmp	r3, #112	; 0x70
 8005896:	d87b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
 8005898:	2b60      	cmp	r3, #96	; 0x60
 800589a:	d050      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x116>
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d877      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
 80058a0:	2b50      	cmp	r3, #80	; 0x50
 80058a2:	d03c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xf6>
 80058a4:	2b50      	cmp	r3, #80	; 0x50
 80058a6:	d873      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d058      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x136>
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d86f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d064      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x156>
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d86b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d060      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x156>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d867      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x156>
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d05a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058c8:	e062      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f000 f966 	bl	8005baa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04e      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f000 f94f 	bl	8005baa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e03b      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f000 f8c6 	bl	8005abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	; 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f91d 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 800593c:	e02b      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f000 f8e4 	bl	8005b18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	; 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f90d 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 800595c:	e01b      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	461a      	mov	r2, r3
 800596c:	f000 f8a6 	bl	8005abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f8fd 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 800597c:	e00b      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 f8f4 	bl	8005b76 <TIM_ITRx_SetConfig>
        break;
 800598e:	e002      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005994:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <TIM_Base_SetConfig+0xb8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_Base_SetConfig+0x30>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0x30>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <TIM_Base_SetConfig+0xbc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0x30>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <TIM_Base_SetConfig+0xc0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <TIM_Base_SetConfig+0xb8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <TIM_Base_SetConfig+0x62>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a48:	d007      	beq.n	8005a5a <TIM_Base_SetConfig+0x62>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <TIM_Base_SetConfig+0xbc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_Base_SetConfig+0x62>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <TIM_Base_SetConfig+0xc0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d108      	bne.n	8005a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a07      	ldr	r2, [pc, #28]	; (8005ab0 <TIM_Base_SetConfig+0xb8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d103      	bne.n	8005aa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	615a      	str	r2, [r3, #20]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800

08005abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 030a 	bic.w	r3, r3, #10
 8005af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f023 0210 	bic.w	r2, r3, #16
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	031b      	lsls	r3, r3, #12
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f043 0307 	orr.w	r3, r3, #7
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b087      	sub	sp, #28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	021a      	lsls	r2, r3, #8
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	609a      	str	r2, [r3, #8]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e046      	b.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a16      	ldr	r2, [pc, #88]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00e      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d009      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10c      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800

08005ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <__errno>:
 8005cc8:	4b01      	ldr	r3, [pc, #4]	; (8005cd0 <__errno+0x8>)
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000028 	.word	0x20000028

08005cd4 <__libc_init_array>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	4d0c      	ldr	r5, [pc, #48]	; (8005d0c <__libc_init_array+0x38>)
 8005cda:	4c0d      	ldr	r4, [pc, #52]	; (8005d10 <__libc_init_array+0x3c>)
 8005cdc:	1b64      	subs	r4, r4, r5
 8005cde:	10a4      	asrs	r4, r4, #2
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	d109      	bne.n	8005cf8 <__libc_init_array+0x24>
 8005ce4:	f000 fc9c 	bl	8006620 <_init>
 8005ce8:	2600      	movs	r6, #0
 8005cea:	4d0a      	ldr	r5, [pc, #40]	; (8005d14 <__libc_init_array+0x40>)
 8005cec:	4c0a      	ldr	r4, [pc, #40]	; (8005d18 <__libc_init_array+0x44>)
 8005cee:	1b64      	subs	r4, r4, r5
 8005cf0:	10a4      	asrs	r4, r4, #2
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	d105      	bne.n	8005d02 <__libc_init_array+0x2e>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfc:	4798      	blx	r3
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7ee      	b.n	8005ce0 <__libc_init_array+0xc>
 8005d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d06:	4798      	blx	r3
 8005d08:	3601      	adds	r6, #1
 8005d0a:	e7f2      	b.n	8005cf2 <__libc_init_array+0x1e>
 8005d0c:	080069d4 	.word	0x080069d4
 8005d10:	080069d4 	.word	0x080069d4
 8005d14:	080069d4 	.word	0x080069d4
 8005d18:	080069d8 	.word	0x080069d8

08005d1c <memset>:
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4402      	add	r2, r0
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d100      	bne.n	8005d26 <memset+0xa>
 8005d24:	4770      	bx	lr
 8005d26:	f803 1b01 	strb.w	r1, [r3], #1
 8005d2a:	e7f9      	b.n	8005d20 <memset+0x4>

08005d2c <siprintf>:
 8005d2c:	b40e      	push	{r1, r2, r3}
 8005d2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d32:	b500      	push	{lr}
 8005d34:	b09c      	sub	sp, #112	; 0x70
 8005d36:	ab1d      	add	r3, sp, #116	; 0x74
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	9006      	str	r0, [sp, #24]
 8005d3c:	9107      	str	r1, [sp, #28]
 8005d3e:	9104      	str	r1, [sp, #16]
 8005d40:	4808      	ldr	r0, [pc, #32]	; (8005d64 <siprintf+0x38>)
 8005d42:	4909      	ldr	r1, [pc, #36]	; (8005d68 <siprintf+0x3c>)
 8005d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d48:	9105      	str	r1, [sp, #20]
 8005d4a:	6800      	ldr	r0, [r0, #0]
 8005d4c:	a902      	add	r1, sp, #8
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	f000 f868 	bl	8005e24 <_svfiprintf_r>
 8005d54:	2200      	movs	r2, #0
 8005d56:	9b02      	ldr	r3, [sp, #8]
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	b01c      	add	sp, #112	; 0x70
 8005d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d60:	b003      	add	sp, #12
 8005d62:	4770      	bx	lr
 8005d64:	20000028 	.word	0x20000028
 8005d68:	ffff0208 	.word	0xffff0208

08005d6c <__ssputs_r>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	688e      	ldr	r6, [r1, #8]
 8005d72:	4682      	mov	sl, r0
 8005d74:	429e      	cmp	r6, r3
 8005d76:	460c      	mov	r4, r1
 8005d78:	4690      	mov	r8, r2
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	d838      	bhi.n	8005df0 <__ssputs_r+0x84>
 8005d7e:	898a      	ldrh	r2, [r1, #12]
 8005d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d84:	d032      	beq.n	8005dec <__ssputs_r+0x80>
 8005d86:	6825      	ldr	r5, [r4, #0]
 8005d88:	6909      	ldr	r1, [r1, #16]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	eba5 0901 	sub.w	r9, r5, r1
 8005d90:	6965      	ldr	r5, [r4, #20]
 8005d92:	444b      	add	r3, r9
 8005d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d9c:	106d      	asrs	r5, r5, #1
 8005d9e:	429d      	cmp	r5, r3
 8005da0:	bf38      	it	cc
 8005da2:	461d      	movcc	r5, r3
 8005da4:	0553      	lsls	r3, r2, #21
 8005da6:	d531      	bpl.n	8005e0c <__ssputs_r+0xa0>
 8005da8:	4629      	mov	r1, r5
 8005daa:	f000 fb6f 	bl	800648c <_malloc_r>
 8005dae:	4606      	mov	r6, r0
 8005db0:	b950      	cbnz	r0, 8005dc8 <__ssputs_r+0x5c>
 8005db2:	230c      	movs	r3, #12
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	f8ca 3000 	str.w	r3, [sl]
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	464a      	mov	r2, r9
 8005dca:	6921      	ldr	r1, [r4, #16]
 8005dcc:	f000 face 	bl	800636c <memcpy>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	6126      	str	r6, [r4, #16]
 8005dde:	444e      	add	r6, r9
 8005de0:	6026      	str	r6, [r4, #0]
 8005de2:	463e      	mov	r6, r7
 8005de4:	6165      	str	r5, [r4, #20]
 8005de6:	eba5 0509 	sub.w	r5, r5, r9
 8005dea:	60a5      	str	r5, [r4, #8]
 8005dec:	42be      	cmp	r6, r7
 8005dee:	d900      	bls.n	8005df2 <__ssputs_r+0x86>
 8005df0:	463e      	mov	r6, r7
 8005df2:	4632      	mov	r2, r6
 8005df4:	4641      	mov	r1, r8
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	f000 fac6 	bl	8006388 <memmove>
 8005dfc:	68a3      	ldr	r3, [r4, #8]
 8005dfe:	2000      	movs	r0, #0
 8005e00:	1b9b      	subs	r3, r3, r6
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	4433      	add	r3, r6
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	e7db      	b.n	8005dc4 <__ssputs_r+0x58>
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	f000 fbb1 	bl	8006574 <_realloc_r>
 8005e12:	4606      	mov	r6, r0
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1e1      	bne.n	8005ddc <__ssputs_r+0x70>
 8005e18:	4650      	mov	r0, sl
 8005e1a:	6921      	ldr	r1, [r4, #16]
 8005e1c:	f000 face 	bl	80063bc <_free_r>
 8005e20:	e7c7      	b.n	8005db2 <__ssputs_r+0x46>
	...

08005e24 <_svfiprintf_r>:
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	4698      	mov	r8, r3
 8005e2a:	898b      	ldrh	r3, [r1, #12]
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	460d      	mov	r5, r1
 8005e32:	4614      	mov	r4, r2
 8005e34:	b09d      	sub	sp, #116	; 0x74
 8005e36:	d50e      	bpl.n	8005e56 <_svfiprintf_r+0x32>
 8005e38:	690b      	ldr	r3, [r1, #16]
 8005e3a:	b963      	cbnz	r3, 8005e56 <_svfiprintf_r+0x32>
 8005e3c:	2140      	movs	r1, #64	; 0x40
 8005e3e:	f000 fb25 	bl	800648c <_malloc_r>
 8005e42:	6028      	str	r0, [r5, #0]
 8005e44:	6128      	str	r0, [r5, #16]
 8005e46:	b920      	cbnz	r0, 8005e52 <_svfiprintf_r+0x2e>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e50:	e0d1      	b.n	8005ff6 <_svfiprintf_r+0x1d2>
 8005e52:	2340      	movs	r3, #64	; 0x40
 8005e54:	616b      	str	r3, [r5, #20]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5a:	2320      	movs	r3, #32
 8005e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e60:	2330      	movs	r3, #48	; 0x30
 8005e62:	f04f 0901 	mov.w	r9, #1
 8005e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006010 <_svfiprintf_r+0x1ec>
 8005e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e72:	4623      	mov	r3, r4
 8005e74:	469a      	mov	sl, r3
 8005e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e7a:	b10a      	cbz	r2, 8005e80 <_svfiprintf_r+0x5c>
 8005e7c:	2a25      	cmp	r2, #37	; 0x25
 8005e7e:	d1f9      	bne.n	8005e74 <_svfiprintf_r+0x50>
 8005e80:	ebba 0b04 	subs.w	fp, sl, r4
 8005e84:	d00b      	beq.n	8005e9e <_svfiprintf_r+0x7a>
 8005e86:	465b      	mov	r3, fp
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f7ff ff6d 	bl	8005d6c <__ssputs_r>
 8005e92:	3001      	adds	r0, #1
 8005e94:	f000 80aa 	beq.w	8005fec <_svfiprintf_r+0x1c8>
 8005e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e9a:	445a      	add	r2, fp
 8005e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 80a2 	beq.w	8005fec <_svfiprintf_r+0x1c8>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eb2:	f10a 0a01 	add.w	sl, sl, #1
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	9307      	str	r3, [sp, #28]
 8005eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8005ec0:	4654      	mov	r4, sl
 8005ec2:	2205      	movs	r2, #5
 8005ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec8:	4851      	ldr	r0, [pc, #324]	; (8006010 <_svfiprintf_r+0x1ec>)
 8005eca:	f000 fa41 	bl	8006350 <memchr>
 8005ece:	9a04      	ldr	r2, [sp, #16]
 8005ed0:	b9d8      	cbnz	r0, 8005f0a <_svfiprintf_r+0xe6>
 8005ed2:	06d0      	lsls	r0, r2, #27
 8005ed4:	bf44      	itt	mi
 8005ed6:	2320      	movmi	r3, #32
 8005ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005edc:	0711      	lsls	r1, r2, #28
 8005ede:	bf44      	itt	mi
 8005ee0:	232b      	movmi	r3, #43	; 0x2b
 8005ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eea:	2b2a      	cmp	r3, #42	; 0x2a
 8005eec:	d015      	beq.n	8005f1a <_svfiprintf_r+0xf6>
 8005eee:	4654      	mov	r4, sl
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	f04f 0c0a 	mov.w	ip, #10
 8005ef6:	9a07      	ldr	r2, [sp, #28]
 8005ef8:	4621      	mov	r1, r4
 8005efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efe:	3b30      	subs	r3, #48	; 0x30
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	d94e      	bls.n	8005fa2 <_svfiprintf_r+0x17e>
 8005f04:	b1b0      	cbz	r0, 8005f34 <_svfiprintf_r+0x110>
 8005f06:	9207      	str	r2, [sp, #28]
 8005f08:	e014      	b.n	8005f34 <_svfiprintf_r+0x110>
 8005f0a:	eba0 0308 	sub.w	r3, r0, r8
 8005f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	46a2      	mov	sl, r4
 8005f16:	9304      	str	r3, [sp, #16]
 8005f18:	e7d2      	b.n	8005ec0 <_svfiprintf_r+0x9c>
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	1d19      	adds	r1, r3, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	9103      	str	r1, [sp, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bfbb      	ittet	lt
 8005f26:	425b      	neglt	r3, r3
 8005f28:	f042 0202 	orrlt.w	r2, r2, #2
 8005f2c:	9307      	strge	r3, [sp, #28]
 8005f2e:	9307      	strlt	r3, [sp, #28]
 8005f30:	bfb8      	it	lt
 8005f32:	9204      	strlt	r2, [sp, #16]
 8005f34:	7823      	ldrb	r3, [r4, #0]
 8005f36:	2b2e      	cmp	r3, #46	; 0x2e
 8005f38:	d10c      	bne.n	8005f54 <_svfiprintf_r+0x130>
 8005f3a:	7863      	ldrb	r3, [r4, #1]
 8005f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3e:	d135      	bne.n	8005fac <_svfiprintf_r+0x188>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	3402      	adds	r4, #2
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	9203      	str	r2, [sp, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bfb8      	it	lt
 8005f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f52:	9305      	str	r3, [sp, #20]
 8005f54:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006014 <_svfiprintf_r+0x1f0>
 8005f58:	2203      	movs	r2, #3
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	7821      	ldrb	r1, [r4, #0]
 8005f5e:	f000 f9f7 	bl	8006350 <memchr>
 8005f62:	b140      	cbz	r0, 8005f76 <_svfiprintf_r+0x152>
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	eba0 000a 	sub.w	r0, r0, sl
 8005f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f6e:	9b04      	ldr	r3, [sp, #16]
 8005f70:	3401      	adds	r4, #1
 8005f72:	4303      	orrs	r3, r0
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7a:	2206      	movs	r2, #6
 8005f7c:	4826      	ldr	r0, [pc, #152]	; (8006018 <_svfiprintf_r+0x1f4>)
 8005f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f82:	f000 f9e5 	bl	8006350 <memchr>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d038      	beq.n	8005ffc <_svfiprintf_r+0x1d8>
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <_svfiprintf_r+0x1f8>)
 8005f8c:	bb1b      	cbnz	r3, 8005fd6 <_svfiprintf_r+0x1b2>
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	3307      	adds	r3, #7
 8005f92:	f023 0307 	bic.w	r3, r3, #7
 8005f96:	3308      	adds	r3, #8
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9c:	4433      	add	r3, r6
 8005f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa0:	e767      	b.n	8005e72 <_svfiprintf_r+0x4e>
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005faa:	e7a5      	b.n	8005ef8 <_svfiprintf_r+0xd4>
 8005fac:	2300      	movs	r3, #0
 8005fae:	f04f 0c0a 	mov.w	ip, #10
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	3401      	adds	r4, #1
 8005fb6:	9305      	str	r3, [sp, #20]
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fbe:	3a30      	subs	r2, #48	; 0x30
 8005fc0:	2a09      	cmp	r2, #9
 8005fc2:	d903      	bls.n	8005fcc <_svfiprintf_r+0x1a8>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0c5      	beq.n	8005f54 <_svfiprintf_r+0x130>
 8005fc8:	9105      	str	r1, [sp, #20]
 8005fca:	e7c3      	b.n	8005f54 <_svfiprintf_r+0x130>
 8005fcc:	4604      	mov	r4, r0
 8005fce:	2301      	movs	r3, #1
 8005fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd4:	e7f0      	b.n	8005fb8 <_svfiprintf_r+0x194>
 8005fd6:	ab03      	add	r3, sp, #12
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	462a      	mov	r2, r5
 8005fdc:	4638      	mov	r0, r7
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <_svfiprintf_r+0x1fc>)
 8005fe0:	a904      	add	r1, sp, #16
 8005fe2:	f3af 8000 	nop.w
 8005fe6:	1c42      	adds	r2, r0, #1
 8005fe8:	4606      	mov	r6, r0
 8005fea:	d1d6      	bne.n	8005f9a <_svfiprintf_r+0x176>
 8005fec:	89ab      	ldrh	r3, [r5, #12]
 8005fee:	065b      	lsls	r3, r3, #25
 8005ff0:	f53f af2c 	bmi.w	8005e4c <_svfiprintf_r+0x28>
 8005ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ff6:	b01d      	add	sp, #116	; 0x74
 8005ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	ab03      	add	r3, sp, #12
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	462a      	mov	r2, r5
 8006002:	4638      	mov	r0, r7
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <_svfiprintf_r+0x1fc>)
 8006006:	a904      	add	r1, sp, #16
 8006008:	f000 f87c 	bl	8006104 <_printf_i>
 800600c:	e7eb      	b.n	8005fe6 <_svfiprintf_r+0x1c2>
 800600e:	bf00      	nop
 8006010:	080069a0 	.word	0x080069a0
 8006014:	080069a6 	.word	0x080069a6
 8006018:	080069aa 	.word	0x080069aa
 800601c:	00000000 	.word	0x00000000
 8006020:	08005d6d 	.word	0x08005d6d

08006024 <_printf_common>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	4616      	mov	r6, r2
 800602a:	4699      	mov	r9, r3
 800602c:	688a      	ldr	r2, [r1, #8]
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	4607      	mov	r7, r0
 8006032:	4293      	cmp	r3, r2
 8006034:	bfb8      	it	lt
 8006036:	4613      	movlt	r3, r2
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800603e:	460c      	mov	r4, r1
 8006040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006044:	b10a      	cbz	r2, 800604a <_printf_common+0x26>
 8006046:	3301      	adds	r3, #1
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0699      	lsls	r1, r3, #26
 800604e:	bf42      	ittt	mi
 8006050:	6833      	ldrmi	r3, [r6, #0]
 8006052:	3302      	addmi	r3, #2
 8006054:	6033      	strmi	r3, [r6, #0]
 8006056:	6825      	ldr	r5, [r4, #0]
 8006058:	f015 0506 	ands.w	r5, r5, #6
 800605c:	d106      	bne.n	800606c <_printf_common+0x48>
 800605e:	f104 0a19 	add.w	sl, r4, #25
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	6832      	ldr	r2, [r6, #0]
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	42ab      	cmp	r3, r5
 800606a:	dc28      	bgt.n	80060be <_printf_common+0x9a>
 800606c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006070:	1e13      	subs	r3, r2, #0
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	bf18      	it	ne
 8006076:	2301      	movne	r3, #1
 8006078:	0692      	lsls	r2, r2, #26
 800607a:	d42d      	bmi.n	80060d8 <_printf_common+0xb4>
 800607c:	4649      	mov	r1, r9
 800607e:	4638      	mov	r0, r7
 8006080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d020      	beq.n	80060cc <_printf_common+0xa8>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	68e5      	ldr	r5, [r4, #12]
 800608e:	f003 0306 	and.w	r3, r3, #6
 8006092:	2b04      	cmp	r3, #4
 8006094:	bf18      	it	ne
 8006096:	2500      	movne	r5, #0
 8006098:	6832      	ldr	r2, [r6, #0]
 800609a:	f04f 0600 	mov.w	r6, #0
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	bf08      	it	eq
 80060a2:	1aad      	subeq	r5, r5, r2
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	bf08      	it	eq
 80060a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060ac:	4293      	cmp	r3, r2
 80060ae:	bfc4      	itt	gt
 80060b0:	1a9b      	subgt	r3, r3, r2
 80060b2:	18ed      	addgt	r5, r5, r3
 80060b4:	341a      	adds	r4, #26
 80060b6:	42b5      	cmp	r5, r6
 80060b8:	d11a      	bne.n	80060f0 <_printf_common+0xcc>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e008      	b.n	80060d0 <_printf_common+0xac>
 80060be:	2301      	movs	r3, #1
 80060c0:	4652      	mov	r2, sl
 80060c2:	4649      	mov	r1, r9
 80060c4:	4638      	mov	r0, r7
 80060c6:	47c0      	blx	r8
 80060c8:	3001      	adds	r0, #1
 80060ca:	d103      	bne.n	80060d4 <_printf_common+0xb0>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d4:	3501      	adds	r5, #1
 80060d6:	e7c4      	b.n	8006062 <_printf_common+0x3e>
 80060d8:	2030      	movs	r0, #48	; 0x30
 80060da:	18e1      	adds	r1, r4, r3
 80060dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e6:	4422      	add	r2, r4
 80060e8:	3302      	adds	r3, #2
 80060ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060ee:	e7c5      	b.n	800607c <_printf_common+0x58>
 80060f0:	2301      	movs	r3, #1
 80060f2:	4622      	mov	r2, r4
 80060f4:	4649      	mov	r1, r9
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c0      	blx	r8
 80060fa:	3001      	adds	r0, #1
 80060fc:	d0e6      	beq.n	80060cc <_printf_common+0xa8>
 80060fe:	3601      	adds	r6, #1
 8006100:	e7d9      	b.n	80060b6 <_printf_common+0x92>
	...

08006104 <_printf_i>:
 8006104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	7e0f      	ldrb	r7, [r1, #24]
 800610a:	4691      	mov	r9, r2
 800610c:	2f78      	cmp	r7, #120	; 0x78
 800610e:	4680      	mov	r8, r0
 8006110:	460c      	mov	r4, r1
 8006112:	469a      	mov	sl, r3
 8006114:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800611a:	d807      	bhi.n	800612c <_printf_i+0x28>
 800611c:	2f62      	cmp	r7, #98	; 0x62
 800611e:	d80a      	bhi.n	8006136 <_printf_i+0x32>
 8006120:	2f00      	cmp	r7, #0
 8006122:	f000 80d9 	beq.w	80062d8 <_printf_i+0x1d4>
 8006126:	2f58      	cmp	r7, #88	; 0x58
 8006128:	f000 80a4 	beq.w	8006274 <_printf_i+0x170>
 800612c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006134:	e03a      	b.n	80061ac <_printf_i+0xa8>
 8006136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613a:	2b15      	cmp	r3, #21
 800613c:	d8f6      	bhi.n	800612c <_printf_i+0x28>
 800613e:	a101      	add	r1, pc, #4	; (adr r1, 8006144 <_printf_i+0x40>)
 8006140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006144:	0800619d 	.word	0x0800619d
 8006148:	080061b1 	.word	0x080061b1
 800614c:	0800612d 	.word	0x0800612d
 8006150:	0800612d 	.word	0x0800612d
 8006154:	0800612d 	.word	0x0800612d
 8006158:	0800612d 	.word	0x0800612d
 800615c:	080061b1 	.word	0x080061b1
 8006160:	0800612d 	.word	0x0800612d
 8006164:	0800612d 	.word	0x0800612d
 8006168:	0800612d 	.word	0x0800612d
 800616c:	0800612d 	.word	0x0800612d
 8006170:	080062bf 	.word	0x080062bf
 8006174:	080061e1 	.word	0x080061e1
 8006178:	080062a1 	.word	0x080062a1
 800617c:	0800612d 	.word	0x0800612d
 8006180:	0800612d 	.word	0x0800612d
 8006184:	080062e1 	.word	0x080062e1
 8006188:	0800612d 	.word	0x0800612d
 800618c:	080061e1 	.word	0x080061e1
 8006190:	0800612d 	.word	0x0800612d
 8006194:	0800612d 	.word	0x0800612d
 8006198:	080062a9 	.word	0x080062a9
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	602a      	str	r2, [r5, #0]
 80061a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0a4      	b.n	80062fa <_printf_i+0x1f6>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	6829      	ldr	r1, [r5, #0]
 80061b4:	0606      	lsls	r6, r0, #24
 80061b6:	f101 0304 	add.w	r3, r1, #4
 80061ba:	d50a      	bpl.n	80061d2 <_printf_i+0xce>
 80061bc:	680e      	ldr	r6, [r1, #0]
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	da03      	bge.n	80061cc <_printf_i+0xc8>
 80061c4:	232d      	movs	r3, #45	; 0x2d
 80061c6:	4276      	negs	r6, r6
 80061c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061cc:	230a      	movs	r3, #10
 80061ce:	485e      	ldr	r0, [pc, #376]	; (8006348 <_printf_i+0x244>)
 80061d0:	e019      	b.n	8006206 <_printf_i+0x102>
 80061d2:	680e      	ldr	r6, [r1, #0]
 80061d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	bf18      	it	ne
 80061dc:	b236      	sxthne	r6, r6
 80061de:	e7ef      	b.n	80061c0 <_printf_i+0xbc>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	1d19      	adds	r1, r3, #4
 80061e6:	6029      	str	r1, [r5, #0]
 80061e8:	0601      	lsls	r1, r0, #24
 80061ea:	d501      	bpl.n	80061f0 <_printf_i+0xec>
 80061ec:	681e      	ldr	r6, [r3, #0]
 80061ee:	e002      	b.n	80061f6 <_printf_i+0xf2>
 80061f0:	0646      	lsls	r6, r0, #25
 80061f2:	d5fb      	bpl.n	80061ec <_printf_i+0xe8>
 80061f4:	881e      	ldrh	r6, [r3, #0]
 80061f6:	2f6f      	cmp	r7, #111	; 0x6f
 80061f8:	bf0c      	ite	eq
 80061fa:	2308      	moveq	r3, #8
 80061fc:	230a      	movne	r3, #10
 80061fe:	4852      	ldr	r0, [pc, #328]	; (8006348 <_printf_i+0x244>)
 8006200:	2100      	movs	r1, #0
 8006202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006206:	6865      	ldr	r5, [r4, #4]
 8006208:	2d00      	cmp	r5, #0
 800620a:	bfa8      	it	ge
 800620c:	6821      	ldrge	r1, [r4, #0]
 800620e:	60a5      	str	r5, [r4, #8]
 8006210:	bfa4      	itt	ge
 8006212:	f021 0104 	bicge.w	r1, r1, #4
 8006216:	6021      	strge	r1, [r4, #0]
 8006218:	b90e      	cbnz	r6, 800621e <_printf_i+0x11a>
 800621a:	2d00      	cmp	r5, #0
 800621c:	d04d      	beq.n	80062ba <_printf_i+0x1b6>
 800621e:	4615      	mov	r5, r2
 8006220:	fbb6 f1f3 	udiv	r1, r6, r3
 8006224:	fb03 6711 	mls	r7, r3, r1, r6
 8006228:	5dc7      	ldrb	r7, [r0, r7]
 800622a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800622e:	4637      	mov	r7, r6
 8006230:	42bb      	cmp	r3, r7
 8006232:	460e      	mov	r6, r1
 8006234:	d9f4      	bls.n	8006220 <_printf_i+0x11c>
 8006236:	2b08      	cmp	r3, #8
 8006238:	d10b      	bne.n	8006252 <_printf_i+0x14e>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	07de      	lsls	r6, r3, #31
 800623e:	d508      	bpl.n	8006252 <_printf_i+0x14e>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	6861      	ldr	r1, [r4, #4]
 8006244:	4299      	cmp	r1, r3
 8006246:	bfde      	ittt	le
 8006248:	2330      	movle	r3, #48	; 0x30
 800624a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800624e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006252:	1b52      	subs	r2, r2, r5
 8006254:	6122      	str	r2, [r4, #16]
 8006256:	464b      	mov	r3, r9
 8006258:	4621      	mov	r1, r4
 800625a:	4640      	mov	r0, r8
 800625c:	f8cd a000 	str.w	sl, [sp]
 8006260:	aa03      	add	r2, sp, #12
 8006262:	f7ff fedf 	bl	8006024 <_printf_common>
 8006266:	3001      	adds	r0, #1
 8006268:	d14c      	bne.n	8006304 <_printf_i+0x200>
 800626a:	f04f 30ff 	mov.w	r0, #4294967295
 800626e:	b004      	add	sp, #16
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006274:	4834      	ldr	r0, [pc, #208]	; (8006348 <_printf_i+0x244>)
 8006276:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800627a:	6829      	ldr	r1, [r5, #0]
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006282:	6029      	str	r1, [r5, #0]
 8006284:	061d      	lsls	r5, r3, #24
 8006286:	d514      	bpl.n	80062b2 <_printf_i+0x1ae>
 8006288:	07df      	lsls	r7, r3, #31
 800628a:	bf44      	itt	mi
 800628c:	f043 0320 	orrmi.w	r3, r3, #32
 8006290:	6023      	strmi	r3, [r4, #0]
 8006292:	b91e      	cbnz	r6, 800629c <_printf_i+0x198>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	f023 0320 	bic.w	r3, r3, #32
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	2310      	movs	r3, #16
 800629e:	e7af      	b.n	8006200 <_printf_i+0xfc>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	f043 0320 	orr.w	r3, r3, #32
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	2378      	movs	r3, #120	; 0x78
 80062aa:	4828      	ldr	r0, [pc, #160]	; (800634c <_printf_i+0x248>)
 80062ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062b0:	e7e3      	b.n	800627a <_printf_i+0x176>
 80062b2:	0659      	lsls	r1, r3, #25
 80062b4:	bf48      	it	mi
 80062b6:	b2b6      	uxthmi	r6, r6
 80062b8:	e7e6      	b.n	8006288 <_printf_i+0x184>
 80062ba:	4615      	mov	r5, r2
 80062bc:	e7bb      	b.n	8006236 <_printf_i+0x132>
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	6826      	ldr	r6, [r4, #0]
 80062c2:	1d18      	adds	r0, r3, #4
 80062c4:	6961      	ldr	r1, [r4, #20]
 80062c6:	6028      	str	r0, [r5, #0]
 80062c8:	0635      	lsls	r5, r6, #24
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	d501      	bpl.n	80062d2 <_printf_i+0x1ce>
 80062ce:	6019      	str	r1, [r3, #0]
 80062d0:	e002      	b.n	80062d8 <_printf_i+0x1d4>
 80062d2:	0670      	lsls	r0, r6, #25
 80062d4:	d5fb      	bpl.n	80062ce <_printf_i+0x1ca>
 80062d6:	8019      	strh	r1, [r3, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	4615      	mov	r5, r2
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	e7ba      	b.n	8006256 <_printf_i+0x152>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	2100      	movs	r1, #0
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	602a      	str	r2, [r5, #0]
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 f82f 	bl	8006350 <memchr>
 80062f2:	b108      	cbz	r0, 80062f8 <_printf_i+0x1f4>
 80062f4:	1b40      	subs	r0, r0, r5
 80062f6:	6060      	str	r0, [r4, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	2300      	movs	r3, #0
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006302:	e7a8      	b.n	8006256 <_printf_i+0x152>
 8006304:	462a      	mov	r2, r5
 8006306:	4649      	mov	r1, r9
 8006308:	4640      	mov	r0, r8
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	47d0      	blx	sl
 800630e:	3001      	adds	r0, #1
 8006310:	d0ab      	beq.n	800626a <_printf_i+0x166>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	079b      	lsls	r3, r3, #30
 8006316:	d413      	bmi.n	8006340 <_printf_i+0x23c>
 8006318:	68e0      	ldr	r0, [r4, #12]
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	4298      	cmp	r0, r3
 800631e:	bfb8      	it	lt
 8006320:	4618      	movlt	r0, r3
 8006322:	e7a4      	b.n	800626e <_printf_i+0x16a>
 8006324:	2301      	movs	r3, #1
 8006326:	4632      	mov	r2, r6
 8006328:	4649      	mov	r1, r9
 800632a:	4640      	mov	r0, r8
 800632c:	47d0      	blx	sl
 800632e:	3001      	adds	r0, #1
 8006330:	d09b      	beq.n	800626a <_printf_i+0x166>
 8006332:	3501      	adds	r5, #1
 8006334:	68e3      	ldr	r3, [r4, #12]
 8006336:	9903      	ldr	r1, [sp, #12]
 8006338:	1a5b      	subs	r3, r3, r1
 800633a:	42ab      	cmp	r3, r5
 800633c:	dcf2      	bgt.n	8006324 <_printf_i+0x220>
 800633e:	e7eb      	b.n	8006318 <_printf_i+0x214>
 8006340:	2500      	movs	r5, #0
 8006342:	f104 0619 	add.w	r6, r4, #25
 8006346:	e7f5      	b.n	8006334 <_printf_i+0x230>
 8006348:	080069b1 	.word	0x080069b1
 800634c:	080069c2 	.word	0x080069c2

08006350 <memchr>:
 8006350:	4603      	mov	r3, r0
 8006352:	b510      	push	{r4, lr}
 8006354:	b2c9      	uxtb	r1, r1
 8006356:	4402      	add	r2, r0
 8006358:	4293      	cmp	r3, r2
 800635a:	4618      	mov	r0, r3
 800635c:	d101      	bne.n	8006362 <memchr+0x12>
 800635e:	2000      	movs	r0, #0
 8006360:	e003      	b.n	800636a <memchr+0x1a>
 8006362:	7804      	ldrb	r4, [r0, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	428c      	cmp	r4, r1
 8006368:	d1f6      	bne.n	8006358 <memchr+0x8>
 800636a:	bd10      	pop	{r4, pc}

0800636c <memcpy>:
 800636c:	440a      	add	r2, r1
 800636e:	4291      	cmp	r1, r2
 8006370:	f100 33ff 	add.w	r3, r0, #4294967295
 8006374:	d100      	bne.n	8006378 <memcpy+0xc>
 8006376:	4770      	bx	lr
 8006378:	b510      	push	{r4, lr}
 800637a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800637e:	4291      	cmp	r1, r2
 8006380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006384:	d1f9      	bne.n	800637a <memcpy+0xe>
 8006386:	bd10      	pop	{r4, pc}

08006388 <memmove>:
 8006388:	4288      	cmp	r0, r1
 800638a:	b510      	push	{r4, lr}
 800638c:	eb01 0402 	add.w	r4, r1, r2
 8006390:	d902      	bls.n	8006398 <memmove+0x10>
 8006392:	4284      	cmp	r4, r0
 8006394:	4623      	mov	r3, r4
 8006396:	d807      	bhi.n	80063a8 <memmove+0x20>
 8006398:	1e43      	subs	r3, r0, #1
 800639a:	42a1      	cmp	r1, r4
 800639c:	d008      	beq.n	80063b0 <memmove+0x28>
 800639e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063a6:	e7f8      	b.n	800639a <memmove+0x12>
 80063a8:	4601      	mov	r1, r0
 80063aa:	4402      	add	r2, r0
 80063ac:	428a      	cmp	r2, r1
 80063ae:	d100      	bne.n	80063b2 <memmove+0x2a>
 80063b0:	bd10      	pop	{r4, pc}
 80063b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063ba:	e7f7      	b.n	80063ac <memmove+0x24>

080063bc <_free_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4605      	mov	r5, r0
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d040      	beq.n	8006446 <_free_r+0x8a>
 80063c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c8:	1f0c      	subs	r4, r1, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfb8      	it	lt
 80063ce:	18e4      	addlt	r4, r4, r3
 80063d0:	f000 f910 	bl	80065f4 <__malloc_lock>
 80063d4:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <_free_r+0x8c>)
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	b933      	cbnz	r3, 80063e8 <_free_r+0x2c>
 80063da:	6063      	str	r3, [r4, #4]
 80063dc:	6014      	str	r4, [r2, #0]
 80063de:	4628      	mov	r0, r5
 80063e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e4:	f000 b90c 	b.w	8006600 <__malloc_unlock>
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d908      	bls.n	80063fe <_free_r+0x42>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	1821      	adds	r1, r4, r0
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf01      	itttt	eq
 80063f4:	6819      	ldreq	r1, [r3, #0]
 80063f6:	685b      	ldreq	r3, [r3, #4]
 80063f8:	1809      	addeq	r1, r1, r0
 80063fa:	6021      	streq	r1, [r4, #0]
 80063fc:	e7ed      	b.n	80063da <_free_r+0x1e>
 80063fe:	461a      	mov	r2, r3
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	b10b      	cbz	r3, 8006408 <_free_r+0x4c>
 8006404:	42a3      	cmp	r3, r4
 8006406:	d9fa      	bls.n	80063fe <_free_r+0x42>
 8006408:	6811      	ldr	r1, [r2, #0]
 800640a:	1850      	adds	r0, r2, r1
 800640c:	42a0      	cmp	r0, r4
 800640e:	d10b      	bne.n	8006428 <_free_r+0x6c>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	4401      	add	r1, r0
 8006414:	1850      	adds	r0, r2, r1
 8006416:	4283      	cmp	r3, r0
 8006418:	6011      	str	r1, [r2, #0]
 800641a:	d1e0      	bne.n	80063de <_free_r+0x22>
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4401      	add	r1, r0
 8006422:	6011      	str	r1, [r2, #0]
 8006424:	6053      	str	r3, [r2, #4]
 8006426:	e7da      	b.n	80063de <_free_r+0x22>
 8006428:	d902      	bls.n	8006430 <_free_r+0x74>
 800642a:	230c      	movs	r3, #12
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	e7d6      	b.n	80063de <_free_r+0x22>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	1821      	adds	r1, r4, r0
 8006434:	428b      	cmp	r3, r1
 8006436:	bf01      	itttt	eq
 8006438:	6819      	ldreq	r1, [r3, #0]
 800643a:	685b      	ldreq	r3, [r3, #4]
 800643c:	1809      	addeq	r1, r1, r0
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	6054      	str	r4, [r2, #4]
 8006444:	e7cb      	b.n	80063de <_free_r+0x22>
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	200001f0 	.word	0x200001f0

0800644c <sbrk_aligned>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4e0e      	ldr	r6, [pc, #56]	; (8006488 <sbrk_aligned+0x3c>)
 8006450:	460c      	mov	r4, r1
 8006452:	6831      	ldr	r1, [r6, #0]
 8006454:	4605      	mov	r5, r0
 8006456:	b911      	cbnz	r1, 800645e <sbrk_aligned+0x12>
 8006458:	f000 f8bc 	bl	80065d4 <_sbrk_r>
 800645c:	6030      	str	r0, [r6, #0]
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f8b7 	bl	80065d4 <_sbrk_r>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d00a      	beq.n	8006480 <sbrk_aligned+0x34>
 800646a:	1cc4      	adds	r4, r0, #3
 800646c:	f024 0403 	bic.w	r4, r4, #3
 8006470:	42a0      	cmp	r0, r4
 8006472:	d007      	beq.n	8006484 <sbrk_aligned+0x38>
 8006474:	1a21      	subs	r1, r4, r0
 8006476:	4628      	mov	r0, r5
 8006478:	f000 f8ac 	bl	80065d4 <_sbrk_r>
 800647c:	3001      	adds	r0, #1
 800647e:	d101      	bne.n	8006484 <sbrk_aligned+0x38>
 8006480:	f04f 34ff 	mov.w	r4, #4294967295
 8006484:	4620      	mov	r0, r4
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	200001f4 	.word	0x200001f4

0800648c <_malloc_r>:
 800648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	1ccd      	adds	r5, r1, #3
 8006492:	f025 0503 	bic.w	r5, r5, #3
 8006496:	3508      	adds	r5, #8
 8006498:	2d0c      	cmp	r5, #12
 800649a:	bf38      	it	cc
 800649c:	250c      	movcc	r5, #12
 800649e:	2d00      	cmp	r5, #0
 80064a0:	4607      	mov	r7, r0
 80064a2:	db01      	blt.n	80064a8 <_malloc_r+0x1c>
 80064a4:	42a9      	cmp	r1, r5
 80064a6:	d905      	bls.n	80064b4 <_malloc_r+0x28>
 80064a8:	230c      	movs	r3, #12
 80064aa:	2600      	movs	r6, #0
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	4630      	mov	r0, r6
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	4e2e      	ldr	r6, [pc, #184]	; (8006570 <_malloc_r+0xe4>)
 80064b6:	f000 f89d 	bl	80065f4 <__malloc_lock>
 80064ba:	6833      	ldr	r3, [r6, #0]
 80064bc:	461c      	mov	r4, r3
 80064be:	bb34      	cbnz	r4, 800650e <_malloc_r+0x82>
 80064c0:	4629      	mov	r1, r5
 80064c2:	4638      	mov	r0, r7
 80064c4:	f7ff ffc2 	bl	800644c <sbrk_aligned>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	4604      	mov	r4, r0
 80064cc:	d14d      	bne.n	800656a <_malloc_r+0xde>
 80064ce:	6834      	ldr	r4, [r6, #0]
 80064d0:	4626      	mov	r6, r4
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d140      	bne.n	8006558 <_malloc_r+0xcc>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	4631      	mov	r1, r6
 80064da:	4638      	mov	r0, r7
 80064dc:	eb04 0803 	add.w	r8, r4, r3
 80064e0:	f000 f878 	bl	80065d4 <_sbrk_r>
 80064e4:	4580      	cmp	r8, r0
 80064e6:	d13a      	bne.n	800655e <_malloc_r+0xd2>
 80064e8:	6821      	ldr	r1, [r4, #0]
 80064ea:	3503      	adds	r5, #3
 80064ec:	1a6d      	subs	r5, r5, r1
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	4638      	mov	r0, r7
 80064fc:	4629      	mov	r1, r5
 80064fe:	f7ff ffa5 	bl	800644c <sbrk_aligned>
 8006502:	3001      	adds	r0, #1
 8006504:	d02b      	beq.n	800655e <_malloc_r+0xd2>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	442b      	add	r3, r5
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	e00e      	b.n	800652c <_malloc_r+0xa0>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	1b52      	subs	r2, r2, r5
 8006512:	d41e      	bmi.n	8006552 <_malloc_r+0xc6>
 8006514:	2a0b      	cmp	r2, #11
 8006516:	d916      	bls.n	8006546 <_malloc_r+0xba>
 8006518:	1961      	adds	r1, r4, r5
 800651a:	42a3      	cmp	r3, r4
 800651c:	6025      	str	r5, [r4, #0]
 800651e:	bf18      	it	ne
 8006520:	6059      	strne	r1, [r3, #4]
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	bf08      	it	eq
 8006526:	6031      	streq	r1, [r6, #0]
 8006528:	5162      	str	r2, [r4, r5]
 800652a:	604b      	str	r3, [r1, #4]
 800652c:	4638      	mov	r0, r7
 800652e:	f104 060b 	add.w	r6, r4, #11
 8006532:	f000 f865 	bl	8006600 <__malloc_unlock>
 8006536:	f026 0607 	bic.w	r6, r6, #7
 800653a:	1d23      	adds	r3, r4, #4
 800653c:	1af2      	subs	r2, r6, r3
 800653e:	d0b6      	beq.n	80064ae <_malloc_r+0x22>
 8006540:	1b9b      	subs	r3, r3, r6
 8006542:	50a3      	str	r3, [r4, r2]
 8006544:	e7b3      	b.n	80064ae <_malloc_r+0x22>
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	42a3      	cmp	r3, r4
 800654a:	bf0c      	ite	eq
 800654c:	6032      	streq	r2, [r6, #0]
 800654e:	605a      	strne	r2, [r3, #4]
 8006550:	e7ec      	b.n	800652c <_malloc_r+0xa0>
 8006552:	4623      	mov	r3, r4
 8006554:	6864      	ldr	r4, [r4, #4]
 8006556:	e7b2      	b.n	80064be <_malloc_r+0x32>
 8006558:	4634      	mov	r4, r6
 800655a:	6876      	ldr	r6, [r6, #4]
 800655c:	e7b9      	b.n	80064d2 <_malloc_r+0x46>
 800655e:	230c      	movs	r3, #12
 8006560:	4638      	mov	r0, r7
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	f000 f84c 	bl	8006600 <__malloc_unlock>
 8006568:	e7a1      	b.n	80064ae <_malloc_r+0x22>
 800656a:	6025      	str	r5, [r4, #0]
 800656c:	e7de      	b.n	800652c <_malloc_r+0xa0>
 800656e:	bf00      	nop
 8006570:	200001f0 	.word	0x200001f0

08006574 <_realloc_r>:
 8006574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006578:	4680      	mov	r8, r0
 800657a:	4614      	mov	r4, r2
 800657c:	460e      	mov	r6, r1
 800657e:	b921      	cbnz	r1, 800658a <_realloc_r+0x16>
 8006580:	4611      	mov	r1, r2
 8006582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006586:	f7ff bf81 	b.w	800648c <_malloc_r>
 800658a:	b92a      	cbnz	r2, 8006598 <_realloc_r+0x24>
 800658c:	f7ff ff16 	bl	80063bc <_free_r>
 8006590:	4625      	mov	r5, r4
 8006592:	4628      	mov	r0, r5
 8006594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006598:	f000 f838 	bl	800660c <_malloc_usable_size_r>
 800659c:	4284      	cmp	r4, r0
 800659e:	4607      	mov	r7, r0
 80065a0:	d802      	bhi.n	80065a8 <_realloc_r+0x34>
 80065a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065a6:	d812      	bhi.n	80065ce <_realloc_r+0x5a>
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff ff6e 	bl	800648c <_malloc_r>
 80065b0:	4605      	mov	r5, r0
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d0ed      	beq.n	8006592 <_realloc_r+0x1e>
 80065b6:	42bc      	cmp	r4, r7
 80065b8:	4622      	mov	r2, r4
 80065ba:	4631      	mov	r1, r6
 80065bc:	bf28      	it	cs
 80065be:	463a      	movcs	r2, r7
 80065c0:	f7ff fed4 	bl	800636c <memcpy>
 80065c4:	4631      	mov	r1, r6
 80065c6:	4640      	mov	r0, r8
 80065c8:	f7ff fef8 	bl	80063bc <_free_r>
 80065cc:	e7e1      	b.n	8006592 <_realloc_r+0x1e>
 80065ce:	4635      	mov	r5, r6
 80065d0:	e7df      	b.n	8006592 <_realloc_r+0x1e>
	...

080065d4 <_sbrk_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	2300      	movs	r3, #0
 80065d8:	4d05      	ldr	r5, [pc, #20]	; (80065f0 <_sbrk_r+0x1c>)
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	f7fd fb02 	bl	8003be8 <_sbrk>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_sbrk_r+0x1a>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_sbrk_r+0x1a>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	200001f8 	.word	0x200001f8

080065f4 <__malloc_lock>:
 80065f4:	4801      	ldr	r0, [pc, #4]	; (80065fc <__malloc_lock+0x8>)
 80065f6:	f000 b811 	b.w	800661c <__retarget_lock_acquire_recursive>
 80065fa:	bf00      	nop
 80065fc:	200001fc 	.word	0x200001fc

08006600 <__malloc_unlock>:
 8006600:	4801      	ldr	r0, [pc, #4]	; (8006608 <__malloc_unlock+0x8>)
 8006602:	f000 b80c 	b.w	800661e <__retarget_lock_release_recursive>
 8006606:	bf00      	nop
 8006608:	200001fc 	.word	0x200001fc

0800660c <_malloc_usable_size_r>:
 800660c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006610:	1f18      	subs	r0, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbc      	itt	lt
 8006616:	580b      	ldrlt	r3, [r1, r0]
 8006618:	18c0      	addlt	r0, r0, r3
 800661a:	4770      	bx	lr

0800661c <__retarget_lock_acquire_recursive>:
 800661c:	4770      	bx	lr

0800661e <__retarget_lock_release_recursive>:
 800661e:	4770      	bx	lr

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
